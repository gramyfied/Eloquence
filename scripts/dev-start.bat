@echo off
REM Script de d√©marrage optimis√© pour le d√©veloppement sur Windows

echo üöÄ D√©marrage de l'environnement de d√©veloppement Eloquence
echo ==================================================

REM V√©rifier Docker
docker --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå Docker n'est pas install√© ou pas dans le PATH
    pause
    exit /b 1
)

docker info >nul 2>&1
if errorlevel 1 (
    echo ‚ùå Docker n'est pas d√©marr√© ou inaccessible
    echo üí° Assurez-vous que Docker Desktop est d√©marr√©
    pause
    exit /b 1
)

echo ‚úÖ Docker est disponible

REM V√©rifier Docker Compose
docker compose version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå Docker Compose n'est pas disponible
    pause
    exit /b 1
)

echo ‚úÖ Docker Compose est disponible

REM V√©rifier si on est dans le bon r√©pertoire
if not exist "docker-compose.dev.yml" (
    echo ‚ùå Le fichier docker-compose.dev.yml n'existe pas
    echo üí° Assurez-vous d'√™tre dans le r√©pertoire racine du projet
    pause
    exit /b 1
)

REM Nettoyer si demand√©
if "%1"=="--clean" (
    echo ‚ÑπÔ∏è Nettoyage des conteneurs existants...
    docker compose -f docker-compose.dev.yml down --volumes --remove-orphans 2>nul
    docker system prune -f --volumes 2>nul
    echo ‚úÖ Nettoyage termin√©
)

REM Choisir le mode
set MODE=%1
if "%MODE%"=="" set MODE=dev
if "%MODE%"=="--clean" set MODE=dev

if "%MODE%"=="watch" (
    echo ‚ÑπÔ∏è D√©marrage en mode Docker Compose Watch ^(synchronisation ultra-rapide^)
    set COMPOSE_FILE=docker-compose.watch.yml
    set COMMAND=docker compose -f docker-compose.watch.yml up --watch
) else (
    echo ‚ÑπÔ∏è D√©marrage en mode d√©veloppement standard
    set COMPOSE_FILE=docker-compose.dev.yml
    set COMMAND=docker compose -f docker-compose.dev.yml up --build
)

echo ‚ÑπÔ∏è Fichier de configuration: %COMPOSE_FILE%

REM V√©rifier que le fichier existe
if not exist "%COMPOSE_FILE%" (
    echo ‚ùå Le fichier %COMPOSE_FILE% n'existe pas
    pause
    exit /b 1
)

REM Construire les images
echo ‚ÑπÔ∏è Construction des images Docker...
docker compose -f %COMPOSE_FILE% build --parallel

REM Afficher les informations
echo.
echo ‚úÖ üéØ Services qui vont d√©marrer:
echo    ‚Ä¢ API Backend ^(port 8000^) - Hot reload activ√©
echo    ‚Ä¢ LiveKit Server ^(port 7880^)
echo    ‚Ä¢ Redis ^(port 6379^)
echo    ‚Ä¢ Whisper STT ^(port 8001^)
echo    ‚Ä¢ Azure TTS ^(port 5002^)
echo.
echo ‚ÑπÔ∏è üî• Hot-reload activ√© - vos modifications seront appliqu√©es instantan√©ment !
echo.
echo ‚ö†Ô∏è RECOMMANDATION: Pour de meilleures performances, d√©placez votre projet dans WSL 2
echo    1. Ouvrez WSL: wsl
echo    2. Copiez le projet: cp -r /mnt/c/Users/User/Desktop/25Eloquence-Finalisation ~/projects/
echo    3. Ouvrez VS Code depuis WSL: code ~/projects/25Eloquence-Finalisation
echo.

REM D√©marrer les services
%COMMAND%