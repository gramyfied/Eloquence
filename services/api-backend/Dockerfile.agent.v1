# Dockerfile Agent LiveKit v1.x - Compatible Python 3.10+

# --- Build Stage ---
FROM python:3.11 as builder

# Variables d'environnement pour le build
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Installer les dépendances système requises pour LiveKit v1.x
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libsndfile1-dev \
    ffmpeg \
    git \
    curl \
    wget \
    pkg-config \
    ca-certificates \
    gnupg \
    lsb-release \
    libasound2-dev \
    libpulse-dev \
    libssl-dev \
    libffi-dev \
    libopus-dev \
    libvpx-dev \
    libx264-dev \
    libavcodec-dev \
    libavformat-dev \
    libavutil-dev \
    libswresample-dev \
    # Nouvelles dépendances pour LiveKit v1.x
    libsrtp2-dev \
    libwebrtc-audio-processing-dev \
    procps \
    netcat-openbsd \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /tmp/build

# Copier le nouveau requirements v1.x
COPY services/api-backend/requirements.agent.v1.txt requirements.txt

# Installer toutes les dépendances Python en une seule étape
RUN pip install setuptools wheel && \
    pip install -r requirements.txt


# --- Final Stage ---
FROM python:3.11.9-slim-bookworm

# Variables d'environnement pour le runtime
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Installation des dépendances système Runtime (pour netcat)
RUN apt-get update && apt-get install -y --no-install-recommends \
    netcat-openbsd \
    && rm -rf /var/lib/apt/lists/*

# Création d'un utilisateur non-root
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Répertoire de travail
WORKDIR /app

# Copie des dépendances installées depuis l'étape de build
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages

# Copier le code source spécifique
COPY . .

# Créer les répertoires nécessaires
RUN mkdir -p /app/data/audio /app/data/feedback /app/data/models /app/logs /app/voices

# Copier les scripts
COPY services/api-backend/start-agent-v1.sh .
COPY services/api-backend/wait-for-it.sh .

# Définition de l'utilisateur non-root et changement des permissions
RUN chown -R appuser:appuser /app
USER appuser

# Convertir les fins de ligne et rendre exécutable
RUN sed -i 's/\r$//' start-agent-v1.sh && \
    chmod +x start-agent-v1.sh && \
    sed -i 's/\r$//' wait-for-it.sh && \
    chmod +x wait-for-it.sh

# Exposer le port pour l'agent
EXPOSE 8000

# Health check - Vérifier que le processus agent fonctionne
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD ps aux | grep "real_time_voice_agent_force_audio_fixed.py" | grep -v grep > /dev/null || exit 1

# Commande de démarrage - Utiliser le script de démarrage corrigé
CMD ["./wait-for-it.sh", "livekit", "7880", "--", "./start-agent-v1.sh"]
