import asyncio
import logging
import os
from dotenv import load_dotenv

from livekit import agents
from livekit.agents import AgentSession, Agent, JobContext
from livekit.plugins import openai as openai_plugin
from livekit.plugins import silero

# Charger les variables d'environnement
load_dotenv()

# Configuration du logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Import de notre LLM personnalis√©
from real_time_voice_agent_force_audio_fixed import MistralLLM, EloquenceCoach

async def entrypoint(ctx: agents.JobContext):
    """
    Point d'entr√©e utilisant le plugin OpenAI officiel pour TTS
    """
    logger.info("üöÄ [ENTRYPOINT] D√©marrage avec plugin OpenAI officiel")

    # V√©rifier la cl√© API OpenAI
    openai_api_key = os.getenv("OPENAI_API_KEY")
    if not openai_api_key:
        logger.error("‚ùå OPENAI_API_KEY non d√©finie!")
        return

    # Utilisation du plugin OpenAI officiel pour TTS
    tts = openai_plugin.TTS(
        api_key=openai_api_key,
        model="tts-1",
        voice="alloy"
    )

    # Cr√©er la session avec le plugin officiel
    session = AgentSession(
        llm=MistralLLM(),
        tts=tts,  # Plugin officiel
        vad=silero.VAD.load(),
    )

    # L'agent personnalis√©
    agent = EloquenceCoach()

    # D√©marrer la session
    logger.info("üîß [SESSION] D√©marrage de la session avec plugin OpenAI...")
    await session.start(
        room=ctx.room,
        agent=agent,
    )
    logger.info("‚úÖ [SESSION] Session d√©marr√©e avec succ√®s")

    # Connexion √† la room
    await ctx.connect()
    logger.info(f"‚úÖ [ROOM] Agent connect√© √† la room: {ctx.room.name}")

    # Message de bienvenue
    logger.info("üéôÔ∏è [WELCOME] Envoi du message de bienvenue...")
    try:
        await session.generate_reply(
            instructions="Bonjour ! Je suis votre coach d'√©loquence IA. Je suis maintenant connect√© et pr√™t √† vous aider. Parlez-moi pour commencer notre session."
        )
        logger.info("‚úÖ [WELCOME] Message de bienvenue envoy√©")
    except Exception as e:
        logger.error(f"‚ùå [WELCOME] Erreur: {e}")

    # Boucle d'√©v√©nements
    try:
        async for e in session.events():
            if isinstance(e, agents.Agent.AgentSpeechEvent):
                if e.type == agents.Agent.AgentSpeechEventTypes.STARTED:
                    logger.info("üîä [SPEECH] L'agent commence √† parler")
                elif e.type == agents.Agent.AgentSpeechEventTypes.FINISHED:
                    logger.info("üîä [SPEECH] L'agent a fini de parler")
            elif isinstance(e, agents.Agent.AgentUserSpeechEvent):
                logger.info(f"üó£Ô∏è [USER_SPEECH] Utilisateur: {e.text}")
                if e.text:
                    agent.error_count = 0
            elif isinstance(e, agents.Agent.AgentChatMessageEvent):
                logger.info(f"üí¨ [CHAT] Message: {e.message.body}")
                agent.error_count = 0
    except Exception as e:
        logger.error(f"‚ùå [EVENTS] Erreur: {e}")
        agent.error_count += 1
        
        if agent.error_count >= agent.max_errors:
            logger.warning("‚ö†Ô∏è [AGENT] R√©initialisation du contexte")
            try:
                if hasattr(session, '_chat_ctx'):
                    session._chat_ctx.clear()
                    logger.info("‚úÖ [AGENT] Contexte r√©initialis√©")
                agent.error_count = 0
            except Exception as reset_e:
                logger.error(f"‚ùå [AGENT] Erreur r√©initialisation: {reset_e}")

if __name__ == "__main__":
    print("[MAIN] D√©marrage avec plugin OpenAI officiel...", flush=True)
    agents.cli.run_app(agents.WorkerOptions(entrypoint_fnc=entrypoint))