import asyncio
import logging
import os
from dotenv import load_dotenv

from livekit import agents, rtc
from livekit.agents import JobContext, WorkerOptions, cli
from livekit.agents.voice import Agent, AgentSession
from livekit.plugins import openai, silero

# Charger les variables d'environnement
load_dotenv()

# Configuration du logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

async def entrypoint(ctx: JobContext):
    """
    Point d'entr√©e minimal pour tester le TTS
    """
    logger.info("üöÄ [ENTRYPOINT] D√©marrage minimal")

    # Connexion √† la room
    await ctx.connect()
    logger.info(f"‚úÖ [ROOM] Connect√© √†: {ctx.room.name}")

    # Configuration minimale avec l'API v1.1.5
    initial_ctx = agents.llm.ChatContext()
    
    # Utiliser la nouvelle API pour ajouter des messages
    if hasattr(initial_ctx, 'add_message'):
        # Nouvelle API v1.1.5
        initial_ctx.add_message(
            role="system",
            content="Tu es un assistant vocal simple. R√©ponds bri√®vement."
        )
    elif hasattr(initial_ctx, 'append'):
        # Ancienne API (fallback)
        initial_ctx.append(
            role="system",
            text="Tu es un assistant vocal simple. R√©ponds bri√®vement."
        )
    else:
        # Si aucune m√©thode n'est disponible, cr√©er avec messages
        from livekit.agents.llm import ChatMessage, ChatRole
        initial_ctx = agents.llm.ChatContext(messages=[
            ChatMessage(
                role=ChatRole.SYSTEM,
                content="Tu es un assistant vocal simple. R√©ponds bri√®vement."
            )
        ])

    # Cr√©er l'agent avec la nouvelle API v1.1.5
    agent = Agent(
        instructions="Tu es un assistant vocal simple. R√©ponds bri√®vement.",
        chat_ctx=initial_ctx,
        stt=openai.STT(),
        vad=silero.VAD.load(),
        llm=openai.LLM(),
        tts=openai.TTS(
            model="tts-1",
            voice="shimmer"
        ),
    )
    
    # Cr√©er une session d'agent
    session = AgentSession()
    logger.info("üîß [SESSION] Session cr√©√©e")
    
    # D√©marrer l'agent avec la session
    await session.start(agent, room=ctx.room)
    logger.info("‚úÖ [AGENT] Agent d√©marr√© avec succ√®s")
    
    # Message de bienvenue
    await session.say("Bonjour ! Je suis votre assistant vocal. Comment puis-je vous aider ?")
    logger.info("üé§ [TTS] Message de bienvenue envoy√©")

if __name__ == "__main__":
    cli.run_app(WorkerOptions(entrypoint_fnc=entrypoint))