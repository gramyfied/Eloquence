# Dockerfile optimisé pour le système multi-agents LiveKit
FROM python:3.11-slim

# Variables d'environnement pour optimisation
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_VERSION=1.6.1 \
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_NO_INTERACTION=1 \
    PYSETUP_PATH="/opt/pysetup" \
    VENV_PATH="/opt/pysetup/.venv"

# Ajouter poetry au PATH
ENV PATH="$POETRY_HOME/bin:$VENV_PATH/bin:$PATH"

# Installer les dépendances système
RUN apt-get update && apt-get install -y \
    curl \
    gcc \
    g++ \
    make \
    ffmpeg \
    libsndfile1 \
    portaudio19-dev \
    && rm -rf /var/lib/apt/lists/*

# Installer Poetry
RUN curl -sSL https://install.python-poetry.org | python3

# Copier les fichiers de configuration Poetry
WORKDIR $PYSETUP_PATH
COPY pyproject.toml poetry.lock* ./

# Installer les dépendances Python
RUN poetry install --no-dev --no-root

# Copier le code de l'application
WORKDIR /app
COPY . .

# Créer un utilisateur non-root pour la sécurité
RUN useradd -m -u 1000 agent && chown -R agent:agent /app
USER agent

# Commande par défaut avec le nouveau système multi-agents Studio Situations Pro
CMD ["python", "multi_agent_main.py"]

# Health check pour Kubernetes/Docker Compose
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1