"""
Point d'entr√©e principal pour le syst√®me multi-agents Studio Situations Pro
Utilise directement MultiAgentManager avec les vrais agents configur√©s
"""
import asyncio
import logging
import os
from typing import Dict, Any, List, Optional
from dataclasses import dataclass
from datetime import datetime, timedelta
from dotenv import load_dotenv
from livekit import agents, rtc
from livekit.agents import (
    Agent,
    AgentSession,
    JobContext,
    RunContext,
    function_tool,
    llm,
)
from livekit.plugins import openai, silero
try:
    from elevenlabs_flash_tts_service import elevenlabs_flash_service
except Exception:  # pragma: no cover - tests peuvent manquer le module
    elevenlabs_flash_service = None  # type: ignore
from vosk_stt_interface import VoskSTTFixed as VoskSTT

# Imports du syst√®me multi-agents
from multi_agent_config import (
    MultiAgentConfig, 
    AgentPersonality, 
    InteractionStyle,
    ExerciseTemplates
)
from multi_agent_manager import MultiAgentManager
from naturalness_monitor import NaturalnessMonitor

# Charger les variables d'environnement
load_dotenv()

# Configuration avec logs d√©taill√©s pour debug
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Log des variables d'environnement critiques (sans exposer les secrets)
logger.info("üîç DIAGNOSTIC MULTI-AGENTS: Variables d'environnement")
logger.info(f"   OPENAI_API_KEY pr√©sente: {'Oui' if os.getenv('OPENAI_API_KEY') else 'Non'}")
logger.info(f"   ELEVENLABS_API_KEY pr√©sente: {'Oui' if os.getenv('ELEVENLABS_API_KEY') else 'Non'}")
logger.info(f"   MISTRAL_BASE_URL: {os.getenv('MISTRAL_BASE_URL', 'Non d√©finie')}")

# URLs des services
# Base OpenAI-compatible (le client ajoutera /chat/completions lui-m√™me)
MISTRAL_API_URL = os.getenv('MISTRAL_BASE_URL', 'http://mistral-conversation:8001/v1')
VOSK_STT_URL = os.getenv('VOSK_STT_URL', 'http://vosk-stt:8002')

class MultiAgentLiveKitService:
    """Service LiveKit int√©gr√© avec le gestionnaire multi-agents"""
    
    def __init__(self, multi_agent_config: MultiAgentConfig, user_data: dict = None):
        self.config = multi_agent_config
        self.naturalness_monitor = NaturalnessMonitor()
        self.manager = MultiAgentManager(multi_agent_config, monitor=self.naturalness_monitor)
        self.session: Optional[AgentSession] = None
        self.room = None
        self.is_running = False
        self.user_data = user_data or {'user_name': 'Participant', 'user_subject': 'votre pr√©sentation'}
        # Cache de TTS par agent pour fiabiliser la voix et r√©duire la latence
        self.agent_tts: Dict[str, Any] = {}
        
        logger.info(f"üé≠ MultiAgentLiveKitService initialis√© pour: {multi_agent_config.exercise_id}")
        logger.info(f"üë§ Utilisateur: {self.user_data['user_name']}, Sujet: {self.user_data['user_subject']}")
        logger.info(f"   Nombre d'agents: {len(multi_agent_config.agents)}")
        for agent in multi_agent_config.agents:
            logger.info(f"   - {agent.name} ({agent.role}) - Style: {agent.interaction_style.value}")

        logger.info("üé≠ SYST√àME DE NATURALIT√â COMPLET initialis√©")
        
    async def initialize_components(self):
        """Initialise les composants LiveKit avec fallbacks robustes"""
        components = {}
        
        # VAD avec fallback
        try:
            vad = silero.VAD.load()
            components['vad'] = vad
            logger.info("‚úÖ VAD Silero charg√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur VAD: {e}")
            raise
            
        # STT avec fallback Vosk ‚Üí OpenAI
        try:
            stt = self.create_vosk_stt_with_fallback()
            components['stt'] = stt
            logger.info("‚úÖ STT avec fallback cr√©√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur STT: {e}")
            raise
            
        # LLM avec fallback
        try:
            llm_instance = self.create_mistral_llm()
            components['llm'] = llm_instance
            logger.info("‚úÖ LLM OpenAI cr√©√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur LLM: {e}")
            raise
            
        # TTS sp√©cialis√© pour multi-agents
        try:
            tts = await self.create_multiagent_tts()
            components['tts'] = tts
            logger.info("‚úÖ TTS multi-agents cr√©√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur TTS: {e}")
            raise
            
        return components
    
    def create_vosk_stt_with_fallback(self):
        """Cr√©e une interface STT avec Vosk en principal et OpenAI en fallback"""
        logger.info("üîÑ [STT-MULTI-AGENTS] Initialisation STT avec logique de fallback (Vosk ‚Üí OpenAI)")
        
        # Tentative 1: Vosk (rapide et √©conomique)
        try:
            vosk_stt = VoskSTT(
                vosk_url=VOSK_STT_URL,
                language="fr",
                sample_rate=16000
            )
            
            # Reset automatique
            def enhanced_clear_user_turn():
                logger.debug("üîÑ [STT-MULTI-AGENTS] Clear user turn avec reset Vosk")
                if hasattr(vosk_stt, '_reset_recognizer'):
                    vosk_stt._reset_recognizer()
            
            vosk_stt.clear_user_turn = enhanced_clear_user_turn
            
            logger.info("‚úÖ [STT-MULTI-AGENTS] VOSK STT ACTIV√â AVEC SUCC√àS")
            return vosk_stt
        except Exception as vosk_error:
            logger.error(f"‚ùå [STT-MULTI-AGENTS] √âCHEC STT Vosk: {vosk_error}")
            
        # Fallback: OpenAI Whisper
        try:
            logger.warning("‚ö†Ô∏è [STT-MULTI-AGENTS] Basculement vers OpenAI Whisper (fallback)")
            api_key = os.getenv('OPENAI_API_KEY')
            if not api_key:
                raise RuntimeError("OPENAI_API_KEY manquante pour le fallback")
                
            openai_stt = openai.STT(
                model="whisper-1",
                language="fr",
                api_key=api_key,
            )
            logger.warning("‚ö†Ô∏è [STT-MULTI-AGENTS] OPENAI STT ACTIV√â (FALLBACK)")
            return openai_stt
        except Exception as openai_error:
            logger.error(f"‚ùå [STT-MULTI-AGENTS] √âchec STT OpenAI fallback: {openai_error}")
            raise RuntimeError(f"Impossible de cr√©er STT (Vosk: {vosk_error}, OpenAI: {openai_error})")

    def create_mistral_llm(self):
        """Cr√©e un LLM configur√© pour utiliser le proxy Mistral c√¥t√© backend.

        Utilise une API compatible OpenAI et choisit la base_url finale en fonction
        de `MISTRAL_USE_PROXY` et `MISTRAL_PROXY_URL`.
        """
        mistral_api_key = os.getenv('MISTRAL_API_KEY', '')
        model = os.getenv('MISTRAL_MODEL', 'mistral-small-latest')
        # Choix de la base_url: proxy local activable via MISTRAL_USE_PROXY=1, sinon direct (MISTRAL_BASE_URL)
        use_proxy = os.getenv('MISTRAL_USE_PROXY', '0') == '1'
        proxy_url = os.getenv('MISTRAL_PROXY_URL', 'http://mistral-conversation:8001/v1')
        base_url = proxy_url if use_proxy else MISTRAL_API_URL
        logger.info(
            f"üîç Configuration LLM Mistral - Mod√®le: {model} | "
            f"use_proxy={'Oui' if use_proxy else 'Non'} | base_url={base_url}"
        )
        return openai.LLM(
            model=model,
            api_key=mistral_api_key,
            base_url=base_url,
        )

    async def create_multiagent_tts(self):
        """Cr√©e un TTS par d√©faut bas√© sur ElevenLabs pour les simulations Studio.

        Note: Chaque agent utilisera ensuite son TTS d√©di√© via _get_or_build_agent_tts.
        Ce TTS par d√©faut est utilis√© pour les annonces initiales au besoin.
        """
        try:
            if elevenlabs_flash_service is None or not os.getenv('ELEVENLABS_API_KEY'):
                raise RuntimeError("ELEVENLABS_API_KEY manquante ou service ElevenLabs indisponible")

            class _ElevenLabsOnDemandTTS:
                # Expose at class-level to satisfy frameworks accessing attributes before __init__
                _sample_rate = 16000
                _num_channels = 1
                def __init__(self_inner):
                    from livekit.agents import tts as _tts
                    self_inner.capabilities = _tts.TTSCapabilities(streaming=False)
                    self_inner._current_sample_rate = 16000
                @property
                def sample_rate(self_inner):
                    return getattr(self_inner, "_current_sample_rate", 16000)
                @property
                def num_channels(self_inner):
                    return 1
                def on(self_inner, _event_name: str):  # hook requis par StreamAdapter
                    def _decorator(fn):
                        return fn
                    return _decorator
                def synthesize(self_inner, text_inner: str, **_kwargs):
                    """Retourne un async context manager compatible StreamAdapter.

                    L'appel ElevenLabs est effectu√© dans __aenter__ pour √©viter de
                    retourner une coroutine √† 'async with'.
                    """
                    from livekit.agents import tts as _tts

                    class _AsyncStream:
                        def __init__(self, text_value: str):
                            self._text = text_value
                            self._audio: bytes = b""
                            self._done = False
                            self._sample_rate: int = 16000
                            self._pos: int = 0
                            self._chunk_bytes: int = int(0.02 * self._sample_rate) * 1 * 2
                            self._sample_rate: int = 16000

                        def __aiter__(self):
                            return self

                        async def __anext__(self):
                            if self._done:
                                raise StopAsyncIteration
                            if not self._audio or self._pos >= len(self._audio):
                                self._done = True
                                raise StopAsyncIteration
                            end = min(self._pos + self._chunk_bytes, len(self._audio))
                            chunk = self._audio[self._pos:end]
                            self._pos = end
                            if self._pos >= len(self._audio):
                                self._done = True
                            class _CompatFrame:
                                def __init__(self, buf: bytes, rate: int, channels: int = 1):
                                    self.data = memoryview(buf)
                                    self.duration = len(buf) / (2 * rate * channels)
                            class _CompatAudio:
                                def __init__(self, buf: bytes, rate: int, channels: int = 1):
                                    self.frame = _CompatFrame(buf, rate, channels)
                                    self.sample_rate = rate
                                    self.num_channels = channels
                            return _CompatAudio(chunk, self._sample_rate, 1)

                        async def __aenter__(self):
                            audio = await elevenlabs_flash_service.synthesize_speech_flash_v25(
                                text=self._text, agent_id="michel_dubois_animateur"
                            )
                            self._audio = audio or b""
                            # Flux natif 16 kHz PCM mono ‚Äî pas de resampling vers 48 kHz
                            self._sample_rate = 16000
                            self_inner._current_sample_rate = 16000
                            # Trim au multiple exact de 20ms pour √©viter les drops
                            try:
                                frame_samples = int(0.02 * self._sample_rate)  # 20ms
                                frame_bytes = frame_samples * 1 * 2
                                if frame_bytes > 0 and len(self._audio) % frame_bytes != 0:
                                    trimmed_len = len(self._audio) - (len(self._audio) % frame_bytes)
                                    self._audio = self._audio[:trimmed_len]
                                self._chunk_bytes = frame_bytes
                                logger.debug(f"üéöÔ∏è [TTS-default] Pr√©paration audio: {len(self._audio)} bytes, frame_bytes={frame_bytes}, rate={self._sample_rate}")
                            except Exception:
                                pass
                            return self

                        async def __aexit__(self, exc_type, exc, tb):
                            return False

                    return _AsyncStream(text_inner)

            logger.info("‚úÖ TTS par d√©faut ElevenLabs pr√™t (mod√©rateur)")
            return _ElevenLabsOnDemandTTS()
        except Exception as e:
            logger.error(f"‚ùå ElevenLabs TTS indisponible: {e}")
            # √âviter Silero (non support√©). Lever clairement l'erreur pour visibilit√©.
            raise

    def create_multiagent_agent(self) -> Agent:
        """Cr√©e un agent LiveKit configur√© pour le syst√®me multi-agents"""
        try:
            # Instructions combin√©es pour tous les agents
            primary_agent = self.config.agents[0]
            
            # Trouver le mod√©rateur ou utiliser le premier agent
            moderator = None
            for agent in self.config.agents:
                if agent.interaction_style == InteractionStyle.MODERATOR:
                    moderator = agent
                    break
            
            if not moderator:
                moderator = primary_agent
            
            # Instructions syst√®me int√©gr√©es (forcer l'usage de l'outil d'orchestration)
            system_instructions = f"""Tu es {moderator.name}, {moderator.role} dans une simulation multi-agents Studio Situations Pro.

            üéØ AGENTS PR√âSENTS DANS LA SIMULATION:
            {chr(10).join([f"‚Ä¢ {agent.name}: {agent.role} ({agent.interaction_style.value})" for agent in self.config.agents])}

            üéØ TON R√îLE EN TANT QUE {moderator.name}:
            {moderator.system_prompt}

            üìã CONTEXTE SIMULATION: {self.config.exercise_id}
            - Gestion des tours: {self.config.turn_management}
            - Dur√©e maximale: {self.config.max_duration_minutes} minutes
            - R√®gles d'interaction: {self.config.interaction_rules}

            üîß INSTRUCTIONS SP√âCIALES MULTI-AGENTS:
            - Pr√©sente-toi TOUJOURS avec ton vrai nom: {moderator.name}
            - Tu repr√©sentes l'agent principal mais coordonnes avec les autres
            - Adapte ton style: {moderator.interaction_style.value}
            - Mentionne les autres participants selon le contexte
            - Utilise un style professionnel adapt√© √† la situation
            - Garde tes r√©ponses courtes et engageantes (2-3 phrases max)
            - Identifie-toi clairement dans chaque message

            üõ†Ô∏è OUTILS DISPONIBLES:
            - generate_multiagent_response(user_message: str): orchestre la r√©ponse multi-agents (Michel + Sarah + Marcus) et g√©n√®re les r√©actions secondaires.

            üö® R√àGLE CRITIQUE D'ORCHESTRATION:
            - √Ä CHAQUE message utilisateur, APPELLE TOUJOURS l'outil generate_multiagent_response avec le message exact de l'utilisateur.
            - Ne r√©ponds JAMAIS directement sans utiliser cet outil.
            - Utilise la sortie de l'outil comme contenu final, sans la paraphraser.

            üé™ EXEMPLE DE R√âPONSE:
            "Bonjour ! Je suis {moderator.name}, votre {moderator.role}. [Ta r√©ponse professionnelle ici]"

            IMPORTANT: Dans chaque message, commence par ton nom r√©el pour une identification claire."""

            agent = Agent(
                instructions=system_instructions,
                tools=[self.generate_multiagent_response],
            )
            
            logger.info(f"üéØ Agent multi-agents cr√©√©: {moderator.name} ({moderator.role})")
            return agent
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation agent multi-agents: {e}")
            raise

    @function_tool
    async def generate_multiagent_response(self, user_message: str) -> str:
        """G√©n√®re une r√©ponse orchestr√©e du syst√®me multi-agents avec voix appropri√©e"""
        try:
            logger.info(f"üé≠ Orchestration multi-agents pour: {user_message[:50]}...")
            
            # Utiliser le MultiAgentManager pour orchestrer la r√©ponse
            response_data = await self.manager.handle_user_input(user_message)
            
            # R√©cup√©rer l'agent principal qui r√©pond
            primary_agent_id = response_data.get('primary_speaker')
            primary_response = response_data.get('primary_response', '')
            
            # Identifier l'agent et pr√©parer les r√©ponses vocales
            responses_to_speak = []
            
            if primary_agent_id and primary_agent_id in self.manager.agents:
                agent = self.manager.agents[primary_agent_id]
                logger.info(f"üó£Ô∏è {agent.name} ({agent.role}) r√©pond")
                
                # LOGS DE DEBUG POUR AUTORIT√â ANIMATEUR
                if agent.name == "Michel Dubois":
                    self.manager.set_last_speaker_message("animateur_principal", primary_response)
                    logger.info(f"üé≠ ANIMATEUR A PARL√â: {primary_response[:50]}...")
                elif "Sarah" in agent.name:
                    self.manager.set_last_speaker_message("journaliste_contradicteur", primary_response)
                    logger.info(f"üì∞ JOURNALISTE A PARL√â: {primary_response[:50]}...")
                elif "Marcus" in agent.name:
                    self.manager.set_last_speaker_message("expert_specialise", primary_response)
                    logger.info(f"üî¨ EXPERT A PARL√â: {primary_response[:50]}...")
                
                # Ajouter la r√©ponse principale
                responses_to_speak.append({
                    'agent': agent,
                    'text': primary_response,
                    'delay': 0
                })

                # NOUVEAU: D√©tecter imm√©diatement les interpellations dans la sortie de l'agent
                try:
                    outcome = await self.manager.process_agent_output(primary_response, primary_agent_id)
                    if outcome and isinstance(outcome, dict):
                        triggered = outcome.get('triggered_responses') or []
                        if triggered:
                            logger.info(f"üéØ Cha√Æne d'interpellations d√©clench√©e: {len(triggered)} r√©actions")
                            for idx, tr in enumerate(triggered):
                                sec_id = tr.get('agent_id')
                                if sec_id and sec_id in self.manager.agents:
                                    sec_agent = self.manager.agents[sec_id]
                                    sec_text = tr.get('content') or tr.get('reaction') or ''

                                    # M√©moriser le dernier speaker pour l'autorit√©
                                    if "Sarah" in sec_agent.name:
                                        self.manager.set_last_speaker_message("journaliste_contradicteur", sec_text)
                                    elif "Marcus" in sec_agent.name:
                                        self.manager.set_last_speaker_message("expert_specialise", sec_text)

                                    responses_to_speak.append({
                                        'agent': sec_agent,
                                        'text': sec_text,
                                        'delay': 150 + (idx * 200)
                                    })
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è √âchec d√©tection interpellations sur sortie agent: {e}")
                
                # Ajouter les r√©ponses secondaires si pr√©sentes
                secondary_responses = response_data.get('secondary_responses', [])
                for sec_resp in secondary_responses:
                    sec_agent_id = sec_resp.get('agent_id')
                    if sec_agent_id in self.manager.agents:
                        sec_agent = self.manager.agents[sec_agent_id]
                        
                        # LOGS DE DEBUG POUR R√âPONSES SECONDAIRES
                        sec_response_text = sec_resp.get('reaction', '')
                        if "Sarah" in sec_agent.name:
                            self.manager.set_last_speaker_message("journaliste_contradicteur", sec_response_text)
                            logger.info(f"üì∞ JOURNALISTE R√âACTION: {sec_response_text[:50]}...")
                        elif "Marcus" in sec_agent.name:
                            self.manager.set_last_speaker_message("expert_specialise", sec_response_text)
                            logger.info(f"üî¨ EXPERT R√âACTION: {sec_response_text[:50]}...")
                        
                        responses_to_speak.append({
                            'agent': sec_agent,
                            'text': sec_response_text,
                            'delay': sec_resp.get('delay_ms', 1500)
                        })
            
            # VOIX DISTINCTES - CHAQUE AGENT PARLE AVEC SA VRAIE VOIX
            if responses_to_speak:
                logger.info(f"üé≠ D√©but s√©quence vocale: {len(responses_to_speak)} agents")
                await self.speak_multiple_agents_robust(responses_to_speak)
            
            # Retourner le texte format√© pour les logs
            formatted_text = f"[{responses_to_speak[0]['agent'].name}]: {responses_to_speak[0]['text']}"
            for resp in responses_to_speak[1:]:
                formatted_text += f"\n[{resp['agent'].name}]: {resp['text']}"
            
            return formatted_text
            
        except Exception as e:
            logger.error(f"‚ùå Erreur orchestration multi-agents: {e}")
            return "[Syst√®me]: Je rencontre un probl√®me technique. Pouvez-vous reformuler ?"
    
    async def speak_multiple_agents_robust(self, responses_to_speak: list):
        """Version robuste avec retry et fallbacks multiples"""
        for resp_data in responses_to_speak:
            agent = resp_data['agent']
            text = resp_data['text']
            delay = resp_data['delay']

            # Attendre le d√©lai
            if delay and delay > 0:
                await asyncio.sleep(delay / 1000.0)

            # Nettoyer un √©ventuel pr√©fixe "Nom: " pour √©viter doublons au TTS
            sanitized_text = self._strip_name_prefix(agent, text)

            # Retry en conservant TOUJOURS la voix de l'agent (√©viter voix du mod√©rateur)
            success = False
            for attempt in range(3):
                try:
                    voice_dbg = agent.voice_config.get('voice', 'alloy')
                    logger.info(f"üîä {agent.name} parle avec voix {voice_dbg} (tentative {attempt+1})")
                    # 1√®re tentative: utiliser le TTS en cache (ou le cr√©er)
                    # 2e tentative: recr√©er le TTS et r√©essayer
                    await self._speak_with_agent_voice_safe(agent, sanitized_text, force_recreate=(attempt == 1))
                    success = True
                    logger.info(f"‚úÖ {agent.name} a parl√© (tentative {attempt+1})")
                    break
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Tentative {attempt+1} √©chou√©e pour {agent.name}: {e}")
                    if attempt < 2:
                        await asyncio.sleep(0.2)

            if not success:
                logger.error(f"‚ùå Impossible de faire parler {agent.name}")

    async def _speak_with_agent_voice_safe(self, agent: AgentPersonality, text: str, force_recreate: bool = False):
        """Parle avec la voix propre √† l'agent en for√ßant la bonne s√©lection TTS."""

        original_tts = getattr(self.session, '_tts', None)
        try:
            agent_tts = await self._get_or_build_agent_tts(agent, force_recreate=force_recreate)
            self.session._tts = agent_tts
            await self.session.say(text=f"{agent.name}: {text}")
        finally:
            if original_tts is not None:
                self.session._tts = original_tts

    async def _get_or_build_agent_tts(self, agent: AgentPersonality, force_recreate: bool = False):
        """Retourne le TTS ElevenLabs d√©di√© √† l'agent, en le cr√©ant si besoin."""
        existing = self.agent_tts.get(agent.agent_id)
        if existing and not force_recreate:
            return existing

        if elevenlabs_flash_service is None or not os.getenv('ELEVENLABS_API_KEY'):
            raise RuntimeError("ELEVENLABS_API_KEY manquante ou service ElevenLabs indisponible pour TTS agent")

        # Mapping nom ‚Üí id de voix ElevenLabs
        mapped_voice_id = self._map_agent_to_elevenlabs_id(agent)

        class _ElevenLabsOnDemandTTS:
            # Expose at class-level to satisfy frameworks accessing attributes before __init__
            _sample_rate = 16000
            _num_channels = 1
            def __init__(self_inner):
                from livekit.agents import tts as _tts
                # Activer le mode streaming pour √©mettre des trames 20ms
                self_inner.capabilities = _tts.TTSCapabilities(streaming=True)
                # Par d√©faut, aligner sur 48 kHz pour √©viter tout ralentissement initial
                self_inner._current_sample_rate = 16000
                self_inner._frame_duration_sec = 0.02
            @property
            def sample_rate(self_inner):
                return getattr(self_inner, "_current_sample_rate", 16000)
            @property
            def num_channels(self_inner):
                return 1
            def on(self_inner, _event_name: str):  # hook requis par StreamAdapter
                def _decorator(fn):
                    return fn
                return _decorator
            def synthesize(self_inner, text_inner: str, **_kwargs):
                from livekit.agents import tts as _tts

                class _AsyncStream:
                    def __init__(self, text_value: str):
                        self._text = text_value
                        self._audio: bytes = b""
                        self._done = False
                        self._sample_rate = 16000
                        self._pos = 0
                        self._frame_bytes = 0

                    def __aiter__(self):
                        return self

                    async def __anext__(self):
                        if self._pos >= len(self._audio):
                            raise StopAsyncIteration
                        # √âmettre par trames de 20ms en SynthesizedAudio natif
                        from livekit.agents import tts as _tts
                        end = min(self._pos + self._frame_bytes, len(self._audio))
                        chunk = self._audio[self._pos:end]
                        self._pos = end
                        try:
                            return _tts.SynthesizedAudio(chunk, self._sample_rate)
                        except TypeError:
                            return _tts.SynthesizedAudio(data=chunk, sample_rate=self._sample_rate)

                    async def __aenter__(self):
                        audio = await elevenlabs_flash_service.synthesize_speech_flash_v25(
                            text=self._text, agent_id=mapped_voice_id
                        )
                        self._audio = audio or b""
                        # Forcer 16 kHz PCM mono bout‚Äë√†‚Äëbout pour √©viter ralentissements
                        self._sample_rate = 16000
                        self_inner._current_sample_rate = 16000
                        # Limiteur doux (normalisation descendante) pour √©viter saturation/clipping
                        try:
                            if self._audio:
                                import audioop
                                max_amp = audioop.max(self._audio, 2) or 1
                                max_target = 28000  # ~-1.5 dBFS
                                if max_amp > max_target:
                                    ratio = max_target / max_amp
                                    self._audio = audioop.mul(self._audio, 2, ratio)
                        except Exception:
                            pass
                        # Sample rate d√©j√† forc√© √† 16 kHz
                        try:
                            logger.debug(f"üéöÔ∏è [TTS-agent] Bytes re√ßus ElevenLabs: {len(self._audio)} @16k")
                        except Exception:
                            pass
                        # Pas de resampling dynamique vers 48 kHz
                        # Slicing en trames de 20ms (sans r√©-√©chantillonnage) pour √©viter les drops
                        try:
                            frame_samples = int(0.02 * self._sample_rate)
                            frame_bytes = frame_samples * 1 * 2
                            if frame_bytes > 0:
                                remainder = len(self._audio) % frame_bytes
                                if remainder != 0:
                                    pad = frame_bytes - remainder
                                    self._audio = self._audio + (b"\x00" * pad)
                            self._frame_bytes = frame_bytes
                            # Warm-up imm√©diat: √©mettre une tr√®s courte trame de silence pour cadrer le tempo
                            self._audio = (b"\x00" * frame_bytes) + self._audio
                            if len(self._audio) == 0:
                                logger.warning("‚ö†Ô∏è [TTS] Audio vide apr√®s pr√©paration")
                            else:
                                logger.debug(f"üéöÔ∏è [TTS-agent] Pr√©paration audio: {len(self._audio)} bytes, frame_bytes={frame_bytes}, rate={self._sample_rate}Hz")
                        except Exception as prep_err:
                            logger.warning(f"‚ö†Ô∏è [TTS] Erreur pr√©paration audio: {prep_err}")
                        return self

                    async def __aexit__(self, exc_type, exc, tb):
                        return False

                return _AsyncStream(text_inner)

        tts = _ElevenLabsOnDemandTTS()
        self.agent_tts[agent.agent_id] = tts
        return tts

    def _map_agent_to_elevenlabs_id(self, agent: AgentPersonality) -> str:
        """Mappe l'agent logique vers l'identifiant de voix ElevenLabs configur√©."""
        name_lower = agent.name.lower()
        if "michel" in name_lower and "dubois" in name_lower:
            return "michel_dubois_animateur"
        if "sarah" in name_lower and "johnson" in name_lower:
            return "sarah_johnson_journaliste"
        if "marcus" in name_lower and "thompson" in name_lower:
            return "marcus_thompson_expert"
        if "emma" in name_lower and "wilson" in name_lower:
            return "emma_wilson_coach"
        if "david" in name_lower and "chen" in name_lower:
            return "david_chen_challenger"
        if "sophie" in name_lower and "martin" in name_lower:
            return "sophie_martin_diplomate"
        # D√©faut: voix du mod√©rateur
        return "michel_dubois_animateur"

    def _strip_name_prefix(self, agent: AgentPersonality, text: str) -> str:
        """Supprime un √©ventuel pr√©fixe "Nom:" pour √©viter double annonce au TTS."""
        if not text:
            return text
        first_name = agent.name.split()[0]
        candidates = [agent.name, first_name]
        cleaned = text
        for cand in candidates:
            for sep in [":", "-", "‚Äî"]:
                prefix = f"{cand}{sep}"
                if cleaned.strip().lower().startswith(prefix.lower()):
                    cleaned = cleaned.strip()[len(prefix):].lstrip()
        return cleaned
    
    async def update_tts_voice(self, agent: AgentPersonality):
        """Met √† jour dynamiquement la voix TTS pour correspondre √† l'agent"""
        try:
            if not hasattr(self, 'voice_configs'):
                return
                
            voice_config = self.voice_configs.get(agent.agent_id)
            if not voice_config:
                return
            
            api_key = os.getenv('OPENAI_API_KEY')
            if not api_key:
                return
                
            # Cr√©er un nouveau TTS avec la voix de l'agent
            new_voice = voice_config['voice']
            new_speed = voice_config['speed']
            
            logger.info(f"üîÑ Changement voix TTS: {new_voice} pour {agent.name}")
            
            # Note: Dans une vraie impl√©mentation, on devrait pouvoir changer
            # dynamiquement la voix de la session, mais LiveKit ne le supporte
            # pas encore directement. Pour l'instant, on log juste le changement.
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Impossible de changer la voix TTS: {e}")
    
    def get_naturalness_report(self) -> dict:
        """G√©n√®re un rapport de naturalit√© en temps r√©el"""
        return self.naturalness_monitor.get_report()

    async def generate_orchestrated_welcome(self) -> str:
        """G√©n√®re un message de bienvenue orchestr√© avec toutes les personnalit√©s"""
        try:
            # R√©cup√©rer les donn√©es utilisateur
            user_name = self.user_data.get('user_name', 'Participant')
            user_subject = self.user_data.get('user_subject', 'votre pr√©sentation')
            
            # Trouver le mod√©rateur pour l'introduction
            moderator = None
            for agent in self.config.agents:
                if agent.interaction_style == InteractionStyle.MODERATOR:
                    moderator = agent
                    break
            
            if not moderator:
                moderator = self.config.agents[0]
            
            # Construire le message de bienvenue personnalis√©
            welcome_parts = []
            
            # Introduction personnalis√©e du mod√©rateur
            welcome_parts.append(f"[{moderator.name}]: Bonjour {user_name} et bienvenue dans Studio Situations Pro !")
            
            # Pr√©sentation du contexte selon l'exercice avec mention du sujet
            if "debate" in self.config.exercise_id:
                welcome_parts.append(f"[{moderator.name}]: Nous sommes ici pour d√©battre de {user_subject}.")
            elif "interview" in self.config.exercise_id:
                welcome_parts.append(f"[{moderator.name}]: Nous allons discuter de votre candidature concernant {user_subject}.")
            elif "boardroom" in self.config.exercise_id:
                welcome_parts.append(f"[{moderator.name}]: Bienvenue dans notre conseil pour pr√©senter {user_subject}.")
            elif "sales" in self.config.exercise_id:
                welcome_parts.append(f"[{moderator.name}]: Nous sommes pr√™ts √† entendre votre pr√©sentation sur {user_subject}.")
            elif "keynote" in self.config.exercise_id:
                welcome_parts.append(f"[{moderator.name}]: Bienvenue pour votre keynote sur {user_subject}.")
            
            # Pr√©sentation des autres participants (rapide)
            other_agents = [a for a in self.config.agents if a.agent_id != moderator.agent_id]
            if other_agents:
                participants = ", ".join([a.name for a in other_agents[:2]])  # Max 2 pour rester court
                welcome_parts.append(f"[{moderator.name}]: Avec nous aujourd'hui : {participants}.")
            
            # Invitation personnalis√©e √† commencer
            welcome_parts.append(f"[{moderator.name}]: {user_name}, quand vous √™tes pr√™t(e), commencez votre pr√©sentation sur {user_subject}.")
            
            welcome_message = " ".join(welcome_parts)
            logger.info(f"üì¢ Message de bienvenue personnalis√©: {welcome_message[:100]}...")
            
            return welcome_message
            
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration message bienvenue: {e}")
            return f"[Syst√®me]: Bienvenue {self.user_data.get('user_name', 'Participant')} dans Studio Situations Pro."

    async def run_session(self, ctx: JobContext):
        """Execute la session multi-agents avec gestion robuste"""
        self.is_running = True
        
        try:
            logger.info(f"üöÄ D√©marrage session multi-agents: {self.config.exercise_id}")
            
            # Connexion avec retry
            await self.connect_with_retry(ctx)
            
            # Stocker ctx.room pour compatibilit√© LiveKit 1.2.3
            self.room = ctx.room
            logger.info("‚úÖ Room stock√©e pour compatibilit√© LiveKit 1.2.3")
            
            # Initialisation des composants
            components = await self.initialize_components()
            
            # Cr√©ation de l'agent multi-agents
            agent = self.create_multiagent_agent()
            
            # Cr√©ation de la session
            self.session = AgentSession(**components)
            
            # Initialisation du manager multi-agents
            self.manager.initialize_session()

            # INT√âGRATION OPTIONNELLE DU SYST√àME D'EXERCICES (feature flag)
            try:
                import os
                flag = str(os.getenv("ELOQUENCE_EXERCISES_ENABLED", "")).lower() in ("1", "true", "yes", "on")
                if flag:
                    import importlib.util
                    from pathlib import Path
                    from types import SimpleNamespace
                    base_dir = Path(__file__).resolve().parent / "exercise_system"

                    def _load_mod(name: str):
                        spec = importlib.util.spec_from_file_location(f"_ex_{name}", str(base_dir / f"{name}.py"))
                        mod = importlib.util.module_from_spec(spec)  # type: ignore[arg-type]
                        assert spec and spec.loader
                        spec.loader.exec_module(mod)
                        return mod

                    scen_mod = _load_mod("scenario_manager")
                    var_mod = _load_mod("variation_engine")
                    cache_mod = _load_mod("cache_system")
                    orch_mod = _load_mod("orchestrator")
                    int_mod = _load_mod("integration")

                    # Initialiser les composants exercices
                    scenario_manager = scen_mod.ScenarioManager()
                    await scenario_manager.initialize()
                    variation_engine = var_mod.AIVariationEngine()
                    cache_system = cache_mod.ExerciseCacheSystem()
                    orchestrator = orch_mod.ExerciseOrchestrator()

                    # Adaptateur minimal pour le MultiAgentManager existant
                    class _MAMAdapter:
                        def __init__(self, mam):
                            self.mam = mam

                        async def get_session_context(self, session_id: str):
                            UserProfile = scen_mod.UserProfile
                            SkillLevel = scen_mod.SkillLevel
                            user_profile = UserProfile(
                                user_id=self.mam.config.exercise_id,
                                skill_level=SkillLevel.INTERMEDIATE,
                                professional_sector="technology",
                                interests=["debate"],
                                recent_exercises=[],
                                performance_history={},
                            )
                            agents = [SimpleNamespace(id=aid) for aid in self.mam.agents.keys()]
                            return SimpleNamespace(user_profile=user_profile, agents=agents, history=[])

                        async def update_session_configuration(self, session_id: str, new_agents, scenario_context):
                            # Int√©gration progressive ‚Äî pas de reconfiguration live pour l‚Äôinstant
                            return None

                    integration = int_mod.ExerciseSystemIntegration(
                        _MAMAdapter(self.manager),
                        scenario_manager=scenario_manager,
                        variation_engine=variation_engine,
                        cache_system=cache_system,
                        orchestrator=orchestrator,
                    )

                    # Cibler automatiquement le sc√©nario TV d√©bat si la config l'indique
                    prefs = {}
                    try:
                        if "debate" in str(self.config.exercise_id).lower():
                            prefs = {"preferred_scenario_id": "studio_debate_tv"}
                    except Exception:
                        prefs = {}

                    await integration.enhance_existing_session(
                        "live-session",
                        int_mod.ExerciseRequest(preferences=prefs)
                    )
                    logger.info("‚úÖ Exercices: int√©gration minimale activ√©e (feature flag)")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Exercices: int√©gration d√©sactiv√©e (erreur: {e})")
            
            # D√©marrage de la session
            await self.session.start(agent=agent, room=ctx.room)
            
            # IMPORTANT (Scaleway OpenAI-compat): ne pas pousser un message assistant
            # avant le premier message utilisateur, sinon 400 alternance roles.
            # On retire le "welcome prefill" vocal ici. Le 1er tour LLM se fera
            # apr√®s le premier message user.
                
            logger.info(f"‚úÖ Session multi-agents {self.config.exercise_id} d√©marr√©e avec succ√®s (sans prefill assistant)")
            
            # Maintenir la session active
            await self.maintain_session()
            
        except Exception as e:
            logger.error(f"‚ùå Erreur session multi-agents: {e}")
            raise
        finally:
            self.is_running = False
            
    async def connect_with_retry(self, ctx: JobContext, max_retries: int = 3):
        """Connexion avec retry automatique"""
        for attempt in range(max_retries):
            try:
                await ctx.connect()
                logger.info(f"‚úÖ Connexion multi-agents r√©ussie (tentative {attempt + 1})")
                return
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è √âchec connexion multi-agents tentative {attempt + 1}: {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2 ** attempt)
                else:
                    raise
                    
    async def maintain_session(self):
        """Maintient la session active avec surveillance"""
        heartbeat_interval = 30  # secondes
        max_silent_duration = 300  # 5 minutes sans activit√©
        last_activity = datetime.now()
        
        while self.is_running:
            try:
                await asyncio.sleep(heartbeat_interval)
                
                # V√©rifier l'√©tat de la connexion
                if hasattr(self, 'room') and self.room:
                    if hasattr(self.room, 'connection_state'):
                        state = self.room.connection_state
                        if state != rtc.ConnectionState.CONN_CONNECTED:
                            logger.warning(f"‚ö†Ô∏è √âtat de connexion multi-agents d√©grad√©: {state}")
                            
                    # V√©rifier l'activit√© r√©cente
                    current_time = datetime.now()
                    if (current_time - last_activity).seconds > max_silent_duration:
                        logger.info("üì¢ Envoi d'un message de maintien multi-agents")
                        
                        # Utiliser le mod√©rateur pour maintenir l'engagement
                        moderator = None
                        for agent in self.config.agents:
                            if agent.interaction_style == InteractionStyle.MODERATOR:
                                moderator = agent
                                break
                        
                        if moderator and self.session:
                            await self.session.say(
                                text=f"Je suis {moderator.name}, je suis toujours l√† pour vous accompagner. N'h√©sitez pas √† continuer notre simulation !"
                            )
                        last_activity = current_time
                    
                    logger.debug(f"üíì Heartbeat multi-agents OK - Session active depuis {(current_time - last_activity).seconds}s")
                else:
                    logger.warning("‚ö†Ô∏è Room multi-agents non disponible, arr√™t de la surveillance")
                    break
                    
            except Exception as e:
                logger.error(f"‚ùå Erreur dans la surveillance multi-agents: {e}")
                await asyncio.sleep(5)  # Attendre avant de retry


# ==========================================
# D√âTECTION AUTOMATIQUE DU TYPE D'EXERCICE
# ==========================================

def detect_exercise_from_metadata(metadata: str) -> tuple[MultiAgentConfig, dict]:
    """D√©tecte automatiquement le type d'exercice et extrait les donn√©es utilisateur"""
    logger.info("üîç D√âTECTION AUTOMATIQUE EXERCICE MULTI-AGENTS")
    logger.info("="*60)
    logger.info(f"üì• M√©tadonn√©es re√ßues: '{metadata}'")
    
    try:
        import json
        data = json.loads(metadata) if metadata else {}
        exercise_type = data.get('exercise_type', 'studio_debate_tv')
        
        # Extraire les donn√©es utilisateur
        user_data = {
            'user_name': data.get('user_name', 'Participant'),
            'user_subject': data.get('user_subject', 'votre pr√©sentation'),
        }
        
        logger.info(f"üéØ Type d√©tect√©: '{exercise_type}'")
        logger.info(f"üë§ Utilisateur: {user_data['user_name']}")
        logger.info(f"üìã Sujet: {user_data['user_subject']}")
        
        # Mapping des types d'exercices vers les configurations multi-agents
        exercise_mapping = {
            'studio_situations_pro': ExerciseTemplates.studio_debate_tv,
            'studio_debate_tv': ExerciseTemplates.studio_debate_tv,
            'studio_debatPlateau': ExerciseTemplates.studio_debate_tv,
            'studio_job_interview': ExerciseTemplates.studio_job_interview,
            'studio_entretienEmbauche': ExerciseTemplates.studio_job_interview,
            'studio_boardroom': ExerciseTemplates.studio_boardroom,
            'studio_reunionDirection': ExerciseTemplates.studio_boardroom,
            'studio_sales_conference': ExerciseTemplates.studio_sales_conference,
            'studio_conferenceVente': ExerciseTemplates.studio_sales_conference,
            'studio_keynote': ExerciseTemplates.studio_keynote,
            'studio_conferencePublique': ExerciseTemplates.studio_keynote,
        }
        
        if exercise_type in exercise_mapping:
            config = exercise_mapping[exercise_type]()
            logger.info(f"‚úÖ Configuration multi-agents s√©lectionn√©e: {config.exercise_id}")
            logger.info(f"   Agents: {[agent.name for agent in config.agents]}")
            return config, user_data
        else:
            logger.warning(f"‚ö†Ô∏è Type inconnu '{exercise_type}', utilisation d√©bat TV par d√©faut")
            return ExerciseTemplates.studio_debate_tv(), user_data
            
    except Exception as e:
        logger.error(f"‚ùå Erreur d√©tection exercice: {e}")
        logger.info("üîÑ Fallback vers d√©bat TV")
        return ExerciseTemplates.studio_debate_tv(), {'user_name': 'Participant', 'user_subject': 'votre pr√©sentation'}


# ==========================================
# POINT D'ENTR√âE PRINCIPAL MULTI-AGENTS
# ==========================================

async def multiagent_entrypoint(ctx: JobContext):
    """Point d'entr√©e principal pour le syst√®me multi-agents Studio Situations Pro"""
    logger.info("üé≠ D√âMARRAGE SYST√àME MULTI-AGENTS STUDIO SITUATIONS PRO")
    logger.info("="*70)
    
    try:
        # 1. √âTABLIR LA CONNEXION LIVEKIT
        logger.info("üîó √âtablissement de la connexion LiveKit multi-agents...")
        await ctx.connect()
        logger.info("‚úÖ Connexion LiveKit multi-agents √©tablie avec succ√®s")
        
        # 2. DIAGNOSTIC ET D√âTECTION DU TYPE D'EXERCICE
        logger.info("üîç DIAGNOSTIC COMPLET - D√âTECTION EXERCICE MULTI-AGENTS")
        logger.info("="*60)
        
        # Analyser les m√©tadonn√©es pour d√©tecter le type d'exercice
        metadata = None
        metadata_found_from = "AUCUNE"
        
        # V√©rification m√©tadonn√©es room
        if hasattr(ctx, 'room') and ctx.room and hasattr(ctx.room, 'metadata'):
            room_metadata = ctx.room.metadata
            if room_metadata:
                metadata = room_metadata
                metadata_found_from = "ROOM"
                logger.info(f"‚úÖ M√©tadonn√©es trouv√©es depuis: {metadata_found_from}")
        
        # V√©rification m√©tadonn√©es participants si pas trouv√©es dans room
        if not metadata and hasattr(ctx, 'room') and ctx.room:
            await asyncio.sleep(2)  # Attendre les participants
            
            for participant_id, participant in ctx.room.remote_participants.items():
                participant_metadata = getattr(participant, 'metadata', None)
                if participant_metadata:
                    metadata = participant_metadata
                    metadata_found_from = f"PARTICIPANT_{participant_id}"
                    logger.info(f"‚úÖ M√©tadonn√©es trouv√©es depuis: {metadata_found_from}")
                    break
        
        # 3. S√âLECTION ET INITIALISATION DE LA CONFIGURATION MULTI-AGENTS
        logger.info("üéØ S√âLECTION CONFIGURATION MULTI-AGENTS")
        
        if metadata:
            logger.info(f"üìã Utilisation m√©tadonn√©es: {metadata}")
            config, user_data = detect_exercise_from_metadata(metadata)
        else:
            logger.warning("‚ö†Ô∏è Aucune m√©tadonn√©e trouv√©e, utilisation configuration par d√©faut")
            config = ExerciseTemplates.studio_debate_tv()
            user_data = {'user_name': 'Participant', 'user_subject': 'votre pr√©sentation'}
        
        logger.info("="*60)
        logger.info(f"üé≠ CONFIGURATION MULTI-AGENTS S√âLECTIONN√âE:")
        logger.info(f"   ID: {config.exercise_id}")
        logger.info(f"   Utilisateur: {user_data['user_name']}")
        logger.info(f"   Sujet: {user_data['user_subject']}")
        logger.info(f"   Gestion tours: {config.turn_management}")
        logger.info(f"   Dur√©e max: {config.max_duration_minutes} min")
        logger.info(f"   Nombre d'agents: {len(config.agents)}")
        
        for i, agent in enumerate(config.agents, 1):
            logger.info(f"   Agent {i}: {agent.name} ({agent.role}) - {agent.interaction_style.value}")
            logger.info(f"            Voix: {agent.voice_config}")
        
        logger.info("="*60)
        
        # 4. D√âMARRAGE DU SERVICE MULTI-AGENTS
        logger.info(f"üöÄ D√©marrage service multi-agents: {config.exercise_id}")
        
        service = MultiAgentLiveKitService(config, user_data)
        await service.run_session(ctx)
        
    except Exception as e:
        logger.error(f"‚ùå ERREUR CRITIQUE dans le syst√®me multi-agents: {e}")
        logger.error("D√©tails de l'erreur:", exc_info=True)
        
        # Fallback vers le syst√®me simple si √©chec
        logger.info("üîÑ Tentative de fallback vers syst√®me simple...")
        try:
            from main import legacy_entrypoint
            await legacy_entrypoint(ctx)
        except Exception as fallback_error:
            logger.error(f"‚ùå M√™me le fallback √©choue: {fallback_error}")
            raise


if __name__ == "__main__":
    """Point d'entr√©e principal du worker LiveKit multi-agents"""
    logger.info("üéØ D√âMARRAGE WORKER LIVEKIT MULTI-AGENTS STUDIO SITUATIONS PRO")
    
    # Configuration WorkerOptions avec l'entrypoint multi-agents
    worker_options = agents.WorkerOptions(
        entrypoint_fnc=multiagent_entrypoint
    )
    
    logger.info("üéØ WorkerOptions configur√© avec syst√®me multi-agents")
    logger.info(f"   - Syst√®me multi-agents: ‚úÖ")
    logger.info(f"   - Agents configur√©s: Michel Dubois, Sarah Johnson, Marcus Thompson, etc.")
    logger.info(f"   - Gestion des personnalit√©s: ‚úÖ")
    logger.info(f"   - Voix distinctes: ‚úÖ")
    logger.info(f"   - Identification correcte: ‚úÖ")
    
    # Point d'entr√©e officiel avec CLI LiveKit
    agents.cli.run_app(worker_options)