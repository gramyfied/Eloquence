"""
Point d'entr√©e principal pour le syst√®me multi-agents Studio Situations Pro
Utilise directement MultiAgentManager avec les vrais agents configur√©s
"""
import asyncio
import logging
import os
import time
from typing import Dict, Any, List, Optional
from dataclasses import dataclass
from datetime import datetime, timedelta
from dotenv import load_dotenv
from livekit import agents, rtc, rtc
from livekit.agents import (
    Agent,
    AgentSession,
    JobContext,
    RunContext,
    function_tool,
    llm,
)
from livekit.plugins import openai, silero
try:
    from elevenlabs_flash_tts_service import elevenlabs_flash_service
except Exception:  # pragma: no cover - tests peuvent manquer le module
    elevenlabs_flash_service = None  # type: ignore
from vosk_stt_interface import VoskSTTFixed as VoskSTT

# Imports du syst√®me multi-agents R√âVOLUTIONNAIRE
from multi_agent_config import (
    MultiAgentConfig, 
    AgentPersonality, 
    InteractionStyle,
    ExerciseTemplates
)

# IMPORT CRITIQUE - Enhanced Manager
try:
    from enhanced_multi_agent_manager import get_enhanced_manager
    ENHANCED_MANAGER_AVAILABLE = True
    logging.getLogger(__name__).info("‚úÖ Enhanced Multi-Agent Manager disponible")
except ImportError as e:
    logging.getLogger(__name__).error(f"‚ùå Enhanced Manager non disponible: {e}")
    ENHANCED_MANAGER_AVAILABLE = False
    # Fallback vers manager basique
    from multi_agent_manager import MultiAgentManager

from naturalness_monitor import NaturalnessMonitor

# Import du service TTS optimis√©
try:
    from elevenlabs_optimized_service import elevenlabs_optimized_service
except ImportError:
    elevenlabs_optimized_service = None

# Import du syst√®me d'interpellation (nom corrig√©)
try:
    from interpellation_system_complete import InterpellationSystemComplete as InterpellationSystem
except ImportError:
    InterpellationSystem = None

# Charger les variables d'environnement
load_dotenv()

# Configuration avec logs d√©taill√©s pour debug
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Log warning tardifs si modules optionnels manquants
if 'elevenlabs_optimized_service' not in globals() or elevenlabs_optimized_service is None:
    logging.getLogger(__name__).warning("‚ö†Ô∏è Service TTS optimis√© non disponible")
if 'InterpellationSystem' not in globals() or InterpellationSystem is None:
    logging.getLogger(__name__).warning("‚ö†Ô∏è Syst√®me d'interpellation non disponible")

# Log des variables d'environnement critiques (sans exposer les secrets)
logging.getLogger(__name__).info("üîç DIAGNOSTIC MULTI-AGENTS: Variables d'environnement")
logging.getLogger(__name__).info(f"   OPENAI_API_KEY pr√©sente: {'Oui' if os.getenv('OPENAI_API_KEY') else 'Non'}")
logging.getLogger(__name__).info(f"   ELEVENLABS_API_KEY pr√©sente: {'Oui' if os.getenv('ELEVENLABS_API_KEY') else 'Non'}")
logging.getLogger(__name__).info(f"   MISTRAL_BASE_URL: {os.getenv('MISTRAL_BASE_URL', 'Non d√©finie')}")

# URLs des services
# Base OpenAI-compatible (le client ajoutera /chat/completions lui-m√™me)
MISTRAL_API_URL = os.getenv('MISTRAL_BASE_URL', 'http://mistral-conversation:8001/v1')
VOSK_STT_URL = os.getenv('VOSK_STT_URL', 'http://vosk-stt:8002')

class MultiAgentLiveKitService:
    """Service LiveKit int√©gr√© avec le gestionnaire multi-agents"""
    
    def __init__(self, multi_agent_config: MultiAgentConfig, user_data: dict = None):
        self.config = multi_agent_config
        self.naturalness_monitor = NaturalnessMonitor()
        
        # SYST√àME R√âVOLUTIONNAIRE : EnhancedMultiAgentManager avec GPT-4o + ElevenLabs
        openai_api_key = os.getenv('OPENAI_API_KEY')
        elevenlabs_api_key = os.getenv('ELEVENLABS_API_KEY')
        
        if not openai_api_key or not elevenlabs_api_key:
            logging.getLogger(__name__).error("‚ùå CL√âS API MANQUANTES: OPENAI_API_KEY et/ou ELEVENLABS_API_KEY")
            raise ValueError("Cl√©s API requises pour le syst√®me r√©volutionnaire")
        
        # CORRECTION CRITIQUE : Validation et normalisation user_data
        self.user_data = self._validate_and_normalize_user_data(user_data)
        
        # Initialisation du manager r√©volutionnaire
        self.manager = get_enhanced_manager(openai_api_key, elevenlabs_api_key, multi_agent_config)
        
        # CORRECTION CRITIQUE : Configuration IMM√âDIATE du contexte utilisateur
        if hasattr(self.manager, 'set_user_context'):
            self.manager.set_user_context(
                self.user_data.get('user_name', 'Participant'),
                self.user_data.get('user_subject', 'votre pr√©sentation')
            )
            logging.getLogger(__name__).info(f"‚úÖ Contexte utilisateur configur√© dans le manager")
            logging.getLogger(__name__).info(f"   üë§ Utilisateur: {self.user_data['user_name']}")
            logging.getLogger(__name__).info(f"   üéØ Sujet: {self.user_data['user_subject']}")
        else:
            logging.getLogger(__name__).error("‚ùå Manager ne supporte pas set_user_context")
        
        self.session: Optional[AgentSession] = None
        self.room = None
        self.is_running = False
        
        logging.getLogger(__name__).info(f"üöÄ SYST√àME R√âVOLUTIONNAIRE initialis√© pour: {multi_agent_config.exercise_id}")
        logging.getLogger(__name__).info(f"   Nombre d'agents: {len(multi_agent_config.agents)}")
        for agent in multi_agent_config.agents:
            logging.getLogger(__name__).info(f"   - {agent.name} ({agent.role}) - Style: {agent.interaction_style.value}")

        logging.getLogger(__name__).info("üé≠ SYST√àME GPT-4o + ElevenLabs √âMOTIONNEL initialis√©")

    def _validate_and_normalize_user_data(self, user_data: dict = None) -> dict:
        """Valide et normalise les donn√©es utilisateur"""
        
        if not user_data:
            logging.getLogger(__name__).warning("‚ö†Ô∏è Aucune user_data fournie, utilisation valeurs par d√©faut")
            return {
                'user_name': 'Participant',
                'user_subject': 'votre pr√©sentation'
            }
        
        # Validation et nettoyage
        normalized = {}
        
        # Nom utilisateur
        user_name = user_data.get('user_name', '').strip()
        if not user_name or len(user_name) < 2:
            logging.getLogger(__name__).warning(f"‚ö†Ô∏è Nom utilisateur invalide: '{user_name}', utilisation 'Participant'")
            normalized['user_name'] = 'Participant'
        else:
            # Capitalisation du pr√©nom
            normalized['user_name'] = user_name.title()
        
        # Sujet
        user_subject = user_data.get('user_subject', '').strip()
        if not user_subject or len(user_subject) < 5:
            logging.getLogger(__name__).warning(f"‚ö†Ô∏è Sujet invalide: '{user_subject}', utilisation 'votre pr√©sentation'")
            normalized['user_subject'] = 'votre pr√©sentation'
        else:
            normalized['user_subject'] = user_subject
        
        # Autres donn√©es optionnelles
        normalized['user_level'] = user_data.get('user_level', 'interm√©diaire')
        normalized['user_preferences'] = user_data.get('user_preferences', {})
        
        logging.getLogger(__name__).info(f"‚úÖ User_data valid√©es et normalis√©es: {normalized}")
        
        return normalized

    def get_user_context_summary(self) -> str:
        """Retourne un r√©sum√© du contexte utilisateur pour logs"""
        return f"üë§ {self.user_data['user_name']} | üéØ {self.user_data['user_subject']}"
        
    async def initialize_components(self):
        """Initialise les composants LiveKit avec fallbacks robustes"""
        components = {}
        
        # VAD avec fallback
        try:
            vad = silero.VAD.load()
            components['vad'] = vad
            logging.getLogger(__name__).info("‚úÖ VAD Silero charg√©")
        except Exception as e:
            logging.getLogger(__name__).error(f"‚ùå Erreur VAD: {e}")
            raise
            
        # STT avec fallback Vosk ‚Üí OpenAI
        try:
            stt = self.create_vosk_stt_with_fallback()
            components['stt'] = stt
            logging.getLogger(__name__).info("‚úÖ STT avec fallback cr√©√©")
        except Exception as e:
            logging.getLogger(__name__).error(f"‚ùå Erreur STT: {e}")
            raise
            
        # LLM avec fallback
        try:
            # Cr√©er LLM - OpenAI GPT-4o en premier, Mistral en fallback
            try:
                llm_instance = self.create_openai_llm()
                logging.getLogger(__name__).info("‚úÖ LLM OpenAI GPT-4o cr√©√© (priorit√© 1)")
            except Exception as e:
                logging.getLogger(__name__).warning(f"‚ö†Ô∏è Fallback vers Mistral: {e}")
                llm_instance = self.create_mistral_llm()
                logging.getLogger(__name__).info("‚úÖ LLM Mistral cr√©√© (fallback)")
            components['llm'] = llm_instance
            logging.getLogger(__name__).info("‚úÖ LLM OpenAI cr√©√©")
        except Exception as e:
            logging.getLogger(__name__).error(f"‚ùå Erreur LLM: {e}")
            raise
            
        # TTS sp√©cialis√© pour multi-agents
        try:
            tts = await self.create_multiagent_tts()
            components['tts'] = tts
            logging.getLogger(__name__).info("‚úÖ TTS multi-agents cr√©√©")
        except Exception as e:
            logging.getLogger(__name__).error(f"‚ùå Erreur TTS: {e}")
            raise
            
        return components
    
    def create_vosk_stt_with_fallback(self):
        """Cr√©e une interface STT avec Vosk en principal et OpenAI en fallback"""
        logging.getLogger(__name__).info("üîÑ [STT-MULTI-AGENTS] Initialisation STT avec logique de fallback (Vosk ‚Üí OpenAI)")
        
        # Tentative 1: Vosk (rapide et √©conomique)
        try:
            vosk_stt = VoskSTT(
                vosk_url=VOSK_STT_URL,
                language="fr",
                sample_rate=16000
            )
            
            # Reset automatique
            def enhanced_clear_user_turn():
                logging.getLogger(__name__).debug("üîÑ [STT-MULTI-AGENTS] Clear user turn avec reset Vosk")
                if hasattr(vosk_stt, '_reset_recognizer'):
                    vosk_stt._reset_recognizer()
            
            vosk_stt.clear_user_turn = enhanced_clear_user_turn
            
            logging.getLogger(__name__).info("‚úÖ [STT-MULTI-AGENTS] VOSK STT ACTIV√â AVEC SUCC√àS")
            return vosk_stt
        except Exception as vosk_error:
            logging.getLogger(__name__).error(f"‚ùå [STT-MULTI-AGENTS] √âCHEC STT Vosk: {vosk_error}")
            
        # Fallback: OpenAI Whisper
        try:
            logging.getLogger(__name__).warning("‚ö†Ô∏è [STT-MULTI-AGENTS] Basculement vers OpenAI Whisper (fallback)")
            api_key = os.getenv('OPENAI_API_KEY')
            if not api_key:
                raise RuntimeError("OPENAI_API_KEY manquante pour le fallback")
                
            openai_stt = openai.STT(
                model="whisper-1",
                language="fr",
                api_key=api_key,
            )
            logging.getLogger(__name__).warning("‚ö†Ô∏è [STT-MULTI-AGENTS] OPENAI STT ACTIV√â (FALLBACK)")
            return openai_stt
        except Exception as openai_error:
            logging.getLogger(__name__).error(f"‚ùå [STT-MULTI-AGENTS] √âchec STT OpenAI fallback: {openai_error}")
            raise RuntimeError(f"Impossible de cr√©er STT (Vosk: {vosk_error}, OpenAI: {openai_error})")

    def create_openai_llm(self):
        """Cr√©e un LLM OpenAI GPT-4o configur√©."""
        openai_api_key = os.getenv('OPENAI_API_KEY', '')
        if not openai_api_key:
            raise RuntimeError("OPENAI_API_KEY manquante")
        
        logging.getLogger(__name__).info("üîç Configuration LLM OpenAI GPT-4o")
        return openai.LLM(
            model="gpt-4o",
            api_key=openai_api_key,
        )

    def create_mistral_llm(self):
        """Cr√©e un LLM configur√© pour utiliser le proxy Mistral c√¥t√© backend.

        Utilise une API compatible OpenAI et choisit la base_url finale en fonction
        de `MISTRAL_USE_PROXY` et `MISTRAL_PROXY_URL`.
        """
        mistral_api_key = os.getenv('MISTRAL_API_KEY', '')
        model = os.getenv('MISTRAL_MODEL', 'mistral-nemo-instruct-2407')
        # Choix de la base_url: proxy local activable via MISTRAL_USE_PROXY=1, sinon direct (MISTRAL_BASE_URL)
        use_proxy = os.getenv('MISTRAL_USE_PROXY', '0') == '1'
        proxy_url = os.getenv('MISTRAL_PROXY_URL', 'http://mistral-conversation:8001/v1')
        base_url = proxy_url if use_proxy else MISTRAL_API_URL
        logging.getLogger(__name__).info(
            f"üîç Configuration LLM Mistral - Mod√®le: {model} | "
            f"use_proxy={'Oui' if use_proxy else 'Non'} | base_url={base_url}"
        )
        return openai.LLM(
            model=model,
            api_key=mistral_api_key,
            base_url=base_url,
        )

    async def create_multiagent_tts(self):
        """Cr√©e un TTS par d√©faut bas√© sur ElevenLabs pour les simulations Studio.

        Note: Chaque agent utilisera ensuite son TTS d√©di√© via _get_or_build_agent_tts.
        Ce TTS par d√©faut est utilis√© pour les annonces initiales au besoin.
        """
        try:
            if elevenlabs_flash_service is None or not os.getenv('ELEVENLABS_API_KEY'):
                raise RuntimeError("ELEVENLABS_API_KEY manquante ou service ElevenLabs indisponible")

            class _ElevenLabsOnDemandTTS:
                # Expose at class-level to satisfy frameworks accessing attributes before __init__
                _sample_rate = 16000
                _num_channels = 1
                def __init__(self_inner):
                    from livekit.agents import tts as _tts
                    self_inner.capabilities = _tts.TTSCapabilities(streaming=False)
                    self_inner._current_sample_rate = 16000
                @property
                def sample_rate(self_inner):
                    return getattr(self_inner, "_current_sample_rate", 16000)
                @property
                def num_channels(self_inner):
                    return 1
                def on(self_inner, _event_name: str):  # hook requis par StreamAdapter
                    def _decorator(fn):
                        return fn
                    return _decorator
                def synthesize(self_inner, text_inner: str, **_kwargs):
                    """Retourne un async context manager compatible StreamAdapter.

                    L'appel ElevenLabs est effectu√© dans __aenter__ pour √©viter de
                    retourner une coroutine √† 'async with'.
                    """
                    from livekit.agents import tts as _tts

                    class _AsyncStream:
                        def __init__(self, text_value: str):
                            self._text = text_value
                            self._audio: bytes = b""
                            self._done = False
                            self._sample_rate: int = 16000
                            self._pos: int = 0
                            self._chunk_bytes: int = int(0.02 * self._sample_rate) * 1 * 2
                            self._sample_rate: int = 16000

                        def __aiter__(self):
                            return self

                        async def __anext__(self):
                            if self._done:
                                raise StopAsyncIteration
                            if not self._audio or self._pos >= len(self._audio):
                                self._done = True
                                raise StopAsyncIteration
                            end = min(self._pos + self._chunk_bytes, len(self._audio))
                            chunk = self._audio[self._pos:end]
                            self._pos = end
                            if self._pos >= len(self._audio):
                                self._done = True
                            class _CompatFrame:
                                def __init__(self, buf: bytes, rate: int, channels: int = 1):
                                    self.data = memoryview(buf)
                                    self.duration = len(buf) / (2 * rate * channels)
                            class _CompatAudio:
                                def __init__(self, buf: bytes, rate: int, channels: int = 1):
                                    self.frame = _CompatFrame(buf, rate, channels)
                                    self.sample_rate = rate
                                    self.num_channels = channels
                            return _CompatAudio(chunk, self._sample_rate, 1)

                        async def __aenter__(self):
                            audio = await elevenlabs_flash_service.synthesize_speech_flash_v25(
                                text=self._text, agent_id="michel_dubois_animateur"
                            )
                            self._audio = audio or b""
                            # Flux natif 16 kHz PCM mono ‚Äî pas de resampling vers 48 kHz
                            self._sample_rate = 16000
                            self_inner._current_sample_rate = 16000
                            # Trim au multiple exact de 20ms pour √©viter les drops
                            try:
                                frame_samples = int(0.02 * self._sample_rate)  # 20ms
                                frame_bytes = frame_samples * 1 * 2
                                if frame_bytes > 0 and len(self._audio) % frame_bytes != 0:
                                    trimmed_len = len(self._audio) - (len(self._audio) % frame_bytes)
                                    self._audio = self._audio[:trimmed_len]
                                self._chunk_bytes = frame_bytes
                                logging.getLogger(__name__).debug(f"üéöÔ∏è [TTS-default] Pr√©paration audio: {len(self._audio)} bytes, frame_bytes={frame_bytes}, rate={self._sample_rate}")
                            except Exception:
                                pass
                            return self

                        async def __aexit__(self, exc_type, exc, tb):
                            return False

                    return _AsyncStream(text_inner)

            logging.getLogger(__name__).info("‚úÖ TTS par d√©faut ElevenLabs pr√™t (mod√©rateur)")
            return _ElevenLabsOnDemandTTS()
        except Exception as e:
            logging.getLogger(__name__).error(f"‚ùå ElevenLabs TTS indisponible: {e}")
            # √âviter Silero (non support√©). Lever clairement l'erreur pour visibilit√©.
            raise

    def create_multiagent_agent(self) -> Agent:
        """Cr√©e un agent LiveKit configur√© pour le syst√®me multi-agents avec contexte utilisateur"""
        try:
            # Instructions R√âVOLUTIONNAIRES pour animateur TV actif avec contexte utilisateur
            system_instructions = f"""Tu es le syst√®me de coordination pour une √©mission de d√©bat TV fran√ßaise personnalis√©e.

üéØ MISSION PRINCIPALE :
- Coordonner Michel Dubois (animateur TV), Sarah Johnson (journaliste), Marcus Thompson (expert)
- Michel M√àNE le d√©bat activement et pr√©sente les participants
- Assurer des conversations naturelles et engageantes
- CONTEXTE SP√âCIFIQUE : {self.user_data['user_name']} d√©bat sur "{self.user_data['user_subject']}"

üé≠ R√îLES DES AGENTS AVEC CONTEXTE :
- Michel Dubois : ANIMATEUR ACTIF qui m√®ne, pr√©sente, relance
  ‚Üí Utilise TOUJOURS le pr√©nom "{self.user_data['user_name']}"
  ‚Üí Centre le d√©bat sur "{self.user_data['user_subject']}"
- Sarah Johnson : Journaliste qui pose des questions incisives
  ‚Üí Challenge {self.user_data['user_name']} sur les aspects de "{self.user_data['user_subject']}"
- Marcus Thompson : Expert qui apporte l'√©clairage technique
  ‚Üí Expertise sp√©cifique sur "{self.user_data['user_subject']}"

üö® R√àGLES CRITIQUES :
- TOUJOURS en fran√ßais
- Michel prend l'initiative et m√®ne le d√©bat
- Conversations naturelles sans marqueurs √©motionnels audibles
- OBLIGATION d'utiliser le nom "{self.user_data['user_name']}" r√©guli√®rement
- OBLIGATION de centrer sur le sujet "{self.user_data['user_subject']}"

üé™ STYLE REQUIS :
- D√©bat TV professionnel et dynamique
- Questions stimulantes li√©es √† "{self.user_data['user_subject']}"
- √âchanges naturels entre les 3 agents
- Engagement maximum de {self.user_data['user_name']}

üí¨ EXEMPLES D'INTERPELLATIONS PERSONNALIS√âES :
- "{self.user_data['user_name']}, sur {self.user_data['user_subject']}, quelle est votre position ?"
- "Sarah, {self.user_data['user_name']} soul√®ve un point int√©ressant..."
- "Marcus, concernant {self.user_data['user_subject']}, que pensez-vous ?"

üéØ OBJECTIF FINAL :
Cr√©er une exp√©rience de d√©bat TV personnalis√©e o√π {self.user_data['user_name']} se sent reconnu et engag√© sur le sujet {self.user_data['user_subject']} qui l'int√©resse.

R√àGLES CRITIQUES (STRICT):
- N'√©cris AUCUNE r√©ponse directe.
- √Ä CHAQUE message utilisateur, APPELLE UNIQUEMENT l'outil generate_multiagent_response avec le message exact.
- N'inclus AUCUNE formule d'introduction (ex: "Bonsoir et bienvenue...").
- Ne te pr√©sentes pas et ne paraphrase pas la sortie de l'outil.

OUTIL DISPONIBLE:
- generate_multiagent_response(user_message: str): orchestre la r√©ponse multi-agents (Michel + Sarah + Marcus) et g√©n√®re les r√©actions.

Ta sortie doit √™tre UNIQUEMENT l'appel d'outil appropri√©."""

            agent = Agent(
                instructions=system_instructions,
                tools=[self.generate_multiagent_response],
            )
            
            logging.getLogger(__name__).info(f"‚úÖ Agent multi-agents cr√©√© avec contexte: {self.get_user_context_summary()}")
            
            return agent
        except Exception as e:
            logging.getLogger(__name__).error(f"‚ùå Erreur cr√©ation agent multi-agents: {e}")
            raise

    @function_tool
    async def generate_multiagent_response(self, user_message: str) -> str:
        """G√©n√®re une r√©ponse multi-agents avec syst√®me d'interpellation intelligente"""
        
        try:
            logger.info(f"üé¨ G√âN√âRATION R√âPONSE MULTI-AGENTS: '{user_message[:50]}...'")
            
            # Utilisation du nouveau syst√®me d'interpellation
            if hasattr(self.manager, 'process_user_message_with_interpellations'):
                responses = await self.manager.process_user_message_with_interpellations(
                    user_message, 
                    "user",  # Speaker ID pour l'utilisateur
                    []  # Historique de conversation (peut √™tre enrichi)
                )
                
                if responses:
                    # Prendre la premi√®re r√©ponse (la plus pertinente)
                    response = responses[0]
                    agent_name = response['agent_name']
                    message = response['message']
                    response_type = response.get('response_type', 'normal')
                    
                    logger.info(f"‚úÖ R√©ponse g√©n√©r√©e par {agent_name} ({response_type}): {message[:50]}...")
                    return f"{agent_name}: {message}"
                else:
                    logger.warning("‚ö†Ô∏è Aucune r√©ponse g√©n√©r√©e par le syst√®me d'interpellation")
                    return "Syst√®me: Pouvez-vous reformuler votre question ?"
            else:
                # Fallback vers l'ancien syst√®me
                logger.warning("‚ö†Ô∏è Syst√®me d'interpellation non disponible, utilisation du syst√®me classique")
                return await self._generate_classic_response(user_message)
                
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration r√©ponse multi-agents: {e}")
            return f"Syst√®me: Erreur technique. Pouvez-vous reformuler ?"
    
    async def _generate_classic_response(self, user_message: str) -> str:
        """M√©thode de fallback pour la g√©n√©ration classique de r√©ponses"""
        
        # Logique classique de s√©lection d'agent
        try:
            # S√©lection simple bas√©e sur le contenu du message
            if any(word in user_message.lower() for word in ["journaliste", "enqu√™te", "investigation", "sarah"]):
                agent_id = "sarah_johnson_journaliste"
            elif any(word in user_message.lower() for word in ["expert", "technique", "marcus"]):
                agent_id = "marcus_thompson_expert"
            else:
                agent_id = "michel_dubois_animateur"  # Par d√©faut
            
            # G√©n√©ration de r√©ponse
            response, emotion = await self.manager.generate_agent_response(
                agent_id, "conversation", user_message, []
            )
            
            agent_name = self.manager.agents[agent_id]['name']
            return f"{agent_name}: {response}"
            
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration classique: {e}")
            return "Syst√®me: Erreur technique. Pouvez-vous reformuler ?"
        """G√©n√®re une r√©ponse orchestr√©e du syst√®me multi-agents R√âVOLUTIONNAIRE avec GPT-4o + ElevenLabs"""
        try:
            logging.getLogger(__name__).info(f"üöÄ SYST√àME R√âVOLUTIONNAIRE pour: {user_message[:50]}...")
            
            # SYST√àME R√âVOLUTIONNAIRE : Utiliser EnhancedMultiAgentManager avec GPT-4o + ElevenLabs
            # S√©lectionner l'agent principal (animateur) pour commencer
            primary_agent_id = "michel_dubois_animateur"  # Animateur principal
            
            # G√©n√©rer r√©ponse compl√®te avec GPT-4o + ElevenLabs
            text_response, audio_data, context = await self.manager.generate_complete_agent_response(
                agent_id=primary_agent_id,
                user_message=user_message,
                session_id="studio_debate_tv"
            )
            
            logging.getLogger(__name__).info(f"üé≠ R√©ponse r√©volutionnaire g√©n√©r√©e: {text_response[:50]}...")
            logging.getLogger(__name__).info(f"üéµ Audio √©motionnel: {len(audio_data)} bytes")
            logging.getLogger(__name__).info(f"üìä Contexte: {context}")
            
            # Simuler la structure de r√©ponse attendue
            response_data = {
                'primary_speaker': primary_agent_id,
                'primary_response': text_response,
                'audio_data': audio_data,
                'context': context
            }
            
            # R√©cup√©rer l'agent principal qui r√©pond
            primary_agent_id = response_data.get('primary_speaker')
            primary_response = response_data.get('primary_response', '')
            
            # Identifier l'agent et pr√©parer les r√©ponses vocales
            responses_to_speak = []
            
            # V√©rification d√©fensive des attributs du manager
            if not hasattr(self.manager, 'agents') or not hasattr(self.manager, 'config'):
                logging.getLogger(__name__).error("‚ùå Manager multi-agents mal configur√©, r√©initialisation")
                # R√©initialiser le manager avec la configuration
                openai_api_key = os.getenv('OPENAI_API_KEY')
                elevenlabs_api_key = os.getenv('ELEVENLABS_API_KEY')
                if openai_api_key and elevenlabs_api_key:
                    self.manager = get_enhanced_manager(openai_api_key, elevenlabs_api_key, self.config)
                else:
                    return "[Syst√®me]: Configuration manquante. Pouvez-vous reformuler ?"
            
            if primary_agent_id and hasattr(self.manager, 'agents') and primary_agent_id in self.manager.agents:
                agent = self.manager.agents[primary_agent_id]
                logging.getLogger(__name__).info(f"üó£Ô∏è {agent.name} ({agent.role}) r√©pond")
                
                # LOGS DE DEBUG POUR AUTORIT√â ANIMATEUR
                if agent.name == "Michel Dubois":
                    self.manager.set_last_speaker_message("animateur_principal", primary_response)
                    logging.getLogger(__name__).info(f"üé≠ ANIMATEUR A PARL√â: {primary_response[:50]}...")
                elif "Sarah" in agent.name:
                    self.manager.set_last_speaker_message("journaliste_contradicteur", primary_response)
                    logging.getLogger(__name__).info(f"üì∞ JOURNALISTE A PARL√â: {primary_response[:50]}...")
                elif "Marcus" in agent.name:
                    self.manager.set_last_speaker_message("expert_specialise", primary_response)
                    logging.getLogger(__name__).info(f"üî¨ EXPERT A PARL√â: {primary_response[:50]}...")
                
                # Ajouter la r√©ponse principale
                responses_to_speak.append({
                    'agent': agent,
                    'text': primary_response,
                    'delay': 0
                })

                # NOUVEAU: Forcer l'intervention des autres agents
                try:
                    # G√©n√©rer une r√©ponse de Sarah Johnson (journaliste)
                    if "sarah_johnson_journaliste" in self.manager.agents:
                        sarah_agent = self.manager.agents["sarah_johnson_journaliste"]
                        sarah_response = await self.manager.generate_complete_agent_response(
                            agent_id="sarah_johnson_journaliste",
                            user_message=user_message,
                            session_id="studio_debate_tv"
                        )
                        if sarah_response and sarah_response[0]:
                            responses_to_speak.append({
                                'agent': sarah_agent,
                                'text': sarah_response[0],
                                'delay': 2000  # 2 secondes apr√®s l'animateur
                            })
                            logging.getLogger(__name__).info(f"üì∞ Sarah Johnson intervient: {sarah_response[0][:50]}...")
                    
                    # G√©n√©rer une r√©ponse de Marcus Thompson (expert)
                    if "marcus_thompson_expert" in self.manager.agents:
                        marcus_agent = self.manager.agents["marcus_thompson_expert"]
                        marcus_response = await self.manager.generate_complete_agent_response(
                            agent_id="marcus_thompson_expert",
                            user_message=user_message,
                            session_id="studio_debate_tv"
                        )
                        if marcus_response and marcus_response[0]:
                            responses_to_speak.append({
                                'agent': marcus_agent,
                                'text': marcus_response[0],
                                'delay': 4000  # 4 secondes apr√®s l'animateur
                            })
                            logging.getLogger(__name__).info(f"üî¨ Marcus Thompson intervient: {marcus_response[0][:50]}...")
                except Exception as e:
                    logging.getLogger(__name__).warning(f"‚ö†Ô∏è √âchec g√©n√©ration r√©ponses multi-agents: {e}")

                # NOUVEAU: D√©tecter imm√©diatement les interpellations dans la sortie de l'agent
                try:
                    outcome = await self.manager.process_agent_output(primary_response, primary_agent_id)
                    if outcome and isinstance(outcome, dict):
                        triggered = outcome.get('triggered_responses') or []
                        if triggered:
                            logging.getLogger(__name__).info(f"üéØ Cha√Æne d'interpellations d√©clench√©e: {len(triggered)} r√©actions")
                            for idx, tr in enumerate(triggered):
                                sec_id = tr.get('agent_id')
                                if sec_id and hasattr(self.manager, 'agents') and sec_id in self.manager.agents:
                                    sec_agent = self.manager.agents[sec_id]
                                    sec_text = tr.get('content') or tr.get('reaction') or ''

                                    # M√©moriser le dernier speaker pour l'autorit√©
                                    if "Sarah" in sec_agent.name:
                                        self.manager.set_last_speaker_message("journaliste_contradicteur", sec_text)
                                    elif "Marcus" in sec_agent.name:
                                        self.manager.set_last_speaker_message("expert_specialise", sec_text)

                                    responses_to_speak.append({
                                        'agent': sec_agent,
                                        'text': sec_text,
                                        'delay': 150 + (idx * 200)
                                    })
                except Exception as e:
                    logging.getLogger(__name__).warning(f"‚ö†Ô∏è √âchec d√©tection interpellations sur sortie agent: {e}")
                
                # Ajouter les r√©ponses secondaires si pr√©sentes
                secondary_responses = response_data.get('secondary_responses', [])
                for sec_resp in secondary_responses:
                    sec_agent_id = sec_resp.get('agent_id')
                    if hasattr(self.manager, 'agents') and sec_agent_id in self.manager.agents:
                        sec_agent = self.manager.agents[sec_agent_id]
                        
                        # LOGS DE DEBUG POUR R√âPONSES SECONDAIRES
                        sec_response_text = sec_resp.get('reaction', '')
                        if "Sarah" in sec_agent.name:
                            self.manager.set_last_speaker_message("journaliste_contradicteur", sec_response_text)
                            logging.getLogger(__name__).info(f"üì∞ JOURNALISTE R√âACTION: {sec_response_text[:50]}...")
                        elif "Marcus" in sec_agent.name:
                            self.manager.set_last_speaker_message("expert_specialise", sec_response_text)
                            logging.getLogger(__name__).info(f"üî¨ EXPERT R√âACTION: {sec_response_text[:50]}...")
                        
                        responses_to_speak.append({
                            'agent': sec_agent,
                            'text': sec_response_text,
                            'delay': sec_resp.get('delay_ms', 1500)
                        })
            
            # SYST√àME R√âVOLUTIONNAIRE : Utiliser directement l'audio ElevenLabs g√©n√©r√©
            if response_data.get('audio_data'):
                logging.getLogger(__name__).info(f"üéµ Diffusion audio r√©volutionnaire ElevenLabs")
                # L'audio est d√©j√† g√©n√©r√© par le syst√®me GPT-4o + ElevenLabs
                # Il sera diffus√© automatiquement par le syst√®me LiveKit
                return text_response
            else:
                # S√©curit√©: si aucune r√©ponse vocale g√©n√©r√©e, provoquer une r√©action minimale
                try:
                    fallback_agent = None
                    # Prioriser un non-mod√©rateur si possible
                    if hasattr(self.manager, 'agents') and self.manager.agents:
                        for a in self.manager.agents.values():
                            if a.interaction_style != InteractionStyle.MODERATOR:
                                fallback_agent = a
                                break
                        if not fallback_agent:
                            fallback_agent = list(self.manager.agents.values())[0]
                    if fallback_agent:
                        await self.speak_multiple_agents_robust([
                            {'agent': fallback_agent, 'text': "Je prends la parole pour lancer la discussion.", 'delay': 0}
                        ])
                except Exception:
                    pass
            
            # Retourner le texte format√© pour les logs
            formatted_text = f"[{responses_to_speak[0]['agent'].name}]: {responses_to_speak[0]['text']}"
            for resp in responses_to_speak[1:]:
                formatted_text += f"\n[{resp['agent'].name}]: {resp['text']}"
            
            return formatted_text
            
        except Exception as e:
            logging.getLogger(__name__).error(f"‚ùå Erreur orchestration multi-agents: {e}")
            return "[Syst√®me]: Je rencontre un probl√®me technique. Pouvez-vous reformuler ?"
    
    async def speak_multiple_agents_robust(self, responses_to_speak: list):
        """Version robuste avec retry et fallbacks multiples"""
        for resp_data in responses_to_speak:
            agent = resp_data['agent']
            text = resp_data['text']
            delay = resp_data['delay']

            # Attendre le d√©lai
            if delay and delay > 0:
                await asyncio.sleep(delay / 1000.0)

            # Nettoyer un √©ventuel pr√©fixe "Nom: " pour √©viter doublons au TTS
            sanitized_text = self._strip_name_prefix(agent, text)

            # Retry en conservant TOUJOURS la voix de l'agent (√©viter voix du mod√©rateur)
            success = False
            for attempt in range(3):
                try:
                    voice_dbg = agent.voice_config.get('voice', 'alloy')
                    logging.getLogger(__name__).info(f"üîä {agent.name} parle avec voix {voice_dbg} (tentative {attempt+1})")
                    # 1√®re tentative: utiliser le TTS en cache (ou le cr√©er)
                    # 2e tentative: recr√©er le TTS et r√©essayer
                    await self._speak_with_agent_voice_safe(agent, sanitized_text, force_recreate=(attempt == 1))
                    success = True
                    logging.getLogger(__name__).info(f"‚úÖ {agent.name} a parl√© (tentative {attempt+1})")
                    break
                except Exception as e:
                    logging.getLogger(__name__).warning(f"‚ö†Ô∏è Tentative {attempt+1} √©chou√©e pour {agent.name}: {e}")
                    if attempt < 2:
                        await asyncio.sleep(0.2)

            if not success:
                logging.getLogger(__name__).error(f"‚ùå Impossible de faire parler {agent.name}")

    async def _speak_with_agent_voice_safe(self, agent: AgentPersonality, text: str, force_recreate: bool = False):
        """Parle avec la voix propre √† l'agent en for√ßant la bonne s√©lection TTS."""

        original_tts = getattr(self.session, '_tts', None)
        try:
            agent_tts = await self._get_or_build_agent_tts(agent, force_recreate=force_recreate)
            self.session._tts = agent_tts
            await self.session.say(text=f"{agent.name}: {text}")
        finally:
            if original_tts is not None:
                self.session._tts = original_tts

    async def _get_or_build_agent_tts(self, agent: AgentPersonality, force_recreate: bool = False):
        """Retourne le TTS ElevenLabs d√©di√© √† l'agent, en le cr√©ant si besoin."""
        existing = self.agent_tts.get(agent.agent_id)
        if existing and not force_recreate:
            return existing

        # Utiliser le service TTS optimis√© si disponible
        if elevenlabs_optimized_service and os.getenv('ELEVENLABS_API_KEY'):
            logging.getLogger(__name__).info(f"üéØ Utilisation du service TTS optimis√© pour {agent.name}")
            
            class _ElevenLabsOptimizedTTS:
                _sample_rate = 16000
                _num_channels = 1
                def __init__(self_inner):
                    from livekit.agents import tts as _tts
                    self_inner.capabilities = _tts.TTSCapabilities(streaming=True)
                    self_inner._current_sample_rate = 16000
                    self_inner._frame_duration_sec = 0.02
                @property
                def sample_rate(self_inner):
                    return getattr(self_inner, "_current_sample_rate", 16000)
                @property
                def num_channels(self_inner):
                    return 1
                def on(self_inner, _event_name: str):
                    def _decorator(fn):
                        return fn
                    return _decorator
                def synthesize(self_inner, text_inner: str, **_kwargs):
                    from livekit.agents import tts as _tts

                    class _AsyncStream:
                        def __init__(self, text_value: str):
                            self._text = text_value
                            self._audio: bytes = b""
                            self._done = False
                            self._sample_rate = 16000
                            self._pos = 0
                            self._frame_bytes = 0

                        def __aiter__(self):
                            return self

                        async def __anext__(self):
                            if self._pos >= len(self._audio):
                                raise StopAsyncIteration
                            from livekit.agents import tts as _tts
                            end = min(self._pos + self._frame_bytes, len(self._audio))
                            chunk = self._audio[self._pos:end]
                            self._pos = end
                            try:
                                return _tts.SynthesizedAudio(chunk, self._sample_rate)
                            except TypeError:
                                return _tts.SynthesizedAudio(data=chunk, sample_rate=self._sample_rate)

                        async def __aenter__(self):
                            # Utiliser le service optimis√© avec l'agent_id correct
                            agent_id = self._map_agent_to_elevenlabs_id(agent)
                            audio = await elevenlabs_optimized_service.synthesize_with_zero_latency(
                                text=self._text, agent_id=agent_id
                            )
                            self._audio = audio or b""
                            self._sample_rate = 16000
                            self_inner._current_sample_rate = 16000
                            
                            # Pr√©paration audio pour streaming
                            try:
                                frame_samples = int(0.02 * self._sample_rate)
                                frame_bytes = frame_samples * 1 * 2
                                if frame_bytes > 0:
                                    remainder = len(self._audio) % frame_bytes
                                    if remainder != 0:
                                        pad = frame_bytes - remainder
                                        self._audio = self._audio + (b"\x00" * pad)
                                self._frame_bytes = frame_bytes
                                self._audio = (b"\x00" * frame_bytes) + self._audio
                                logging.getLogger(__name__).debug(f"üéöÔ∏è [TTS-optimized] {agent.name}: {len(self._audio)} bytes @16kHz")
                            except Exception as prep_err:
                                logging.getLogger(__name__).warning(f"‚ö†Ô∏è [TTS] Erreur pr√©paration audio: {prep_err}")
                            return self

                        async def __aexit__(self, exc_type, exc, tb):
                            return False

                    return _AsyncStream(text_inner)

            tts = _ElevenLabsOptimizedTTS()
            self.agent_tts[agent.agent_id] = tts
            logging.getLogger(__name__).info(f"‚úÖ TTS optimis√© cr√©√© pour {agent.name} avec voix fran√ßaise")
            return tts

        # Fallback vers le service flash si l'optimis√© n'est pas disponible
        if elevenlabs_flash_service is None or not os.getenv('ELEVENLABS_API_KEY'):
            raise RuntimeError("ELEVENLABS_API_KEY manquante ou service ElevenLabs indisponible pour TTS agent")

        # Mapping nom ‚Üí id de voix ElevenLabs
        mapped_voice_id = self._map_agent_to_elevenlabs_id(agent)

        class _ElevenLabsOnDemandTTS:
            # Expose at class-level to satisfy frameworks accessing attributes before __init__
            _sample_rate = 16000
            _num_channels = 1
            def __init__(self_inner):
                from livekit.agents import tts as _tts
                # Activer le mode streaming pour √©mettre des trames 20ms
                self_inner.capabilities = _tts.TTSCapabilities(streaming=True)
                # Par d√©faut, aligner sur 48 kHz pour √©viter tout ralentissement initial
                self_inner._current_sample_rate = 16000
                self_inner._frame_duration_sec = 0.02
            @property
            def sample_rate(self_inner):
                return getattr(self_inner, "_current_sample_rate", 16000)
            @property
            def num_channels(self_inner):
                return 1
            def on(self_inner, _event_name: str):  # hook requis par StreamAdapter
                def _decorator(fn):
                    return fn
                return _decorator
            def synthesize(self_inner, text_inner: str, **_kwargs):
                from livekit.agents import tts as _tts

                class _AsyncStream:
                    def __init__(self, text_value: str):
                        self._text = text_value
                        self._audio: bytes = b""
                        self._done = False
                        self._sample_rate: int = 16000
                        self._pos: int = 0
                        self._chunk_bytes: int = int(0.02 * self._sample_rate) * 1 * 2
                        self._sample_rate: int = 16000

                    def __aiter__(self):
                        return self

                    async def __anext__(self):
                        if self._done:
                            raise StopAsyncIteration
                        if not self._audio or self._pos >= len(self._audio):
                            self._done = True
                            raise StopAsyncIteration
                        end = min(self._pos + self._chunk_bytes, len(self._audio))
                        chunk = self._audio[self._pos:end]
                        self._pos = end
                        if self._pos >= len(self._audio):
                            self._done = True
                        class _CompatFrame:
                            def __init__(self, buf: bytes, rate: int, channels: int = 1):
                                self.data = memoryview(buf)
                                self.duration = len(buf) / (2 * rate * channels)
                        class _CompatAudio:
                            def __init__(self, buf: bytes, rate: int, channels: int = 1):
                                self.frame = _CompatFrame(buf, rate, channels)
                                self.sample_rate = rate
                                self.num_channels = channels
                        return _CompatAudio(chunk, self._sample_rate, 1)

                    async def __aenter__(self):
                        audio = await elevenlabs_flash_service.synthesize_speech_flash_v25(
                            text=self._text, agent_id=mapped_voice_id
                        )
                        self._audio = audio or b""
                        # Forcer 16 kHz PCM mono bout‚Äë√†‚Äëbout pour √©viter ralentissements
                        self._sample_rate = 16000
                        self_inner._current_sample_rate = 16000
                        # Limiteur doux (normalisation descendante) pour √©viter saturation/clipping
                        try:
                            if self._audio:
                                import audioop
                                max_amp = audioop.max(self._audio, 2) or 1
                                max_target = 28000  # ~-1.5 dBFS
                                if max_amp > max_target:
                                    ratio = max_target / max_amp
                                    self._audio = audioop.mul(self._audio, 2, ratio)
                        except Exception:
                            pass
                        # Sample rate d√©j√† forc√© √† 16 kHz
                        try:
                            logging.getLogger(__name__).debug(f"üéöÔ∏è [TTS-agent] Bytes re√ßus ElevenLabs: {len(self._audio)} @16k")
                        except Exception:
                            pass
                        # Pas de resampling dynamique vers 48 kHz
                        # Slicing en trames de 20ms (sans r√©-√©chantillonnage) pour √©viter les drops
                        try:
                            frame_samples = int(0.02 * self._sample_rate)
                            frame_bytes = frame_samples * 1 * 2
                            if frame_bytes > 0:
                                remainder = len(self._audio) % frame_bytes
                                if remainder != 0:
                                    pad = frame_bytes - remainder
                                    self._audio = self._audio + (b"\x00" * pad)
                            self._frame_bytes = frame_bytes
                            # Warm-up imm√©diat: √©mettre une tr√®s courte trame de silence pour cadrer le tempo
                            self._audio = (b"\x00" * frame_bytes) + self._audio
                            if len(self._audio) == 0:
                                logging.getLogger(__name__).warning("‚ö†Ô∏è [TTS] Audio vide apr√®s pr√©paration")
                            else:
                                logging.getLogger(__name__).debug(f"üéöÔ∏è [TTS-agent] Pr√©paration audio: {len(self._audio)} bytes, frame_bytes={frame_bytes}, rate={self._sample_rate}Hz")
                        except Exception as prep_err:
                            logging.getLogger(__name__).warning(f"‚ö†Ô∏è [TTS] Erreur pr√©paration audio: {prep_err}")
                        return self

                    async def __aexit__(self, exc_type, exc, tb):
                        return False

                return _AsyncStream(text_inner)

        tts = _ElevenLabsOnDemandTTS()
        self.agent_tts[agent.agent_id] = tts
        return tts

    def _map_agent_to_elevenlabs_id(self, agent: AgentPersonality) -> str:
        """Mappe l'agent logique vers l'identifiant de voix ElevenLabs configur√©."""
        name_lower = agent.name.lower()
        if "michel" in name_lower and "dubois" in name_lower:
            return "michel_dubois_animateur"
        if "sarah" in name_lower and "johnson" in name_lower:
            return "sarah_johnson_journaliste"
        if "marcus" in name_lower and "thompson" in name_lower:
            return "marcus_thompson_expert"
        if "emma" in name_lower and "wilson" in name_lower:
            return "emma_wilson_coach"
        if "david" in name_lower and "chen" in name_lower:
            return "david_chen_challenger"
        if "sophie" in name_lower and "martin" in name_lower:
            return "sophie_martin_diplomate"
        # D√©faut: voix du mod√©rateur
        return "michel_dubois_animateur"

    def _strip_name_prefix(self, agent: AgentPersonality, text: str) -> str:
        """Supprime un √©ventuel pr√©fixe "Nom:" pour √©viter double annonce au TTS."""
        if not text:
            return text
        first_name = agent.name.split()[0]
        candidates = [agent.name, first_name]
        cleaned = text
        for cand in candidates:
            for sep in [":", "-", "‚Äî"]:
                prefix = f"{cand}{sep}"
                if cleaned.strip().lower().startswith(prefix.lower()):
                    cleaned = cleaned.strip()[len(prefix):].lstrip()
        return cleaned
    
    async def update_tts_voice(self, agent: AgentPersonality):
        """Met √† jour dynamiquement la voix TTS pour correspondre √† l'agent"""
        try:
            if not hasattr(self, 'voice_configs'):
                return
                
            voice_config = self.voice_configs.get(agent.agent_id)
            if not voice_config:
                return
            
            api_key = os.getenv('OPENAI_API_KEY')
            if not api_key:
                return
                
            # Cr√©er un nouveau TTS avec la voix de l'agent
            new_voice = voice_config['voice']
            new_speed = voice_config['speed']
            
            logging.getLogger(__name__).info(f"üîÑ Changement voix TTS: {new_voice} pour {agent.name}")
            
            # Note: Dans une vraie impl√©mentation, on devrait pouvoir changer
            # dynamiquement la voix de la session, mais LiveKit ne le supporte
            # pas encore directement. Pour l'instant, on log juste le changement.
            
        except Exception as e:
            logging.getLogger(__name__).warning(f"‚ö†Ô∏è Impossible de changer la voix TTS: {e}")
    
    def get_naturalness_report(self) -> dict:
        """G√©n√®re un rapport de naturalit√© en temps r√©el"""
        return self.naturalness_monitor.get_report()

    async def generate_orchestrated_welcome(self) -> str:
        """G√©n√®re un message de bienvenue orchestr√© avec toutes les personnalit√©s"""
        try:
            # R√©cup√©rer les donn√©es utilisateur
            user_name = self.user_data.get('user_name', 'Participant')
            user_subject = self.user_data.get('user_subject', 'votre pr√©sentation')
            
            # Trouver le mod√©rateur pour l'introduction
            moderator = None
            for agent in self.config.agents:
                if agent.interaction_style == InteractionStyle.MODERATOR:
                    moderator = agent
                    break
            
            if not moderator:
                moderator = self.config.agents[0]
            
            # Construire le message de bienvenue personnalis√©
            welcome_parts = []
            
            # Introduction personnalis√©e du mod√©rateur
            welcome_parts.append(f"[{moderator.name}]: Bonjour {user_name} et bienvenue dans Studio Situations Pro !")
            
            # Pr√©sentation du contexte selon l'exercice avec mention du sujet
            if "debate" in self.config.exercise_id:
                welcome_parts.append(f"[{moderator.name}]: Nous sommes ici pour d√©battre de {user_subject}.")
            elif "interview" in self.config.exercise_id:
                welcome_parts.append(f"[{moderator.name}]: Nous allons discuter de votre candidature concernant {user_subject}.")
            elif "boardroom" in self.config.exercise_id:
                welcome_parts.append(f"[{moderator.name}]: Bienvenue dans notre conseil pour pr√©senter {user_subject}.")
            elif "sales" in self.config.exercise_id:
                welcome_parts.append(f"[{moderator.name}]: Nous sommes pr√™ts √† entendre votre pr√©sentation sur {user_subject}.")
            elif "keynote" in self.config.exercise_id:
                welcome_parts.append(f"[{moderator.name}]: Bienvenue pour votre keynote sur {user_subject}.")
            
            # Pr√©sentation des autres participants (rapide)
            other_agents = [a for a in self.config.agents if a.agent_id != moderator.agent_id]
            if other_agents:
                participants = ", ".join([a.name for a in other_agents[:2]])  # Max 2 pour rester court
                welcome_parts.append(f"[{moderator.name}]: Avec nous aujourd'hui : {participants}.")
            
            # Invitation personnalis√©e √† commencer
            welcome_parts.append(f"[{moderator.name}]: {user_name}, quand vous √™tes pr√™t(e), commencez votre pr√©sentation sur {user_subject}.")
            
            welcome_message = " ".join(welcome_parts)
            logging.getLogger(__name__).info(f"üì¢ Message de bienvenue personnalis√©: {welcome_message[:100]}...")
            
            return welcome_message
            
        except Exception as e:
            logging.getLogger(__name__).error(f"‚ùå Erreur g√©n√©ration message bienvenue: {e}")
            return f"[Syst√®me]: Bienvenue {self.user_data.get('user_name', 'Participant')} dans Studio Situations Pro."

    async def run_session(self, ctx: JobContext):
        """Execute la session multi-agents avec gestion robuste"""
        self.is_running = True
        
        try:
            logging.getLogger(__name__).info(f"üöÄ D√©marrage session multi-agents: {self.config.exercise_id}")
            
            # Connexion avec retry
            await self.connect_with_retry(ctx)
            
            # Stocker ctx.room pour compatibilit√© LiveKit 1.2.3
            self.room = ctx.room
            logging.getLogger(__name__).info("‚úÖ Room stock√©e pour compatibilit√© LiveKit 1.2.3")
            
            # Initialisation des composants
            components = await self.initialize_components()
            
            # Cr√©ation de l'agent multi-agents
            agent = self.create_multiagent_agent()
            
            # Cr√©ation de la session
            self.session = AgentSession(**components)
            
            # Initialisation du manager multi-agents
            self.manager.initialize_session()

            # INT√âGRATION OPTIONNELLE DU SYST√àME D'EXERCICES (feature flag)
            try:
                import os
                flag = str(os.getenv("ELOQUENCE_EXERCISES_ENABLED", "")).lower() in ("1", "true", "yes", "on")
                if flag:
                    import importlib.util
                    from pathlib import Path
                    from types import SimpleNamespace
                    base_dir = Path(__file__).resolve().parent / "exercise_system"

                    def _load_mod(name: str):
                        spec = importlib.util.spec_from_file_location(f"_ex_{name}", str(base_dir / f"{name}.py"))
                        mod = importlib.util.module_from_spec(spec)  # type: ignore[arg-type]
                        assert spec and spec.loader
                        spec.loader.exec_module(mod)
                        return mod

                    scen_mod = _load_mod("scenario_manager")
                    var_mod = _load_mod("variation_engine")
                    cache_mod = _load_mod("cache_system")
                    orch_mod = _load_mod("orchestrator")
                    int_mod = _load_mod("integration")

                    # Initialiser les composants exercices
                    scenario_manager = scen_mod.ScenarioManager()
                    await scenario_manager.initialize()
                    variation_engine = var_mod.AIVariationEngine()
                    cache_system = cache_mod.ExerciseCacheSystem()
                    orchestrator = orch_mod.ExerciseOrchestrator()

                    # Adaptateur minimal pour le MultiAgentManager existant
                    class _MAMAdapter:
                        def __init__(self, mam):
                            self.mam = mam

                        async def get_session_context(self, session_id: str):
                            UserProfile = scen_mod.UserProfile
                            SkillLevel = scen_mod.SkillLevel
                            user_profile = UserProfile(
                                user_id=self.mam.config.exercise_id,
                                skill_level=SkillLevel.INTERMEDIATE,
                                professional_sector="technology",
                                interests=["debate"],
                                recent_exercises=[],
                                performance_history={},
                            )
                            agents = [SimpleNamespace(id=aid) for aid in self.mam.agents.keys()]
                            return SimpleNamespace(user_profile=user_profile, agents=agents, history=[])

                        async def update_session_configuration(self, session_id: str, new_agents, scenario_context):
                            # Int√©gration progressive ‚Äî pas de reconfiguration live pour l'instant
                            return None

                    integration = int_mod.ExerciseSystemIntegration(
                        _MAMAdapter(self.manager),
                        scenario_manager=scenario_manager,
                        variation_engine=variation_engine,
                        cache_system=cache_system,
                        orchestrator=orchestrator,
                    )

                    # Cibler automatiquement le sc√©nario TV d√©bat si la config l'indique
                    prefs = {}
                    try:
                        if "debate" in str(self.config.exercise_id).lower():
                            prefs = {"preferred_scenario_id": "studio_debate_tv"}
                    except Exception:
                        prefs = {}

                    await integration.enhance_existing_session(
                        "live-session",
                        int_mod.ExerciseRequest(preferences=prefs)
                    )
                    logging.getLogger(__name__).info("‚úÖ Exercices: int√©gration minimale activ√©e (feature flag)")
            except Exception as e:
                logging.getLogger(__name__).warning(f"‚ö†Ô∏è Exercices: int√©gration d√©sactiv√©e (erreur: {e})")
            
            # D√©marrage de la session
            await self.session.start(agent=agent, room=ctx.room)
            
            # IMPORTANT (Scaleway OpenAI-compat): ne pas pousser un message assistant
            # avant le premier message utilisateur, sinon 400 alternance roles.
            # On retire le "welcome prefill" vocal ici. Le 1er tour LLM se fera
            # apr√®s le premier message user.
                
            logging.getLogger(__name__).info(f"‚úÖ Session multi-agents {self.config.exercise_id} d√©marr√©e avec succ√®s (sans prefill assistant)")
            
            # Maintenir la session active
            await self.maintain_session()
            
        except Exception as e:
            logging.getLogger(__name__).error(f"‚ùå Erreur session multi-agents: {e}")
            raise
        finally:
            self.is_running = False
            
    async def connect_with_retry(self, ctx: JobContext, max_retries: int = 3):
        """Connexion avec retry automatique"""
        for attempt in range(max_retries):
            try:
                await ctx.connect()
                logging.getLogger(__name__).info(f"‚úÖ Connexion multi-agents r√©ussie (tentative {attempt + 1})")
                return
            except Exception as e:
                logging.getLogger(__name__).warning(f"‚ö†Ô∏è √âchec connexion multi-agents tentative {attempt + 1}: {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2 ** attempt)
                else:
                    raise
                    
    async def maintain_session(self):
        """Maintient la session active avec surveillance"""
        heartbeat_interval = 30  # secondes
        max_silent_duration = 300  # 5 minutes sans activit√©
        last_activity = datetime.now()
        
        while self.is_running:
            try:
                await asyncio.sleep(heartbeat_interval)
                
                # V√©rifier l'√©tat de la connexion
                if hasattr(self, 'room') and self.room:
                    if hasattr(self.room, 'connection_state'):
                        state = self.room.connection_state
                        if state != rtc.ConnectionState.CONN_CONNECTED:
                            logging.getLogger(__name__).warning(f"‚ö†Ô∏è √âtat de connexion multi-agents d√©grad√©: {state}")
                            
                    # V√©rifier l'activit√© r√©cente
                    current_time = datetime.now()
                    if (current_time - last_activity).seconds > max_silent_duration:
                        logging.getLogger(__name__).info("üì¢ Envoi d'un message de maintien multi-agents")
                        
                        # Utiliser le mod√©rateur pour maintenir l'engagement
                        moderator = None
                        for agent in self.config.agents:
                            if agent.interaction_style == InteractionStyle.MODERATOR:
                                moderator = agent
                                break
                        
                        if moderator and self.session:
                            await self.session.say(
                                text=f"Je suis {moderator.name}, je suis toujours l√† pour vous accompagner. N'h√©sitez pas √† continuer notre simulation !"
                            )
                        last_activity = current_time
                    
                    logging.getLogger(__name__).debug(f"üíì Heartbeat multi-agents OK - Session active depuis {(current_time - last_activity).seconds}s")
                else:
                    logging.getLogger(__name__).warning("‚ö†Ô∏è Room multi-agents non disponible, arr√™t de la surveillance")
                    break
                    
            except Exception as e:
                logging.getLogger(__name__).error(f"‚ùå Erreur dans la surveillance multi-agents: {e}")
                await asyncio.sleep(5)  # Attendre avant de retry


# ==========================================
# VALIDATION COMPL√àTE DU SYST√àME
# ==========================================

async def initialize_multi_agent_system_with_context(exercise_id: str = "studio_debate_tv", 
                                                   user_data: dict = None) -> Any:
    """Initialise le syst√®me multi-agents avec contexte utilisateur"""
    
    try:
        logging.getLogger(__name__).info(f"üöÄ Initialisation syst√®me multi-agents avec contexte: {exercise_id}")
        
        # Configuration de l'exercice
        config = ExerciseTemplates.get_studio_debate_tv_config()
        
        if not config or len(config.agents) == 0:
            raise ValueError("Configuration agents vide ou invalide")
        
        logging.getLogger(__name__).info(f"‚úÖ Configuration charg√©e: {len(config.agents)} agents")
        for agent in config.agents:
            logging.getLogger(__name__).info(f"   - {agent.name} ({agent.role})")
        
        # Validation user_data
        if user_data:
            logging.getLogger(__name__).info(f"üìã User_data re√ßues: {user_data}")
        else:
            logging.getLogger(__name__).warning("‚ö†Ô∏è Aucune user_data fournie")
        
        # Initialisation service avec user_data
        service = MultiAgentLiveKitService(config, user_data)
        
        # Validation que le contexte est bien configur√©
        if hasattr(service.manager, 'get_user_context'):
            context = service.manager.get_user_context()
            logging.getLogger(__name__).info(f"‚úÖ Contexte utilisateur valid√©: {context}")
        
        logging.getLogger(__name__).info(f"üéâ Syst√®me multi-agents initialis√© avec succ√®s")
        logging.getLogger(__name__).info(f"   {service.get_user_context_summary()}")
        
        return service
        
    except Exception as e:
        logging.getLogger(__name__).error(f"‚ùå Erreur initialisation multi-agents avec contexte: {e}")
        raise

def create_multiagent_service_with_user_data(user_name: str, user_subject: str) -> MultiAgentLiveKitService:
    """Fonction utilitaire pour cr√©er le service avec donn√©es utilisateur"""
    
    user_data = {
        'user_name': user_name,
        'user_subject': user_subject
    }
    
    config = ExerciseTemplates.get_studio_debate_tv_config()
    return MultiAgentLiveKitService(config, user_data)

async def validate_user_context_integration() -> bool:
    """Valide que l'int√©gration du contexte utilisateur fonctionne de bout en bout"""
    
    try:
        logging.getLogger(__name__).info("üîç VALIDATION INT√âGRATION CONTEXTE UTILISATEUR...")
        
        # Test avec donn√©es utilisateur sp√©cifiques
        test_user_data = {
            'user_name': 'Alice',
            'user_subject': 'Intelligence Artificielle et Emploi'
        }
        
        # Initialisation du service
        service = await initialize_multi_agent_system_with_context("studio_debate_tv", test_user_data)
        
        # Validation 1: Service cr√©√© avec user_data
        assert service.user_data['user_name'] == 'Alice'
        assert service.user_data['user_subject'] == 'Intelligence Artificielle et Emploi'
        logging.getLogger(__name__).info("‚úÖ Validation 1: Service avec user_data")
        
        # Validation 2: Manager a le contexte
        if hasattr(service.manager, 'get_user_context'):
            context = service.manager.get_user_context()
            assert context['user_name'] == 'Alice'
            assert context['user_subject'] == 'Intelligence Artificielle et Emploi'
            logging.getLogger(__name__).info("‚úÖ Validation 2: Manager avec contexte")
        
        # Validation 3: Prompts des agents contiennent le contexte
        for agent_id, agent in service.manager.agents.items():
            prompt = agent["system_prompt"]
            assert "Alice" in prompt, f"Nom absent du prompt de {agent_id}"
            assert "Intelligence Artificielle" in prompt, f"Sujet absent du prompt de {agent_id}"
        
        logging.getLogger(__name__).info("‚úÖ Validation 3: Prompts avec contexte")
        
        # Validation 4: Instructions syst√®me avec contexte
        agent = service.create_multiagent_agent()
        # Note: Validation que l'agent est cr√©√© sans erreur
        logging.getLogger(__name__).info("‚úÖ Validation 4: Agent syst√®me avec contexte")
        
        logging.getLogger(__name__).info("üéâ VALIDATION INT√âGRATION CONTEXTE R√âUSSIE !")
        return True
        
    except Exception as e:
        logging.getLogger(__name__).error(f"‚ùå √âCHEC VALIDATION INT√âGRATION: {e}")
        return False

async def initialize_multi_agent_system(exercise_id: str = "studio_debate_tv") -> Any:
    """Initialise le syst√®me multi-agents avec Enhanced Manager"""
    
    try:
        logging.getLogger(__name__).info(f"üöÄ Initialisation syst√®me multi-agents: {exercise_id}")
        
        # ‚úÖ CONFIGURATION SELON EXERCISE_TYPE
        if exercise_id == 'studio_debate_tv':
            logging.getLogger(__name__).info("‚úÖ CONFIGURATION D√âBAT TV: Michel, Sarah, Marcus")
            config = ExerciseTemplates.get_studio_debate_tv_config()
        elif exercise_id == 'studio_situations_pro':
            logging.getLogger(__name__).info("‚úÖ CONFIGURATION SITUATIONS PRO: Thomas, Sophie, Marc")
            config = ExerciseTemplates.get_studio_situations_pro_config()
        else:
            logging.getLogger(__name__).warning(f"‚ö†Ô∏è Exercise type non reconnu: {exercise_id}, fallback vers d√©bat TV")
            config = ExerciseTemplates.get_studio_debate_tv_config()
        
        if not config or len(config.agents) == 0:
            raise ValueError("Configuration agents vide ou invalide")
        
        logging.getLogger(__name__).info(f"‚úÖ Configuration charg√©e: {len(config.agents)} agents")
        for agent in config.agents:
            logging.getLogger(__name__).info(f"   - {agent.name} ({agent.role})")
        
        # Initialisation Enhanced Manager si disponible
        if ENHANCED_MANAGER_AVAILABLE:
            openai_key = os.getenv('OPENAI_API_KEY')
            elevenlabs_key = os.getenv('ELEVENLABS_API_KEY')
            
            if not openai_key or not elevenlabs_key:
                logging.getLogger(__name__).error("‚ùå Cl√©s API manquantes pour Enhanced Manager")
                raise ValueError("Cl√©s API OpenAI et ElevenLabs requises")
            
            manager = get_enhanced_manager(openai_key, elevenlabs_key, config)
            logging.getLogger(__name__).info("üéØ Enhanced Multi-Agent Manager initialis√©")
            
        else:
            # Fallback manager basique
            manager = MultiAgentManager(config)
            logging.getLogger(__name__).warning("‚ö†Ô∏è Utilisation manager basique (Enhanced non disponible)")
        
        # Validation du manager
        if not hasattr(manager, 'agents') or len(manager.agents) == 0:
            raise ValueError("Manager initialis√© sans agents")
        
        logging.getLogger(__name__).info(f"‚úÖ Manager initialis√© avec {len(manager.agents)} agents")
        
        # Test de performance si Enhanced Manager
        if ENHANCED_MANAGER_AVAILABLE and hasattr(manager, 'log_performance_status'):
            manager.log_performance_status()
        
        return manager
        
    except Exception as e:
        logging.getLogger(__name__).error(f"‚ùå Erreur initialisation multi-agents: {e}")
        raise

async def validate_complete_system(manager: Any) -> bool:
    """Valide que le syst√®me complet fonctionne parfaitement"""
    
    try:
        logging.getLogger(__name__).info("üîç VALIDATION SYST√àME COMPLET...")
        
        # 1. Validation Enhanced Manager
        if hasattr(manager, 'agents'):
            agents = manager.agents
            logging.getLogger(__name__).info(f"‚úÖ Enhanced Manager d√©tect√© avec {len(agents)} agents")
        else:
            logging.getLogger(__name__).warning("‚ö†Ô∏è Manager basique d√©tect√©")
            return False
        
        # 2. Validation agents fran√ßais
        expected_agents = ["michel_dubois_animateur", "sarah_johnson_journaliste", "marcus_thompson_expert"]
        for agent_id in expected_agents:
            if agent_id not in agents:
                logging.getLogger(__name__).error(f"‚ùå Agent manquant: {agent_id}")
                return False
            
            agent = agents[agent_id]
            prompt = agent.get("system_prompt", "")
            
            # V√©rification prompts fran√ßais
            if "FRAN√áAIS" not in prompt and "fran√ßais" not in prompt:
                logging.getLogger(__name__).error(f"‚ùå Prompt non fran√ßais pour {agent['name']}")
                return False
            
            # V√©rification interdictions anglais
            if "generate response" in prompt.lower():
                logging.getLogger(__name__).error(f"‚ùå 'generate response' trouv√© dans {agent['name']}")
                return False
            
            # V√©rification voix neutres
            expected_voices = {
                "michel_dubois_animateur": "JBFqnCBsd6RMkjVDRZzb",
                "sarah_johnson_journaliste": "EXAVITQu4vr4xnSDxMaL", 
                "marcus_thompson_expert": "VR6AewLTigWG4xSOukaG"
            }
            
            if agent.get("voice_id") != expected_voices[agent_id]:
                logging.getLogger(__name__).error(f"‚ùå Voix incorrecte pour {agent['name']}: {agent.get('voice_id')}")
                return False
            
            logging.getLogger(__name__).info(f"‚úÖ Agent {agent['name']} valid√© (fran√ßais + voix neutre)")
        
        # 3. Test r√©ponse rapide
        if hasattr(manager, 'generate_agent_response'):
            start_time = time.time()
            response, emotion = await manager.generate_agent_response(
                "michel_dubois_animateur", 
                "test", 
                "test", 
                []
            )
            duration = time.time() - start_time
            
            # Assouplir la contrainte de latence pour √©viter le fallback intempestif
            if duration > 8.0:  # tol√©rance augment√©e √† 8s
                logging.getLogger(__name__).warning(f"‚ö†Ô∏è R√©ponse lente mais tol√©r√©e: {duration:.3f}s")
            else:
                logging.getLogger(__name__).info(f"‚úÖ R√©ponse rapide valid√©e: {duration:.3f}s")
            
            if len(response) < 10:
                logging.getLogger(__name__).error(f"‚ùå R√©ponse trop courte: {response}")
                return False
        
        # 4. Validation syst√®me d'√©motions (si TTS disponible)
        try:
            from elevenlabs_flash_tts_service import VOICE_MAPPING_FRENCH_NEUTRAL_PROFESSIONAL, EMOTION_VOICE_MAPPING
            
            if len(EMOTION_VOICE_MAPPING) < 7:
                logging.getLogger(__name__).error(f"‚ùå Syst√®me √©motions incomplet: {len(EMOTION_VOICE_MAPPING)} √©motions")
                return False
            
            logging.getLogger(__name__).info(f"‚úÖ Syst√®me √©motions valid√©: {len(EMOTION_VOICE_MAPPING)} √©motions")
            
        except ImportError:
            logging.getLogger(__name__).warning("‚ö†Ô∏è Service TTS non disponible pour validation")
        
        # 5. Test performance globale
        if hasattr(manager, 'get_performance_metrics'):
            metrics = manager.get_performance_metrics()
            
            if not metrics.get('introduction_ready', False):
                logging.getLogger(__name__).error("‚ùå Syst√®me non pr√™t pour introduction")
                return False
            
            cache_total = sum(metrics.get('cache_size', {}).values())
            # Cache peut √™tre vide au d√©marrage, c'est normal
            logging.getLogger(__name__).info(f"‚úÖ Performance valid√©e: {cache_total} r√©ponses en cache")
        
        # 6. Test de g√©n√©ration de r√©ponse fonctionnelle
        if hasattr(manager, 'generate_agent_response'):
            try:
                response, emotion = await manager.generate_agent_response(
                    "michel_dubois_animateur", 
                    "test", 
                    "test", 
                    []
                )
                if len(response) > 5:
                    logging.getLogger(__name__).info(f"‚úÖ G√©n√©ration r√©ponse valid√©e: {response[:30]}...")
                else:
                    logging.getLogger(__name__).warning(f"‚ö†Ô∏è R√©ponse courte: {response}")
            except Exception as e:
                logging.getLogger(__name__).warning(f"‚ö†Ô∏è Erreur g√©n√©ration r√©ponse (non bloquante): {e}")
        
        logging.getLogger(__name__).info("üéâ SYST√àME COMPLET VALID√â AVEC SUCC√àS !")
        return True
        
    except Exception as e:
        logging.getLogger(__name__).error(f"‚ùå Erreur validation syst√®me: {e}")
        return False

async def run_regression_tests() -> bool:
    """Tests de r√©gression pour √©viter les r√©gressions futures"""
    
    logging.getLogger(__name__).info("üß™ D√âMARRAGE TESTS DE R√âGRESSION...")
    
    try:
        # Test 1: Initialisation sans erreur
        manager = await initialize_multi_agent_system()
        assert manager is not None, "Manager non initialis√©"
        
        # Test 2: Agents fran√ßais uniquement
        for agent_id, agent in manager.agents.items():
            prompt = agent["system_prompt"]
            assert "FRAN√áAIS" in prompt or "fran√ßais" in prompt, f"Agent {agent_id} non fran√ßais"
            assert "generate response" not in prompt.lower(), f"'generate response' dans {agent_id}"
        
        # Test 3: Voix neutres sans accent
        voice_mapping = {
            "michel_dubois_animateur": "JBFqnCBsd6RMkjVDRZzb",
            "sarah_johnson_journaliste": "EXAVITQu4vr4xnSDxMaL",
            "marcus_thompson_expert": "VR6AewLTigWG4xSOukaG"
        }
        
        for agent_id, expected_voice in voice_mapping.items():
            actual_voice = manager.agents[agent_id]["voice_id"]
            assert actual_voice == expected_voice, f"Voix incorrecte {agent_id}: {actual_voice}"
        
        # Test 4: Performance < 4 secondes
        start = time.time()
        response, emotion = await manager.generate_agent_response("michel_dubois_animateur", "test", "test", [])
        duration = time.time() - start
        assert duration < 4.0, f"Performance d√©grad√©e: {duration:.3f}s"
        
        # Test 5: R√©ponses en fran√ßais
        assert len(response) > 5, "R√©ponse trop courte"
        # Test basique: pas de mots anglais courants
        english_words = ["the", "and", "generate response", "i am", "you are"]
        response_lower = response.lower()
        for word in english_words:
            assert word not in response_lower, f"Mot anglais d√©tect√©: {word}"
        
        logging.getLogger(__name__).info("‚úÖ TOUS LES TESTS DE R√âGRESSION PASS√âS")
        return True
        
    except Exception as e:
        logging.getLogger(__name__).error(f"‚ùå √âCHEC TESTS DE R√âGRESSION: {e}")
        return False

# ==========================================
# D√âTECTION AUTOMATIQUE DU TYPE D'EXERCICE
# ==========================================

def detect_exercise_from_metadata(metadata: str) -> tuple[MultiAgentConfig, dict]:
    """D√©tecte automatiquement le type d'exercice et extrait les donn√©es utilisateur"""
    logging.getLogger(__name__).info("üîç D√âTECTION AUTOMATIQUE EXERCICE MULTI-AGENTS")
    logging.getLogger(__name__).info("="*60)
    logging.getLogger(__name__).info(f"üì• M√©tadonn√©es re√ßues: '{metadata}'")
    
    try:
        import json
        data = json.loads(metadata) if metadata else {}
        logging.getLogger(__name__).info(f"üìã Donn√©es pars√©es: {data}")
        logging.getLogger(__name__).info(f"üìã Cl√©s disponibles: {list(data.keys()) if data else []}")
        
        # Extraction du type d'exercice avec fallbacks
        exercise_type = data.get('exercise_type', 'studio_debate_tv')
        if not exercise_type or exercise_type == 'null':
            exercise_type = 'studio_debate_tv'
        
        # Extraction des donn√©es utilisateur avec fallbacks
        user_data = {
            'user_name': data.get('user_name', 'Participant'),
            'user_subject': data.get('user_subject', 'votre pr√©sentation'),
        }
        
        # Si user_subject est vide, essayer 'topic'
        if not user_data['user_subject'] or user_data['user_subject'] == 'Sujet non d√©fini':
            user_data['user_subject'] = data.get('topic', 'votre pr√©sentation')
        
        # Si user_name est vide, essayer 'user_id'
        if not user_data['user_name'] or user_data['user_name'] == 'Participant':
            user_data['user_name'] = data.get('user_id', 'Participant')
        
        logging.getLogger(__name__).info(f"üéØ Type d√©tect√©: '{exercise_type}'")
        logging.getLogger(__name__).info(f"üë§ Utilisateur: {user_data['user_name']}")
        logging.getLogger(__name__).info(f"üìã Sujet: {user_data['user_subject']}")
        
        # Mapping des types d'exercices vers les configurations multi-agents
        exercise_mapping = {
            'studio_situations_pro': ExerciseTemplates.get_studio_situations_pro_config,
            'studio_debate_tv': ExerciseTemplates.get_studio_debate_tv_config,
            'studio_debatPlateau': ExerciseTemplates.get_studio_debate_tv_config,
            'studio_job_interview': ExerciseTemplates.studio_job_interview,
            'studio_entretienEmbauche': ExerciseTemplates.studio_job_interview,
            'studio_boardroom': ExerciseTemplates.studio_boardroom,
            'studio_reunionDirection': ExerciseTemplates.studio_boardroom,
            'studio_sales_conference': ExerciseTemplates.studio_sales_conference,
            'studio_conferenceVente': ExerciseTemplates.studio_sales_conference,
            'studio_keynote': ExerciseTemplates.studio_keynote,
            'studio_conferencePublique': ExerciseTemplates.studio_keynote,
        }
        
        if exercise_type in exercise_mapping:
            config = exercise_mapping[exercise_type]()
            logging.getLogger(__name__).info(f"‚úÖ Configuration multi-agents s√©lectionn√©e: {config.exercise_id}")
            logging.getLogger(__name__).info(f"   Agents: {[agent.name for agent in config.agents]}")
            return config, user_data
        else:
            logging.getLogger(__name__).warning(f"‚ö†Ô∏è Type inconnu '{exercise_type}', utilisation d√©bat TV par d√©faut")
            return ExerciseTemplates.get_studio_debate_tv_config(), user_data
            
    except Exception as e:
        logging.getLogger(__name__).error(f"‚ùå Erreur d√©tection exercice: {e}")
        logging.getLogger(__name__).info("üîÑ Fallback vers d√©bat TV")
        return ExerciseTemplates.get_studio_debate_tv_config(), {'user_name': 'Participant', 'user_subject': 'votre pr√©sentation'}


# ==========================================
# FONCTIONS SP√âCIALIS√âES PAR TYPE D'EXERCICE
# ==========================================

async def start_debate_tv_system(ctx: JobContext):
    """D√©marre le syst√®me sp√©cialis√© pour d√©bat TV"""
    
    logging.getLogger(__name__).info("üé¨ === D√âMARRAGE SYST√àME D√âBAT TV ===")
    logging.getLogger(__name__).info("üé≠ Agents: Michel Dubois (Animateur), Sarah Johnson (Journaliste), Marcus Thompson (Expert)")
    
    # Configuration sp√©cifique d√©bat TV
    exercise_config = {
        'type': 'studio_debate_tv',
        'agents': ['michel_dubois_animateur', 'sarah_johnson_journaliste', 'marcus_thompson_expert'],
        'scenario': 'debate_tv',
        'voice_mapping': {
            'michel_dubois_animateur': 'George',
            'sarah_johnson_journaliste': 'Bella', 
            'marcus_thompson_expert': 'Arnold'
        }
    }
    
    # D√©marrage du syst√®me avec configuration d√©bat TV
    return await start_enhanced_multiagent_system(ctx, exercise_config)

async def start_situations_pro_system(ctx: JobContext):
    """D√©marre le syst√®me sp√©cialis√© pour situations professionnelles"""
    
    logging.getLogger(__name__).info("üé≠ === D√âMARRAGE SYST√àME SITUATIONS PRO ===")
    logging.getLogger(__name__).info("üé≠ Agents: Thomas (Coach), Sophie (RH), Marc (Consultant)")
    
    # Configuration sp√©cifique situations pro
    exercise_config = {
        'type': 'studio_situations_pro',
        'agents': ['thomas_expert', 'sophie_rh', 'marc_consultant'],
        'scenario': 'situations_pro',
        'voice_mapping': {
            'thomas_expert': 'George',
            'sophie_rh': 'Bella',
            'marc_consultant': 'Arnold'
        }
    }
    
    # D√©marrage du syst√®me avec configuration situations pro
    return await start_enhanced_multiagent_system(ctx, exercise_config)

async def start_enhanced_multiagent_system(ctx: JobContext, exercise_config: dict):
    """D√©marre le syst√®me multi-agents avec configuration sp√©cifique"""
    
    exercise_type = exercise_config['type']
    agents = exercise_config['agents']
    
    logging.getLogger(__name__).info(f"üöÄ Initialisation syst√®me multi-agents: {exercise_type}")
    logging.getLogger(__name__).info(f"üé≠ Agents configur√©s: {agents}")
    
    # ‚úÖ V√âRIFICATION CRITIQUE
    if exercise_type == 'studio_debate_tv':
        logging.getLogger(__name__).info("‚úÖ CONFIRMATION: D√©marrage syst√®me D√âBAT TV")
        if 'michel_dubois_animateur' not in agents:
            logging.getLogger(__name__).error("‚ùå ERREUR: Michel Dubois manquant pour d√©bat TV")
            agents = ['michel_dubois_animateur', 'sarah_johnson_journaliste', 'marcus_thompson_expert']
            logging.getLogger(__name__).info(f"üîß CORRECTION: Agents corrig√©s: {agents}")
    elif exercise_type == 'studio_situations_pro':
        logging.getLogger(__name__).info("‚úÖ CONFIRMATION: D√©marrage syst√®me SITUATIONS PRO")
        if 'thomas_expert' not in agents:
            logging.getLogger(__name__).error("‚ùå ERREUR: Thomas manquant pour situations pro")
            agents = ['thomas_expert', 'sophie_rh', 'marc_consultant']
            logging.getLogger(__name__).info(f"üîß CORRECTION: Agents corrig√©s: {agents}")
    
    # Suite de la logique existante...
    try:
        # 1. √âTABLIR LA CONNEXION LIVEKIT
        logging.getLogger(__name__).info("üîó √âtablissement de la connexion LiveKit multi-agents...")
        await ctx.connect()
        logging.getLogger(__name__).info("‚úÖ Connexion LiveKit multi-agents √©tablie avec succ√®s")
        # 3. G√âN√âRATION INTRODUCTION AVEC CACHE REDIS
        logging.getLogger(__name__).info("üé¨ G√©n√©ration introduction...")
        
        # R√©cup√©ration user_data depuis le contexte
        user_data = {
            'user_name': getattr(ctx, 'user_name', 'notre invit√©'),
            'user_subject': getattr(ctx, 'user_subject', 'un sujet passionnant')
        }
        
        # G√©n√©ration ou r√©cup√©ration depuis cache
        try:
            intro_text, intro_audio = await manager.generate_introduction(exercise_type, user_data)
            logging.getLogger(__name__).info(f"‚úÖ Introduction g√©n√©r√©e: {len(intro_text)} caract√®res, {len(intro_audio)} bytes audio")
            
            # Diffusion de l'introduction
            if intro_audio and len(intro_audio) > 0:
                # Cr√©er un track audio pour l'introduction
                audio_source = rtc.AudioSource(sample_rate=24000, num_channels=1)
                track = rtc.LocalAudioTrack.create_audio_track("introduction", audio_source)
                
                # Publier le track
                await ctx.room.local_participant.publish_track(track, rtc.TrackPublishOptions())
                logging.getLogger(__name__).info("üéµ Introduction audio diffus√©e")
                
                # Attendre la fin de l'introduction
                import asyncio
                await asyncio.sleep(len(intro_audio) / 24000)  # Dur√©e approximative
            else:
                logging.getLogger(__name__).warning("‚ö†Ô∏è Pas d'audio d'introduction g√©n√©r√©")
                
        except Exception as e:
            logging.getLogger(__name__).error(f"‚ùå Erreur g√©n√©ration introduction: {e}")
            # Introduction de fallback
            intro_text = f"Bienvenue dans notre studio de d√©bat TV ! Je suis Michel Dubois, votre animateur."
            logging.getLogger(__name__).info("üîß Introduction de fallback utilis√©e")

        
        # 2. VALIDATION COMPL√àTE DU SYST√àME OBLIGATOIRE
        logging.getLogger(__name__).info("üîç VALIDATION COMPL√àTE DU SYST√àME MULTI-AGENTS")
        logging.getLogger(__name__).info("="*60)
        
        # ‚úÖ INITIALISATION AVEC EXERCISE_TYPE CORRECT
        logging.getLogger(__name__).info(f"üéØ Initialisation syst√®me: {exercise_type}")
        manager = await initialize_multi_agent_system(exercise_type)
        
        # Validation compl√®te obligatoire
        is_valid = await validate_complete_system(manager)
        
        if not is_valid:
            logging.getLogger(__name__).error("‚ùå VALIDATION SYST√àME √âCHOU√âE - ARR√äT")
            raise RuntimeError("Syst√®me multi-agents non valid√©")
        
        logging.getLogger(__name__).info("‚úÖ SYST√àME VALID√â - D√âMARRAGE AGENT LIVEKIT")
        
        # 3. DIAGNOSTIC APPROFONDI DES M√âTADONN√âES
        logging.getLogger(__name__).info("üîç DIAGNOSTIC APPROFONDI DES M√âTADONN√âES")
        logging.getLogger(__name__).info("="*60)
        
        metadata = None
        metadata_found_from = "AUCUNE"
        
        # V√©rification m√©tadonn√©es room
        if hasattr(ctx, 'room') and ctx.room and hasattr(ctx.room, 'metadata'):
            room_metadata = ctx.room.metadata
            if room_metadata:
                metadata = room_metadata
                metadata_found_from = "ROOM"
                logging.getLogger(__name__).info(f"‚úÖ M√©tadonn√©es trouv√©es depuis: {metadata_found_from}")
                logging.getLogger(__name__).info(f"üìã Contenu: {room_metadata}")
        
        # V√©rification m√©tadonn√©es participants si pas trouv√©es dans room
        if not metadata and hasattr(ctx, 'room') and ctx.room:
            await asyncio.sleep(2)  # Attendre les participants
            
            for participant_id, participant in ctx.room.remote_participants.items():
                participant_metadata = getattr(participant, 'metadata', None)
                if participant_metadata:
                    metadata = participant_metadata
                    metadata_found_from = f"PARTICIPANT_{participant_id}"
                    logging.getLogger(__name__).info(f"‚úÖ M√©tadonn√©es trouv√©es depuis: {metadata_found_from}")
                    logging.getLogger(__name__).info(f"üìã Contenu: {participant_metadata}")
                    break
        
        # V√©rification m√©tadonn√©es participant local
        if not metadata and hasattr(ctx, 'room') and ctx.room and ctx.room.local_participant:
            local_metadata = getattr(ctx.room.local_participant, 'metadata', None)
            if local_metadata:
                metadata = local_metadata
                metadata_found_from = "LOCAL_PARTICIPANT"
                logging.getLogger(__name__).info(f"‚úÖ M√©tadonn√©es trouv√©es depuis: {metadata_found_from}")
                logging.getLogger(__name__).info(f"üìã Contenu: {local_metadata}")
        
        # 4. S√âLECTION ET INITIALISATION DE LA CONFIGURATION MULTI-AGENTS
        logging.getLogger(__name__).info("üéØ S√âLECTION CONFIGURATION MULTI-AGENTS")
        
        if metadata:
            logging.getLogger(__name__).info(f"üìã Utilisation m√©tadonn√©es: {metadata}")
            config, user_data = detect_exercise_from_metadata(metadata)
        else:
            logging.getLogger(__name__).warning("‚ö†Ô∏è Aucune m√©tadonn√©e trouv√©e, utilisation configuration par d√©faut")
            if exercise_type == 'studio_debate_tv':
                config = ExerciseTemplates.get_studio_debate_tv_config()
            elif exercise_type == 'studio_situations_pro':
                config = ExerciseTemplates.get_studio_situations_pro_config()
            else:
                config = ExerciseTemplates.get_studio_debate_tv_config()
            user_data = {'user_name': 'Participant', 'user_subject': 'votre pr√©sentation'}
        
        logging.getLogger(__name__).info("="*60)
        logging.getLogger(__name__).info(f"üé≠ CONFIGURATION MULTI-AGENTS S√âLECTIONN√âE:")
        logging.getLogger(__name__).info(f"   ID: {config.exercise_id}")
        logging.getLogger(__name__).info(f"   Nom: {config.exercise_id}")
        logging.getLogger(__name__).info(f"   Agents: {[agent.name for agent in config.agents]}")
        logging.getLogger(__name__).info(f"   Utilisateur: {user_data['user_name']}")
        logging.getLogger(__name__).info(f"   Sujet: {user_data['user_subject']}")
        logging.getLogger(__name__).info("="*60)
        
        # 5. D√âMARRAGE DU SERVICE MULTI-AGENTS
        logging.getLogger(__name__).info(f"üöÄ D√©marrage service multi-agents: {config.exercise_id}")
        
        service = MultiAgentLiveKitService(config, user_data)
        await service.run_session(ctx)
        
    except Exception as e:
        logging.getLogger(__name__).error(f"‚ùå ERREUR CRITIQUE dans le syst√®me multi-agents: {e}")
        logging.getLogger(__name__).error("D√©tails de l'erreur:", exc_info=True)
        
        # Fallback vers le syst√®me simple si √©chec
        logging.getLogger(__name__).info("üîÑ Tentative de fallback vers syst√®me simple...")
        try:
            from main import legacy_entrypoint
            await legacy_entrypoint(ctx)
        except Exception as fallback_error:
            logging.getLogger(__name__).error(f"‚ùå M√™me le fallback √©choue: {fallback_error}")
            raise

# ==========================================
# POINT D'ENTR√âE PRINCIPAL MULTI-AGENTS
# ==========================================

async def multiagent_entrypoint(ctx: JobContext):
    """Point d'entr√©e principal pour le syst√®me multi-agents avec d√©tection automatique"""
    
    # ‚úÖ DIAGNOSTIC OBLIGATOIRE
    logging.getLogger(__name__).info(f"üîç MULTI-AGENT ENTRYPOINT: D√©marrage pour room {ctx.room.name}")
    
    # ‚úÖ R√âCUP√âRATION EXERCISE_TYPE DEPUIS LE CONTEXTE OU D√âTECTION
    exercise_type = getattr(ctx, 'exercise_type', None)
    if not exercise_type:
        # Fallback vers d√©tection depuis le nom de room
        from unified_entrypoint import detect_exercise_from_context
        exercise_type = await detect_exercise_from_context(ctx)
    
    logging.getLogger(__name__).info(f"üéØ EXERCISE_TYPE RE√áU: {exercise_type}")
    
    # ‚úÖ ROUTAGE CORRECT SELON EXERCISE_TYPE
    if exercise_type == 'studio_debate_tv':
        logging.getLogger(__name__).info("üé¨ D√âMARRAGE SYST√àME D√âBAT TV")
        return await start_debate_tv_system(ctx)
    elif exercise_type == 'studio_situations_pro':
        logging.getLogger(__name__).info("üé≠ D√âMARRAGE SYST√àME SITUATIONS PRO")
        return await start_situations_pro_system(ctx)
    else:
        logging.getLogger(__name__).warning(f"‚ö†Ô∏è Exercise type non reconnu: {exercise_type}, fallback vers d√©bat TV")
        return await start_debate_tv_system(ctx)


async def main():
    """Fonction principale avec validation compl√®te"""
    
    try:
        logging.getLogger(__name__).info("üöÄ D√âMARRAGE ELOQUENCE MULTI-AGENTS R√âVOLUTIONNAIRE")
        
        # Initialisation syst√®me
        manager = await initialize_multi_agent_system("studio_debate_tv")
        
        # Validation compl√®te obligatoire
        is_valid = await validate_complete_system(manager)
        
        if not is_valid:
            logging.getLogger(__name__).error("‚ùå VALIDATION SYST√àME √âCHOU√âE - ARR√äT")
            return False
        
        logging.getLogger(__name__).info("‚úÖ SYST√àME VALID√â - D√âMARRAGE AGENT LIVEKIT")
        
        # Tests de r√©gression
        regression_ok = await run_regression_tests()
        if not regression_ok:
            logging.getLogger(__name__).error("‚ùå TESTS DE R√âGRESSION √âCHOU√âS - ARR√äT")
            return False
        
        logging.getLogger(__name__).info("‚úÖ TOUS LES TESTS PASS√âS - SYST√àME PR√äT")
        return True
        
    except Exception as e:
        logging.getLogger(__name__).error(f"‚ùå Erreur fatale: {e}")
        return False

if __name__ == "__main__":
    """Point d'entr√©e principal du worker LiveKit multi-agents"""
    logging.getLogger(__name__).info("üéØ D√âMARRAGE WORKER LIVEKIT MULTI-AGENTS STUDIO SITUATIONS PRO")
    
    # Test de validation compl√®te avant d√©marrage
    try:
        validation_success = asyncio.run(main())
        if not validation_success:
            logging.getLogger(__name__).error("üí• √âCHEC VALIDATION - ARR√äT DU SYST√àME")
            exit(1)
    except Exception as e:
        logging.getLogger(__name__).error(f"üí• ERREUR VALIDATION: {e}")
        exit(1)
    
    # Configuration WorkerOptions avec l'entrypoint multi-agents
    worker_options = agents.WorkerOptions(
        entrypoint_fnc=multiagent_entrypoint
    )
    
    logging.getLogger(__name__).info("üéØ WorkerOptions configur√© avec syst√®me multi-agents")
    logging.getLogger(__name__).info(f"   - Syst√®me multi-agents: ‚úÖ")
    logging.getLogger(__name__).info(f"   - Agents configur√©s: Michel Dubois, Sarah Johnson, Marcus Thompson, etc.")
    logging.getLogger(__name__).info(f"   - Gestion des personnalit√©s: ‚úÖ")
    logging.getLogger(__name__).info(f"   - Voix distinctes: ‚úÖ")
    logging.getLogger(__name__).info(f"   - Identification correcte: ‚úÖ")
    logging.getLogger(__name__).info(f"   - Validation compl√®te: ‚úÖ")
    
    # Point d'entr√©e officiel avec CLI LiveKit
    agents.cli.run_app(worker_options)