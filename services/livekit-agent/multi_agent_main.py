"""
Point d'entr√©e principal pour le syst√®me multi-agents Studio Situations Pro
Utilise directement MultiAgentManager avec les vrais agents configur√©s
"""
import asyncio
import logging
import os
from typing import Dict, Any, List, Optional
from dataclasses import dataclass
from datetime import datetime, timedelta
from dotenv import load_dotenv
from livekit import agents, rtc
from livekit.agents import (
    Agent,
    AgentSession,
    JobContext,
    RunContext,
    function_tool,
    llm,
)
from livekit.plugins import openai, silero
from vosk_stt_interface import VoskSTTFixed as VoskSTT

# Imports du syst√®me multi-agents
from multi_agent_config import (
    MultiAgentConfig, 
    AgentPersonality, 
    InteractionStyle,
    ExerciseTemplates
)
from multi_agent_manager import MultiAgentManager

# Charger les variables d'environnement
load_dotenv()

# Configuration avec logs d√©taill√©s pour debug
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Log des variables d'environnement critiques (sans exposer les secrets)
logger.info("üîç DIAGNOSTIC MULTI-AGENTS: Variables d'environnement")
logger.info(f"   OPENAI_API_KEY pr√©sente: {'Oui' if os.getenv('OPENAI_API_KEY') else 'Non'}")
logger.info(f"   MISTRAL_BASE_URL: {os.getenv('MISTRAL_BASE_URL', 'Non d√©finie')}")

# URLs des services
MISTRAL_API_URL = os.getenv('MISTRAL_BASE_URL', 'http://mistral-conversation:8001/v1/chat/completions')
VOSK_STT_URL = os.getenv('VOSK_STT_URL', 'http://vosk-stt:8002')

class MultiAgentLiveKitService:
    """Service LiveKit int√©gr√© avec le gestionnaire multi-agents"""
    
    def __init__(self, multi_agent_config: MultiAgentConfig, user_data: dict = None):
        self.config = multi_agent_config
        self.manager = MultiAgentManager(multi_agent_config)
        self.session: Optional[AgentSession] = None
        self.room = None
        self.is_running = False
        self.user_data = user_data or {'user_name': 'Participant', 'user_subject': 'votre pr√©sentation'}
        
        logger.info(f"üé≠ MultiAgentLiveKitService initialis√© pour: {multi_agent_config.exercise_id}")
        logger.info(f"üë§ Utilisateur: {self.user_data['user_name']}, Sujet: {self.user_data['user_subject']}")
        logger.info(f"   Nombre d'agents: {len(multi_agent_config.agents)}")
        for agent in multi_agent_config.agents:
            logger.info(f"   - {agent.name} ({agent.role}) - Style: {agent.interaction_style.value}")
        
    async def initialize_components(self):
        """Initialise les composants LiveKit avec fallbacks robustes"""
        components = {}
        
        # VAD avec fallback
        try:
            vad = silero.VAD.load()
            components['vad'] = vad
            logger.info("‚úÖ VAD Silero charg√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur VAD: {e}")
            raise
            
        # STT avec fallback Vosk ‚Üí OpenAI
        try:
            stt = self.create_vosk_stt_with_fallback()
            components['stt'] = stt
            logger.info("‚úÖ STT avec fallback cr√©√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur STT: {e}")
            raise
            
        # LLM avec fallback
        try:
            llm_instance = self.create_mistral_llm()
            components['llm'] = llm_instance
            logger.info("‚úÖ LLM OpenAI cr√©√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur LLM: {e}")
            raise
            
        # TTS sp√©cialis√© pour multi-agents
        try:
            tts = await self.create_multiagent_tts()
            components['tts'] = tts
            logger.info("‚úÖ TTS multi-agents cr√©√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur TTS: {e}")
            raise
            
        return components
    
    def create_vosk_stt_with_fallback(self):
        """Cr√©e une interface STT avec Vosk en principal et OpenAI en fallback"""
        logger.info("üîÑ [STT-MULTI-AGENTS] Initialisation STT avec logique de fallback (Vosk ‚Üí OpenAI)")
        
        # Tentative 1: Vosk (rapide et √©conomique)
        try:
            vosk_stt = VoskSTT(
                vosk_url=VOSK_STT_URL,
                language="fr",
                sample_rate=16000
            )
            
            # Reset automatique
            def enhanced_clear_user_turn():
                logger.debug("üîÑ [STT-MULTI-AGENTS] Clear user turn avec reset Vosk")
                if hasattr(vosk_stt, '_reset_recognizer'):
                    vosk_stt._reset_recognizer()
            
            vosk_stt.clear_user_turn = enhanced_clear_user_turn
            
            logger.info("‚úÖ [STT-MULTI-AGENTS] VOSK STT ACTIV√â AVEC SUCC√àS")
            return vosk_stt
        except Exception as vosk_error:
            logger.error(f"‚ùå [STT-MULTI-AGENTS] √âCHEC STT Vosk: {vosk_error}")
            
        # Fallback: OpenAI Whisper
        try:
            logger.warning("‚ö†Ô∏è [STT-MULTI-AGENTS] Basculement vers OpenAI Whisper (fallback)")
            api_key = os.getenv('OPENAI_API_KEY')
            if not api_key:
                raise RuntimeError("OPENAI_API_KEY manquante pour le fallback")
                
            openai_stt = openai.STT(
                model="whisper-1",
                language="fr",
                api_key=api_key,
            )
            logger.warning("‚ö†Ô∏è [STT-MULTI-AGENTS] OPENAI STT ACTIV√â (FALLBACK)")
            return openai_stt
        except Exception as openai_error:
            logger.error(f"‚ùå [STT-MULTI-AGENTS] √âchec STT OpenAI fallback: {openai_error}")
            raise RuntimeError(f"Impossible de cr√©er STT (Vosk: {vosk_error}, OpenAI: {openai_error})")

    def create_mistral_llm(self):
        """Cr√©e un LLM configur√© pour utiliser OpenAI (plus stable)"""
        api_key = os.getenv('OPENAI_API_KEY')
        logger.info(f"üîç Configuration OpenAI LLM Multi-Agents - Mod√®le: gpt-4o-mini")
        
        return openai.LLM(
            model="gpt-4o-mini",
            api_key=api_key,
        )

    async def create_multiagent_tts(self):
        """Cr√©e un syst√®me TTS dynamique qui peut changer de voix selon l'agent"""
        api_key = os.getenv('OPENAI_API_KEY')
        
        if not api_key:
            logger.warning("‚ö†Ô∏è OPENAI_API_KEY manquante, utilisation Silero TTS")
            return silero.TTS()
        
        # Stocker les configurations de voix pour chaque agent
        self.voice_configs = {}
        for agent in self.config.agents:
            voice = agent.voice_config.get('voice', 'alloy')
            speed = agent.voice_config.get('speed', 1.0)
            self.voice_configs[agent.agent_id] = {
                'voice': voice,
                'speed': speed,
                'name': agent.name
            }
            logger.info(f"üé≠ Configuration voix pour {agent.name}: {voice} (vitesse: {speed})")
        
        # Cr√©er un TTS par d√©faut avec la voix du mod√©rateur
        moderator = None
        for agent in self.config.agents:
            if agent.interaction_style == InteractionStyle.MODERATOR:
                moderator = agent
                break
        
        if not moderator:
            moderator = self.config.agents[0]
            
        default_voice = moderator.voice_config.get('voice', 'alloy')
        
        try:
            tts = openai.TTS(
                voice=default_voice,
                api_key=api_key,
                model="tts-1",
                base_url="https://api.openai.com/v1"
            )
            logger.info(f"‚úÖ TTS OpenAI cr√©√© avec voix par d√©faut: {default_voice}")
            return tts
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è OpenAI TTS √©chou√©: {e}, utilisation Silero")
            return silero.TTS()

    def create_multiagent_agent(self) -> Agent:
        """Cr√©e un agent LiveKit configur√© pour le syst√®me multi-agents"""
        try:
            # Instructions combin√©es pour tous les agents
            primary_agent = self.config.agents[0]
            
            # Trouver le mod√©rateur ou utiliser le premier agent
            moderator = None
            for agent in self.config.agents:
                if agent.interaction_style == InteractionStyle.MODERATOR:
                    moderator = agent
                    break
            
            if not moderator:
                moderator = primary_agent
            
            # Instructions syst√®me int√©gr√©es (forcer l'usage de l'outil d'orchestration)
            system_instructions = f"""Tu es {moderator.name}, {moderator.role} dans une simulation multi-agents Studio Situations Pro.

            üéØ AGENTS PR√âSENTS DANS LA SIMULATION:
            {chr(10).join([f"‚Ä¢ {agent.name}: {agent.role} ({agent.interaction_style.value})" for agent in self.config.agents])}

            üéØ TON R√îLE EN TANT QUE {moderator.name}:
            {moderator.system_prompt}

            üìã CONTEXTE SIMULATION: {self.config.exercise_id}
            - Gestion des tours: {self.config.turn_management}
            - Dur√©e maximale: {self.config.max_duration_minutes} minutes
            - R√®gles d'interaction: {self.config.interaction_rules}

            üîß INSTRUCTIONS SP√âCIALES MULTI-AGENTS:
            - Pr√©sente-toi TOUJOURS avec ton vrai nom: {moderator.name}
            - Tu repr√©sentes l'agent principal mais coordonnes avec les autres
            - Adapte ton style: {moderator.interaction_style.value}
            - Mentionne les autres participants selon le contexte
            - Utilise un style professionnel adapt√© √† la situation
            - Garde tes r√©ponses courtes et engageantes (2-3 phrases max)
            - Identifie-toi clairement dans chaque message

            üõ†Ô∏è OUTILS DISPONIBLES:
            - generate_multiagent_response(user_message: str): orchestre la r√©ponse multi-agents (Michel + Sarah + Marcus) et g√©n√®re les r√©actions secondaires.

            üö® R√àGLE CRITIQUE D'ORCHESTRATION:
            - √Ä CHAQUE message utilisateur, APPELLE TOUJOURS l'outil generate_multiagent_response avec le message exact de l'utilisateur.
            - Ne r√©ponds JAMAIS directement sans utiliser cet outil.
            - Utilise la sortie de l'outil comme contenu final, sans la paraphraser.

            üé™ EXEMPLE DE R√âPONSE:
            "Bonjour ! Je suis {moderator.name}, votre {moderator.role}. [Ta r√©ponse professionnelle ici]"

            IMPORTANT: Dans chaque message, commence par ton nom r√©el pour une identification claire."""

            agent = Agent(
                instructions=system_instructions,
                tools=[self.generate_multiagent_response],
            )
            
            logger.info(f"üéØ Agent multi-agents cr√©√©: {moderator.name} ({moderator.role})")
            return agent
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation agent multi-agents: {e}")
            raise

    @function_tool
    async def generate_multiagent_response(self, user_message: str) -> str:
        """G√©n√®re une r√©ponse orchestr√©e du syst√®me multi-agents avec voix appropri√©e"""
        try:
            logger.info(f"üé≠ Orchestration multi-agents pour: {user_message[:50]}...")
            
            # Utiliser le MultiAgentManager pour orchestrer la r√©ponse
            response_data = await self.manager.handle_user_input(user_message)
            
            # R√©cup√©rer l'agent principal qui r√©pond
            primary_agent_id = response_data.get('primary_speaker')
            primary_response = response_data.get('primary_response', '')
            
            # Identifier l'agent et pr√©parer les r√©ponses vocales
            responses_to_speak = []
            
            if primary_agent_id and primary_agent_id in self.manager.agents:
                agent = self.manager.agents[primary_agent_id]
                logger.info(f"üó£Ô∏è {agent.name} ({agent.role}) r√©pond")
                
                # Ajouter la r√©ponse principale
                responses_to_speak.append({
                    'agent': agent,
                    'text': primary_response,
                    'delay': 0
                })
                
                # Ajouter les r√©ponses secondaires si pr√©sentes
                secondary_responses = response_data.get('secondary_responses', [])
                for sec_resp in secondary_responses:
                    sec_agent_id = sec_resp.get('agent_id')
                    if sec_agent_id in self.manager.agents:
                        sec_agent = self.manager.agents[sec_agent_id]
                        responses_to_speak.append({
                            'agent': sec_agent,
                            'text': sec_resp.get('reaction', ''),
                            'delay': sec_resp.get('delay_ms', 1500)
                        })
            
            # Faire parler chaque agent avec sa propre voix
            if hasattr(self, 'session') and self.session and responses_to_speak:
                await self.speak_multiple_agents_robust(responses_to_speak)
            
            # Retourner un texte format√© pour le log/display
            formatted_text = f"[{responses_to_speak[0]['agent'].name}]: {responses_to_speak[0]['text']}"
            for resp in responses_to_speak[1:]:
                formatted_text += f"\n[{resp['agent'].name}]: {resp['text']}"
            
            return formatted_text
            
        except Exception as e:
            logger.error(f"‚ùå Erreur orchestration multi-agents: {e}")
            return "[Syst√®me]: Je rencontre un probl√®me technique. Pouvez-vous reformuler ?"
    
    async def speak_multiple_agents_robust(self, responses_to_speak: list):
        """Version robuste avec retry et fallbacks multiples"""
        for resp_data in responses_to_speak:
            agent = resp_data['agent']
            text = resp_data['text']
            delay = resp_data['delay']

            # Attendre le d√©lai
            if delay and delay > 0:
                await asyncio.sleep(delay / 1000.0)

            # Nettoyer un √©ventuel pr√©fixe "Nom: " pour √©viter doublons au TTS
            sanitized_text = self._strip_name_prefix(agent, text)

            # Retry avec fallbacks progressifs
            success = False
            for attempt in range(3):
                try:
                    if attempt == 0:
                        # Tentative 1: TTS avec voix sp√©cifique
                        voice_dbg = agent.voice_config.get('voice', 'alloy')
                        logger.info(f"üîä {agent.name} parle avec voix {voice_dbg} (tentative {attempt+1})")
                        await self._speak_with_agent_voice_safe(agent, sanitized_text)
                    elif attempt == 1:
                        # Tentative 2: TTS par d√©faut avec nom
                        await self.session.say(text=f"{agent.name}: {sanitized_text}")
                    else:
                        # Tentative 3: Fallback minimal
                        await self.session.say(text=sanitized_text)

                    success = True
                    logger.info(f"‚úÖ {agent.name} a parl√© (tentative {attempt+1})")
                    break

                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Tentative {attempt+1} √©chou√©e pour {agent.name}: {e}")
                    if attempt < 2:
                        await asyncio.sleep(0.2)  # Pause avant retry

            if not success:
                logger.error(f"‚ùå Impossible de faire parler {agent.name}")

    async def _speak_with_agent_voice_safe(self, agent: AgentPersonality, text: str):
        """M√©thode s√©curis√©e pour parler avec la voix de l'agent via session.say avec TTS temporaire"""

        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            raise Exception("Pas de cl√© OpenAI")

        voice = agent.voice_config.get('voice', 'alloy')
        speed = agent.voice_config.get('speed', 1.0)

        # Cr√©er temporairement un TTS avec la bonne voix et l'injecter le temps d'un say
        temp_tts = openai.TTS(
            voice=voice,
            api_key=api_key,
            model="tts-1",
            speed=speed
        )

        original_tts = getattr(self.session, '_tts', None)
        try:
            self.session._tts = temp_tts
            await self.session.say(text=f"{agent.name}: {text}")
        finally:
            if original_tts is not None:
                self.session._tts = original_tts

    def _strip_name_prefix(self, agent: AgentPersonality, text: str) -> str:
        """Supprime un √©ventuel pr√©fixe "Nom:" pour √©viter double annonce au TTS."""
        if not text:
            return text
        first_name = agent.name.split()[0]
        candidates = [agent.name, first_name]
        cleaned = text
        for cand in candidates:
            for sep in [":", "-", "‚Äî"]:
                prefix = f"{cand}{sep}"
                if cleaned.strip().lower().startswith(prefix.lower()):
                    cleaned = cleaned.strip()[len(prefix):].lstrip()
        return cleaned
    
    async def update_tts_voice(self, agent: AgentPersonality):
        """Met √† jour dynamiquement la voix TTS pour correspondre √† l'agent"""
        try:
            if not hasattr(self, 'voice_configs'):
                return
                
            voice_config = self.voice_configs.get(agent.agent_id)
            if not voice_config:
                return
            
            api_key = os.getenv('OPENAI_API_KEY')
            if not api_key:
                return
                
            # Cr√©er un nouveau TTS avec la voix de l'agent
            new_voice = voice_config['voice']
            new_speed = voice_config['speed']
            
            logger.info(f"üîÑ Changement voix TTS: {new_voice} pour {agent.name}")
            
            # Note: Dans une vraie impl√©mentation, on devrait pouvoir changer
            # dynamiquement la voix de la session, mais LiveKit ne le supporte
            # pas encore directement. Pour l'instant, on log juste le changement.
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Impossible de changer la voix TTS: {e}")
    
    async def generate_orchestrated_welcome(self) -> str:
        """G√©n√®re un message de bienvenue orchestr√© avec toutes les personnalit√©s"""
        try:
            # R√©cup√©rer les donn√©es utilisateur
            user_name = self.user_data.get('user_name', 'Participant')
            user_subject = self.user_data.get('user_subject', 'votre pr√©sentation')
            
            # Trouver le mod√©rateur pour l'introduction
            moderator = None
            for agent in self.config.agents:
                if agent.interaction_style == InteractionStyle.MODERATOR:
                    moderator = agent
                    break
            
            if not moderator:
                moderator = self.config.agents[0]
            
            # Construire le message de bienvenue personnalis√©
            welcome_parts = []
            
            # Introduction personnalis√©e du mod√©rateur
            welcome_parts.append(f"[{moderator.name}]: Bonjour {user_name} et bienvenue dans Studio Situations Pro !")
            
            # Pr√©sentation du contexte selon l'exercice avec mention du sujet
            if "debate" in self.config.exercise_id:
                welcome_parts.append(f"[{moderator.name}]: Nous sommes ici pour d√©battre de {user_subject}.")
            elif "interview" in self.config.exercise_id:
                welcome_parts.append(f"[{moderator.name}]: Nous allons discuter de votre candidature concernant {user_subject}.")
            elif "boardroom" in self.config.exercise_id:
                welcome_parts.append(f"[{moderator.name}]: Bienvenue dans notre conseil pour pr√©senter {user_subject}.")
            elif "sales" in self.config.exercise_id:
                welcome_parts.append(f"[{moderator.name}]: Nous sommes pr√™ts √† entendre votre pr√©sentation sur {user_subject}.")
            elif "keynote" in self.config.exercise_id:
                welcome_parts.append(f"[{moderator.name}]: Bienvenue pour votre keynote sur {user_subject}.")
            
            # Pr√©sentation des autres participants (rapide)
            other_agents = [a for a in self.config.agents if a.agent_id != moderator.agent_id]
            if other_agents:
                participants = ", ".join([a.name for a in other_agents[:2]])  # Max 2 pour rester court
                welcome_parts.append(f"[{moderator.name}]: Avec nous aujourd'hui : {participants}.")
            
            # Invitation personnalis√©e √† commencer
            welcome_parts.append(f"[{moderator.name}]: {user_name}, quand vous √™tes pr√™t(e), commencez votre pr√©sentation sur {user_subject}.")
            
            welcome_message = " ".join(welcome_parts)
            logger.info(f"üì¢ Message de bienvenue personnalis√©: {welcome_message[:100]}...")
            
            return welcome_message
            
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration message bienvenue: {e}")
            return f"[Syst√®me]: Bienvenue {self.user_data.get('user_name', 'Participant')} dans Studio Situations Pro."

    async def run_session(self, ctx: JobContext):
        """Execute la session multi-agents avec gestion robuste"""
        self.is_running = True
        
        try:
            logger.info(f"üöÄ D√©marrage session multi-agents: {self.config.exercise_id}")
            
            # Connexion avec retry
            await self.connect_with_retry(ctx)
            
            # Stocker ctx.room pour compatibilit√© LiveKit 1.2.3
            self.room = ctx.room
            logger.info("‚úÖ Room stock√©e pour compatibilit√© LiveKit 1.2.3")
            
            # Initialisation des composants
            components = await self.initialize_components()
            
            # Cr√©ation de l'agent multi-agents
            agent = self.create_multiagent_agent()
            
            # Cr√©ation de la session
            self.session = AgentSession(**components)
            
            # Initialisation du manager multi-agents
            self.manager.initialize_session()
            
            # D√©marrage de la session
            await self.session.start(agent=agent, room=ctx.room)
            
            # Message de bienvenue orchestr√©
            welcome_message = await self.generate_orchestrated_welcome()
            await self.session.say(text=welcome_message)
                
            logger.info(f"‚úÖ Session multi-agents {self.config.exercise_id} d√©marr√©e avec succ√®s")
            
            # Maintenir la session active
            await self.maintain_session()
            
        except Exception as e:
            logger.error(f"‚ùå Erreur session multi-agents: {e}")
            raise
        finally:
            self.is_running = False
            
    async def connect_with_retry(self, ctx: JobContext, max_retries: int = 3):
        """Connexion avec retry automatique"""
        for attempt in range(max_retries):
            try:
                await ctx.connect()
                logger.info(f"‚úÖ Connexion multi-agents r√©ussie (tentative {attempt + 1})")
                return
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è √âchec connexion multi-agents tentative {attempt + 1}: {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2 ** attempt)
                else:
                    raise
                    
    async def maintain_session(self):
        """Maintient la session active avec surveillance"""
        heartbeat_interval = 30  # secondes
        max_silent_duration = 300  # 5 minutes sans activit√©
        last_activity = datetime.now()
        
        while self.is_running:
            try:
                await asyncio.sleep(heartbeat_interval)
                
                # V√©rifier l'√©tat de la connexion
                if hasattr(self, 'room') and self.room:
                    if hasattr(self.room, 'connection_state'):
                        state = self.room.connection_state
                        if state != rtc.ConnectionState.CONN_CONNECTED:
                            logger.warning(f"‚ö†Ô∏è √âtat de connexion multi-agents d√©grad√©: {state}")
                            
                    # V√©rifier l'activit√© r√©cente
                    current_time = datetime.now()
                    if (current_time - last_activity).seconds > max_silent_duration:
                        logger.info("üì¢ Envoi d'un message de maintien multi-agents")
                        
                        # Utiliser le mod√©rateur pour maintenir l'engagement
                        moderator = None
                        for agent in self.config.agents:
                            if agent.interaction_style == InteractionStyle.MODERATOR:
                                moderator = agent
                                break
                        
                        if moderator and self.session:
                            await self.session.say(
                                text=f"Je suis {moderator.name}, je suis toujours l√† pour vous accompagner. N'h√©sitez pas √† continuer notre simulation !"
                            )
                        last_activity = current_time
                    
                    logger.debug(f"üíì Heartbeat multi-agents OK - Session active depuis {(current_time - last_activity).seconds}s")
                else:
                    logger.warning("‚ö†Ô∏è Room multi-agents non disponible, arr√™t de la surveillance")
                    break
                    
            except Exception as e:
                logger.error(f"‚ùå Erreur dans la surveillance multi-agents: {e}")
                await asyncio.sleep(5)  # Attendre avant de retry


# ==========================================
# D√âTECTION AUTOMATIQUE DU TYPE D'EXERCICE
# ==========================================

def detect_exercise_from_metadata(metadata: str) -> tuple[MultiAgentConfig, dict]:
    """D√©tecte automatiquement le type d'exercice et extrait les donn√©es utilisateur"""
    logger.info("üîç D√âTECTION AUTOMATIQUE EXERCICE MULTI-AGENTS")
    logger.info("="*60)
    logger.info(f"üì• M√©tadonn√©es re√ßues: '{metadata}'")
    
    try:
        import json
        data = json.loads(metadata) if metadata else {}
        exercise_type = data.get('exercise_type', 'studio_debate_tv')
        
        # Extraire les donn√©es utilisateur
        user_data = {
            'user_name': data.get('user_name', 'Participant'),
            'user_subject': data.get('user_subject', 'votre pr√©sentation'),
        }
        
        logger.info(f"üéØ Type d√©tect√©: '{exercise_type}'")
        logger.info(f"üë§ Utilisateur: {user_data['user_name']}")
        logger.info(f"üìã Sujet: {user_data['user_subject']}")
        
        # Mapping des types d'exercices vers les configurations multi-agents
        exercise_mapping = {
            'studio_situations_pro': ExerciseTemplates.studio_debate_tv,
            'studio_debate_tv': ExerciseTemplates.studio_debate_tv,
            'studio_debatPlateau': ExerciseTemplates.studio_debate_tv,
            'studio_job_interview': ExerciseTemplates.studio_job_interview,
            'studio_entretienEmbauche': ExerciseTemplates.studio_job_interview,
            'studio_boardroom': ExerciseTemplates.studio_boardroom,
            'studio_reunionDirection': ExerciseTemplates.studio_boardroom,
            'studio_sales_conference': ExerciseTemplates.studio_sales_conference,
            'studio_conferenceVente': ExerciseTemplates.studio_sales_conference,
            'studio_keynote': ExerciseTemplates.studio_keynote,
            'studio_conferencePublique': ExerciseTemplates.studio_keynote,
        }
        
        if exercise_type in exercise_mapping:
            config = exercise_mapping[exercise_type]()
            logger.info(f"‚úÖ Configuration multi-agents s√©lectionn√©e: {config.exercise_id}")
            logger.info(f"   Agents: {[agent.name for agent in config.agents]}")
            return config, user_data
        else:
            logger.warning(f"‚ö†Ô∏è Type inconnu '{exercise_type}', utilisation d√©bat TV par d√©faut")
            return ExerciseTemplates.studio_debate_tv(), user_data
            
    except Exception as e:
        logger.error(f"‚ùå Erreur d√©tection exercice: {e}")
        logger.info("üîÑ Fallback vers d√©bat TV")
        return ExerciseTemplates.studio_debate_tv(), {'user_name': 'Participant', 'user_subject': 'votre pr√©sentation'}


# ==========================================
# POINT D'ENTR√âE PRINCIPAL MULTI-AGENTS
# ==========================================

async def multiagent_entrypoint(ctx: JobContext):
    """Point d'entr√©e principal pour le syst√®me multi-agents Studio Situations Pro"""
    logger.info("üé≠ D√âMARRAGE SYST√àME MULTI-AGENTS STUDIO SITUATIONS PRO")
    logger.info("="*70)
    
    try:
        # 1. √âTABLIR LA CONNEXION LIVEKIT
        logger.info("üîó √âtablissement de la connexion LiveKit multi-agents...")
        await ctx.connect()
        logger.info("‚úÖ Connexion LiveKit multi-agents √©tablie avec succ√®s")
        
        # 2. DIAGNOSTIC ET D√âTECTION DU TYPE D'EXERCICE
        logger.info("üîç DIAGNOSTIC COMPLET - D√âTECTION EXERCICE MULTI-AGENTS")
        logger.info("="*60)
        
        # Analyser les m√©tadonn√©es pour d√©tecter le type d'exercice
        metadata = None
        metadata_found_from = "AUCUNE"
        
        # V√©rification m√©tadonn√©es room
        if hasattr(ctx, 'room') and ctx.room and hasattr(ctx.room, 'metadata'):
            room_metadata = ctx.room.metadata
            if room_metadata:
                metadata = room_metadata
                metadata_found_from = "ROOM"
                logger.info(f"‚úÖ M√©tadonn√©es trouv√©es depuis: {metadata_found_from}")
        
        # V√©rification m√©tadonn√©es participants si pas trouv√©es dans room
        if not metadata and hasattr(ctx, 'room') and ctx.room:
            await asyncio.sleep(2)  # Attendre les participants
            
            for participant_id, participant in ctx.room.remote_participants.items():
                participant_metadata = getattr(participant, 'metadata', None)
                if participant_metadata:
                    metadata = participant_metadata
                    metadata_found_from = f"PARTICIPANT_{participant_id}"
                    logger.info(f"‚úÖ M√©tadonn√©es trouv√©es depuis: {metadata_found_from}")
                    break
        
        # 3. S√âLECTION ET INITIALISATION DE LA CONFIGURATION MULTI-AGENTS
        logger.info("üéØ S√âLECTION CONFIGURATION MULTI-AGENTS")
        
        if metadata:
            logger.info(f"üìã Utilisation m√©tadonn√©es: {metadata}")
            config, user_data = detect_exercise_from_metadata(metadata)
        else:
            logger.warning("‚ö†Ô∏è Aucune m√©tadonn√©e trouv√©e, utilisation configuration par d√©faut")
            config = ExerciseTemplates.studio_debate_tv()
            user_data = {'user_name': 'Participant', 'user_subject': 'votre pr√©sentation'}
        
        logger.info("="*60)
        logger.info(f"üé≠ CONFIGURATION MULTI-AGENTS S√âLECTIONN√âE:")
        logger.info(f"   ID: {config.exercise_id}")
        logger.info(f"   Utilisateur: {user_data['user_name']}")
        logger.info(f"   Sujet: {user_data['user_subject']}")
        logger.info(f"   Gestion tours: {config.turn_management}")
        logger.info(f"   Dur√©e max: {config.max_duration_minutes} min")
        logger.info(f"   Nombre d'agents: {len(config.agents)}")
        
        for i, agent in enumerate(config.agents, 1):
            logger.info(f"   Agent {i}: {agent.name} ({agent.role}) - {agent.interaction_style.value}")
            logger.info(f"            Voix: {agent.voice_config}")
        
        logger.info("="*60)
        
        # 4. D√âMARRAGE DU SERVICE MULTI-AGENTS
        logger.info(f"üöÄ D√©marrage service multi-agents: {config.exercise_id}")
        
        service = MultiAgentLiveKitService(config, user_data)
        await service.run_session(ctx)
        
    except Exception as e:
        logger.error(f"‚ùå ERREUR CRITIQUE dans le syst√®me multi-agents: {e}")
        logger.error("D√©tails de l'erreur:", exc_info=True)
        
        # Fallback vers le syst√®me simple si √©chec
        logger.info("üîÑ Tentative de fallback vers syst√®me simple...")
        try:
            from main import legacy_entrypoint
            await legacy_entrypoint(ctx)
        except Exception as fallback_error:
            logger.error(f"‚ùå M√™me le fallback √©choue: {fallback_error}")
            raise


if __name__ == "__main__":
    """Point d'entr√©e principal du worker LiveKit multi-agents"""
    logger.info("üéØ D√âMARRAGE WORKER LIVEKIT MULTI-AGENTS STUDIO SITUATIONS PRO")
    
    # Configuration WorkerOptions avec l'entrypoint multi-agents
    worker_options = agents.WorkerOptions(
        entrypoint_fnc=multiagent_entrypoint
    )
    
    logger.info("üéØ WorkerOptions configur√© avec syst√®me multi-agents")
    logger.info(f"   - Syst√®me multi-agents: ‚úÖ")
    logger.info(f"   - Agents configur√©s: Michel Dubois, Sarah Johnson, Marcus Thompson, etc.")
    logger.info(f"   - Gestion des personnalit√©s: ‚úÖ")
    logger.info(f"   - Voix distinctes: ‚úÖ")
    logger.info(f"   - Identification correcte: ‚úÖ")
    
    # Point d'entr√©e officiel avec CLI LiveKit
    agents.cli.run_app(worker_options)