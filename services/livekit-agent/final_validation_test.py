#!/usr/bin/env python3
"""
Test final de validation pour Enhanced Multi-Agent Manager
Valide tous les aspects critiques du syst√®me
"""

from enhanced_multi_agent_manager import get_enhanced_manager
from multi_agent_config import MultiAgentConfig

def main():
    print("üöÄ VALIDATION FINALE ENHANCED MULTI-AGENT MANAGER")
    print("=" * 60)
    
    try:
        # Configuration test
        config = MultiAgentConfig(
            exercise_id="studio_debate_tv",
            room_prefix="studio_debatPlateau",
            agents=[],
            interaction_rules={},
            turn_management="moderator_controlled"
        )
        
        # Test cr√©ation manager
        manager = get_enhanced_manager("test_key", "test_key", config)
        print("‚úÖ Enhanced Manager cr√©√© avec succ√®s")
        
        # Test agents fran√ßais
        print("\nüß™ VALIDATION DES PROMPTS FRAN√áAIS:")
        for agent_id, agent in manager.agents.items():
            system_prompt = agent["system_prompt"]
            
            # V√©rifications obligatoires
            assert "FRAN√áAIS" in system_prompt or "fran√ßais" in system_prompt, f"Agent {agent['name']} n'a pas de mention fran√ßaise"
            assert "INTERDICTION TOTALE" in system_prompt, f"Agent {agent['name']} n'a pas d'interdiction anglaise"
            assert "pas un assistant IA" in system_prompt, f"Agent {agent['name']} ne sp√©cifie pas qu'il n'est pas IA"
            
            print(f"‚úÖ Agent {agent['name']} configur√© en fran√ßais")
        
        # Test voix neutres
        print("\nüß™ VALIDATION DES VOIX NEUTRES:")
        expected_voices = ["JBFqnCBsd6RMkjVDRZzb", "EXAVITQu4vr4xnSDxMaL", "VR6AewLTigWG4xSOukaG"]
        for agent_id, agent in manager.agents.items():
            voice_id = agent["voice_id"]
            assert voice_id in expected_voices, f"Agent {agent['name']} a une voix non neutre: {voice_id}"
            print(f"‚úÖ Agent {agent['name']} a une voix neutre sans accent: {voice_id}")
        
        # Test d√©tection anglais
        print("\nüß™ VALIDATION D√âTECTION ANGLAIS:")
        assert manager._contains_english("I am an AI assistant"), "Anglais non d√©tect√©"
        assert not manager._contains_english("Je suis fran√ßais"), "Fran√ßais d√©tect√© comme anglais"
        print("‚úÖ D√©tection anglais/fran√ßais fonctionnelle")
        
        # Test syst√®me anti-r√©p√©tition
        print("\nüß™ VALIDATION SYST√àME ANTI-R√âP√âTITION:")
        agent_id = "michel_dubois_animateur"
        test_response = "Excellente question ! Laissez-moi y r√©fl√©chir..."
        manager._update_memory(agent_id, test_response)
        assert agent_id in manager.conversation_memory, "M√©moire non mise √† jour"
        assert manager.agents[agent_id]["name"] in manager.last_responses, "Derni√®re r√©ponse non enregistr√©e"
        print("‚úÖ Syst√®me anti-r√©p√©tition fonctionnel")
        
        # Test d√©tection √©motionnelle
        print("\nüß™ VALIDATION D√âTECTION √âMOTIONNELLE:")
        emotional_context = manager._detect_emotional_context("", "Excellente r√©ponse !", "michel_dubois_animateur")
        assert emotional_context.primary_emotion in ["enthousiasme", "autorit√©", "bienveillance", "neutre"], f"√âmotion inattendue: {emotional_context.primary_emotion}"
        assert 0.0 <= emotional_context.intensity <= 1.0, f"Intensit√© invalide: {emotional_context.intensity}"
        print(f"‚úÖ D√©tection √©motionnelle: {emotional_context.primary_emotion} ({emotional_context.intensity})")
        
        # Test rotation speakers
        print("\nüß™ VALIDATION ROTATION SPEAKERS:")
        import asyncio
        async def test_rotation():
            next_speaker = await manager.get_next_speaker("michel_dubois_animateur", "")
            assert next_speaker in ["sarah_johnson_journaliste", "marcus_thompson_expert"]
            print(f"‚úÖ Rotation apr√®s Michel: {next_speaker}")
            
            next_speaker = await manager.get_next_speaker("sarah_johnson_journaliste", "")
            assert next_speaker == "marcus_thompson_expert"
            print(f"‚úÖ Rotation apr√®s Sarah: {next_speaker}")
            
            next_speaker = await manager.get_next_speaker("marcus_thompson_expert", "")
            assert next_speaker == "michel_dubois_animateur"
            print(f"‚úÖ Rotation apr√®s Marcus: {next_speaker}")
        
        asyncio.run(test_rotation())
        
        print("\n" + "=" * 60)
        print("üéâ √âTAPE 1 COMPL√àTEMENT VALID√âE !")
        print("‚úÖ Enhanced Multi-Agent Manager op√©rationnel")
        print("‚úÖ Prompts r√©volutionnaires fran√ßais int√©gr√©s")
        print("‚úÖ Voix neutres sans accent configur√©es")
        print("‚úÖ Syst√®me anti-r√©p√©tition fonctionnel")
        print("‚úÖ D√©tection √©motionnelle active")
        print("‚úÖ Rotation intelligente des speakers")
        print("‚úÖ D√©tection anglais/fran√ßais op√©rationnelle")
        print("‚úÖ Tous les tests passent avec succ√®s !")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
