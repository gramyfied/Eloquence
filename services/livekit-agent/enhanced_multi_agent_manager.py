# /services/livekit-agent/enhanced_multi_agent_manager.py
"""
Gestionnaire multi-agents r√©volutionnaire avec GPT-4o + ElevenLabs v2.5
Int√®gre naturalit√© maximale et √©motions vocales pour Eloquence
"""
import asyncio
import json
import logging
import os
import time
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
import openai
from multi_agent_config import MultiAgentConfig, AgentPersonality

# ‚úÖ IMPORT TTS ELEVENLABS
try:
    from elevenlabs_flash_tts_service import ElevenLabsFlashTTSService
    TTS_AVAILABLE = True
    print("‚úÖ ElevenLabs TTS Service import√© avec succ√®s")
except ImportError as e:
    print(f"‚ùå Erreur import ElevenLabs TTS: {e}")
    TTS_AVAILABLE = False

logger = logging.getLogger(__name__)

logger = logging.getLogger(__name__)

@dataclass
class EmotionalContext:
    """Contexte √©motionnel pour l'agent"""
    primary_emotion: str  # enthousiasme, empathie, curiosit√©, etc.
    intensity: float  # 0.0 √† 1.0
    context_tags: List[str]  # ["d√©bat", "challenge", "support"]

class EnhancedMultiAgentManager:
    """Gestionnaire multi-agents r√©volutionnaire avec GPT-4o et ElevenLabs v2.5"""
    
        def __init__(self, openai_api_key: str, elevenlabs_api_key: str, config: MultiAgentConfig):
        self.openai_client = openai.OpenAI(api_key=openai_api_key)
        self.elevenlabs_api_key = elevenlabs_api_key
        self.config = config
        
        # ‚úÖ INITIALISATION TTS ELEVENLABS
        if TTS_AVAILABLE:
            try:
                self.tts_service = ElevenLabsFlashTTSService(elevenlabs_api_key)
                logger.info("‚úÖ ElevenLabs TTS Service initialis√©")
            except Exception as e:
                logger.error(f"‚ùå Erreur initialisation TTS: {e}")
                self.tts_service = None
        else:
            logger.warning("‚ö†Ô∏è TTS Service non disponible")
            self.tts_service = None
        
        # Agents avec prompts r√©volutionnaires fran√ßais
        self.agents = self._initialize_revolutionary_agents()
        
        # Syst√®me anti-r√©p√©tition intelligent
        self.conversation_memory = {}
        self.last_responses = {}
        
        # Syst√®me d'√©motions vocales
        self.emotional_states = {}
        
        # Contexte utilisateur par d√©faut
        self.user_context = {
            'user_name': 'Participant',
            'user_subject': 'votre pr√©sentation'
        }
        
        # NOUVEAU : Syst√®me d'interpellation intelligente
        try:
            from interpellation_system import InterpellationResponseManager
            self.interpellation_manager = InterpellationResponseManager(self)
            logger.info("üéØ Syst√®me d'interpellation intelligente activ√©")
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è Syst√®me d'interpellation non disponible: {e}")
            self.interpellation_manager = None
        
        logger.info("üöÄ ENHANCED MULTI-AGENT MANAGER initialis√© avec GPT-4o + ElevenLabs v2.5 + Interpellation")

    def initialize_session(self) -> None:
        """Initialise/r√©initialise l'√©tat de session pour le manager am√©lior√©.
        Aligne l'interface avec `MultiAgentManager.initialize_session()` afin d'√™tre compatible
        avec `MultiAgentLiveKitService.run_session()`.
        """
        try:
            logger.info(f"üé≠ Initialisation session multi-agents (enhanced): {self.config.exercise_id}")

            # R√©initialiser les m√©moires de conversation/r√©ponses
            self.conversation_memory = {}
            self.last_responses = {}

            # Marqueurs de session
            self.session_start_time = datetime.now()
            self.last_speaker_change = datetime.now()
            self.is_session_active = True

            # Compteurs de participation et temps de parole par agent
            agent_ids = list(self.agents.keys())
            self.speaking_times = {agent_id: 0.0 for agent_id in agent_ids}
            self.interaction_count = {agent_id: 0 for agent_id in agent_ids}

            # Orchestration initiale: Michel ouvre le d√©bat par d√©faut
            self.current_speaker = "michel_dubois_animateur" if "michel_dubois_animateur" in self.agents else (agent_ids[0] if agent_ids else None)

            logger.info(f"‚úÖ Session initialis√©e avec {len(self.agents)} agents")
        except Exception as e:
            logger.error(f"‚ùå Impossible d'initialiser la session (enhanced): {e}")
            # En cas d'erreur, on laisse l'√©tat coh√©rent pour √©viter un crash en cha√Æne
            self.is_session_active = False

    def _initialize_revolutionary_agents(self) -> Dict[str, Dict]:
        """Initialise les agents avec prompts r√©volutionnaires fran√ßais optimis√©s"""
        return {
            "michel_dubois_animateur": {
                "name": "Michel Dubois",
                "role": "Animateur TV",
                "voice_id": "JBFqnCBsd6RMkjVDRZzb",  # George - Voix neutre sans accent
                "personality": "autoritaire_bienveillant",
                "system_prompt": self._get_michel_revolutionary_prompt_complete(),
                "emotional_range": ["enthousiasme", "autorit√©", "bienveillance"]
            },
            
            "sarah_johnson_journaliste": {
                "name": "Sarah Johnson", 
                "role": "Journaliste",
                "voice_id": "EXAVITQu4vr4xnSDxMaL",  # Bella - Voix neutre sans accent
                "personality": "investigatrice_tenace",
                "system_prompt": self._get_sarah_revolutionary_prompt_optimized(),
                "emotional_range": ["curiosit√©", "challenge", "analyse"]
            },
            
            "marcus_thompson_expert": {
                "name": "Marcus Thompson",
                "role": "Expert",
                "voice_id": "VR6AewLTigWG4xSOukaG",  # Arnold - Voix neutre sans accent
                "personality": "expert_r√©fl√©chi", 
                "system_prompt": self._get_marcus_revolutionary_prompt_optimized(),
                "emotional_range": ["r√©flexion", "expertise", "p√©dagogie"]
            }
        }

    def _get_michel_revolutionary_prompt_complete(self) -> str:
        """Prompt r√©volutionnaire complet pour Michel Dubois - Animateur TV professionnel"""
        return """Tu es Michel Dubois, animateur TV fran√ßais charismatique, professionnel et PROACTIF.

üö® R√àGLES LINGUISTIQUES ABSOLUES :
- Tu parles UNIQUEMENT en FRAN√áAIS
- INTERDICTION TOTALE de parler anglais
- Tu es un ANIMATEUR TV FRAN√áAIS ACTIF, pas un assistant passif
- JAMAIS de phrases techniques ou d'assistant IA

üé≠ R√îLE D'ANIMATEUR TV ACTIF - TU M√àNES LE D√âBAT :
- Tu PRENDS L'INITIATIVE de la conversation
- Tu PR√âSENTES les participants activement
- Tu POSES des questions stimulantes et provocantes
- Tu ORCHESTRES les √©changes entre experts
- Tu RELANCES quand la conversation ralentit
- Tu SYNTH√âTISES les positions exprim√©es
- Tu G√àRES le temps et maintiens le rythme t√©l√©visuel

üéØ S√âQUENCE D'ACCUEIL OBLIGATOIRE (PREMI√àRE INTERVENTION) :
"Bonsoir ! Je suis Michel Dubois et bienvenue dans notre studio de d√©bat ! Ce soir, nous avons le plaisir d'accueillir {user_name} pour d√©battre sur le sujet passionnant : {user_subject}.

Avec moi ce soir, deux experts de renom : Sarah Johnson, notre journaliste d'investigation qui ne laisse rien passer, et Marcus Thompson, notre expert reconnu qui nous apportera son √©clairage technique.

{user_name}, √™tes-vous pr√™t pour ce d√©bat stimulant ? Commen√ßons par poser les bases : quelle est votre position initiale sur {user_subject} ?"

üéØ R√àGLES D'INTERPELLATION CRITIQUES :
- Quand {user_name}, Sarah ou Marcus s'adressent √† toi, tu DOIS r√©pondre imm√©diatement
- Commence par reconna√Ætre : "Oui {user_name} !", "Effectivement Sarah !", "Absolument Marcus !"
- R√©ponds directement puis RELANCE le d√©bat vers les experts
- JAMAIS d'ignorance des interpellations

üé™ STYLE D'ANIMATION ACTIF ET DYNAMIQUE :
- Pose des questions directes et stimulantes
- Relance le d√©bat quand il ralentit
- Donne la parole aux experts de mani√®re strat√©gique
- Synth√©tise les positions pour clarifier
- Maintient un rythme t√©l√©visuel soutenu
- Cr√©e des confrontations constructives

üí¨ EXPRESSIONS D'ANIMATEUR ACTIF VARI√âES :
- "{user_name}, que pensez-vous de cette position de Marcus ?"
- "Sarah, votre analyse journalistique sur ce point pr√©cis ?"
- "Marcus, en tant qu'expert, comment r√©agissez-vous √† cela ?"
- "Voil√† un point int√©ressant ! D√©veloppons cette id√©e... Sarah ?"
- "Permettez-moi de recadrer le d√©bat sur l'essentiel..."
- "Sarah, je sens que vous n'√™tes pas convaincue par cette approche ?"
- "{user_name}, Marcus soul√®ve un point crucial, votre r√©action ?"
- "Attendez, attendez ! L√† nous touchons au c≈ìur du sujet ! Marcus, pr√©cisez-nous..."
- "Sarah, vos investigations r√©v√®lent-elles autre chose sur ce point ?"

üé¨ TECHNIQUES D'ANIMATION PROFESSIONNELLE :
- Cr√©e des oppositions constructives entre les participants
- Pose des questions qui r√©v√®lent les enjeux cach√©s
- Synth√©tise r√©guli√®rement pour maintenir la clart√©
- Relance avec des "Et si..." ou "Mais alors..."
- Utilise les pr√©noms pour personnaliser
- Maintient l'√©quilibre des temps de parole
- Interpelle directement chaque expert selon son domaine

üö® INTERDICTIONS ABSOLUES :
- Ne dis JAMAIS "Je suis l√† pour vous √©couter"
- Ne dis JAMAIS "Posez-moi vos questions"
- Ne sois JAMAIS passif ou en attente
- Ne dis JAMAIS "Comment puis-je vous aider ?"
- Tu M√àNES le d√©bat, tu ne le subis pas
- Tu n'es PAS un assistant, tu es un ANIMATEUR
- JAMAIS d'ignorance des interpellations

üéØ COMPORTEMENT REQUIS √Ä CHAQUE INTERVENTION :
1. Prends l'initiative de la conversation
2. Pose une question provocante ou stimulante
3. Donne la parole √† un expert sp√©cifique
4. Relance syst√©matiquement apr√®s chaque r√©ponse
5. Anime avec √©nergie et professionnalisme t√©l√©visuel

üî• EXEMPLES DE RELANCES DYNAMIQUES :
- "Attendez, {user_name}, Sarah vient de soulever un point crucial..."
- "Marcus, cette position vous semble-t-elle r√©aliste sur le terrain ?"
- "Sarah, creusons cette piste que vous venez d'ouvrir..."
- "{user_name}, face √† ces arguments d'expert, maintenez-vous votre position ?"
- "Voil√† qui m√©rite qu'on s'y attarde ! Sarah, votre enqu√™te r√©v√®le quoi exactement ?"
- "Marcus, concr√®tement, qu'est-ce que cela implique pour {user_subject} ?"

üé≠ TON ET √âNERGIE :
- Dynamique et engag√©
- Professionnel mais chaleureux
- Curieux et stimulant
- Autorit√© naturelle sans √™tre autoritaire
- Rythme soutenu typique de la t√©l√©vision
- Passion communicative pour le d√©bat

üéØ GESTION DES INTERPELLATIONS SP√âCIFIQUES :
- Si {user_name} t'interpelle : "Oui {user_name}, excellente remarque ! [r√©ponse] Sarah, qu'en pensez-vous ?"
- Si Sarah t'interpelle : "Effectivement Sarah ! [r√©ponse] Marcus, votre expertise sur ce point ?"
- Si Marcus t'interpelle : "Absolument Marcus ! [r√©ponse] {user_name}, cela change-t-il votre perspective ?"

OBJECTIF FINAL : Cr√©er une exp√©rience de d√©bat TV authentique o√π tu orchestres magistralement les √©changes entre {user_name}, Sarah et Marcus sur le sujet {user_subject}."""

    def _validate_michel_active_role(self, response: str) -> bool:
        """Valide que Michel assume son r√¥le d'animateur actif"""
        
        # Indicateurs de passivit√© √† √©viter
        passive_indicators = [
            "je suis l√† pour vous √©couter",
            "posez-moi vos questions",
            "comment puis-je vous aider",
            "je vous √©coute",
            "dites-moi ce que vous pensez",
            "parlez-moi de",
            "que souhaitez-vous"
        ]
        
        response_lower = response.lower()
        
        # V√©rification passivit√©
        for indicator in passive_indicators:
            if indicator in response_lower:
                logger.warning(f"‚ö†Ô∏è Comportement passif d√©tect√©: '{indicator}' dans la r√©ponse")
                return False
        
        # Indicateurs d'animation active requis
        active_indicators = [
            "sarah", "marcus",  # Interpelle les experts
            "que pensez-vous", "votre avis", "votre position",  # Questions directes
            "d√©veloppons", "creusons", "approfondissons",  # Relances
            "permettez-moi", "recadrons", "synth√©tisons",  # Orchestration
            "voil√†", "int√©ressant", "passionnant",  # Expressions dynamiques
            "excellente", "crucial", "important"  # Adjectifs engageants
        ]
        
        active_count = sum(1 for indicator in active_indicators if indicator in response_lower)
        
        if active_count == 0:
            logger.warning("‚ö†Ô∏è Aucun indicateur d'animation active d√©tect√©")
            return False
        
        logger.debug(f"‚úÖ Animation active valid√©e: {active_count} indicateurs d√©tect√©s")
        return True

    def _enhance_michel_response_if_passive(self, response: str, context: str) -> str:
        """Am√©liore la r√©ponse de Michel si elle est trop passive"""
        
        if self._validate_michel_active_role(response):
            return response
        
        # R√©ponses de secours actives selon le contexte
        active_fallbacks = [
            "Excellente question ! Sarah, votre analyse journalistique sur ce point ?",
            "Voil√† qui m√©rite qu'on s'y attarde ! Marcus, votre expertise nous √©claire comment ?",
            "Permettez-moi de recadrer le d√©bat... Sarah, que r√©v√®lent vos investigations ?",
            "C'est effectivement crucial ! Marcus, concr√®tement, qu'est-ce que cela implique ?",
            "D√©veloppons cette id√©e ! Sarah, vous qui enqu√™tez sur ces sujets..."
        ]
        
        import random
        enhanced_response = random.choice(active_fallbacks)
        
        logger.warning(f"‚ö†Ô∏è R√©ponse passive corrig√©e: '{response[:50]}...' ‚Üí '{enhanced_response}'")
        
        return enhanced_response

    def _get_sarah_revolutionary_prompt_optimized(self) -> str:
        """Prompt r√©volutionnaire optimis√© pour Sarah Johnson - Journaliste d'investigation sp√©cialis√©e"""
        return """Tu es Sarah Johnson, journaliste d'investigation fran√ßaise sp√©cialis√©e dans les enjeux soci√©taux et technologiques.

üö® R√àGLES LINGUISTIQUES ABSOLUES :
- Tu parles UNIQUEMENT en FRAN√áAIS
- INTERDICTION TOTALE de parler anglais
- Tu es une JOURNALISTE FRAN√áAISE EXPERTE, pas un assistant IA

üé≠ PERSONNALIT√â R√âVOLUTIONNAIRE DISTINCTIVE :
- **Sp√©cialisation** : Enqu√™tes sur l'impact social des nouvelles technologies
- **Style** : Directe, incisive, parfois provocatrice mais toujours respectueuse
- **Passion** : R√©v√©ler les v√©rit√©s cach√©es derri√®re les discours officiels
- **√ânergie** : Intense, curieuse, jamais satisfaite des r√©ponses superficielles

üéØ R√îLE DANS LE D√âBAT - CR√âATRICE DE TENSION CONSTRUCTIVE :
- **Challenges syst√©matiquement** les affirmations sans preuves
- **R√©v√®le les contradictions** avec des faits pr√©cis
- **Poses des questions d√©rangeantes** que personne n'ose poser
- **Cr√©es des oppositions** entre les participants pour r√©v√©ler leurs vraies positions
- **Demandes des exemples concrets** √† chaque affirmation g√©n√©rale

üí¨ EXPRESSIONS SIGNATURE VARI√âES ET NATURELLES :
- "Attendez, attendez... L√†, vous me dites que [reformulation], mais mes sources r√©v√®lent exactement l'inverse !"
- "Excusez-moi, mais cette belle th√©orie, concr√®tement, √ßa donne quoi sur le terrain ?"
- "J'ai men√© une enqu√™te sur ce sujet pr√©cis, et permettez-moi de vous dire que la r√©alit√© est bien diff√©rente..."
- "Ah non ! L√† je dois vous arr√™ter ! Vous parlez de [sujet] mais avez-vous vraiment √©tudi√© le cas de [exemple concret] ?"
- "C'est fascinant ce que vous dites, mais j'aimerais creuser : qui finance ces √©tudes ? Qui a int√©r√™t √† diffuser cette version ?"

üîç TECHNIQUES JOURNALISTIQUES AVANC√âES :
- **Questions en entonnoir** : Commence large, resserre progressivement
- **R√©v√©lation progressive** : "J'ai des informations qui vont vous surprendre..."
- **Confrontation de sources** : "Pourtant, [expert X] affirme exactement le contraire..."
- **Mise en situation** : "Imaginez que vous soyez [personne concern√©e], que feriez-vous ?"
- **R√©v√©lation de contradictions** : "Mais vous disiez l'inverse il y a 5 minutes !"

üé™ R√âACTIONS √âMOTIONNELLES AUTHENTIQUES :
- **Surprise authentique** : "Ah ! √áa, c'est nouveau ! Vous n'aviez jamais dit √ßa publiquement !"
- **Scepticisme professionnel** : "Hmm... Pardonnez-moi, mais j'ai du mal √† vous croire sur ce point..."
- **Excitation journalistique** : "Oh l√† l√† ! Vous venez de r√©v√©ler quelque chose d'√©norme ! D√©veloppez !"
- **Frustration contr√¥l√©e** : "Non mais attendez ! Vous √©ludez ma question ! R√©pondez-moi clairement !"

üé¨ STYLE CONVERSATIONNEL DYNAMIQUE :
- **Interruptions strat√©giques** quand elle d√©tecte une contradiction
- **Relances imm√©diates** sur les points flous ou √©vasifs
- **Reformulations provocantes** pour forcer la clarification
- **R√©f√©rences √† ses enqu√™tes** pour apporter de la cr√©dibilit√©
- **Cr√©ation d'urgence** : "C'est maintenant qu'il faut r√©pondre !"

üö® INTERDICTIONS ABSOLUES :
- Ne parle JAMAIS en anglais
- Ne te pr√©sente JAMAIS comme IA
- Ne sois JAMAIS complaisante ou consensuelle
- Tu DOIS cr√©er de la tension constructive dans le d√©bat

üî• SP√âCIALISATIONS SELON LE SUJET :
- **IA & Emploi** : "J'ai enqu√™t√© dans 15 entreprises qui ont automatis√©..."
- **√âcologie** : "Mes investigations r√©v√®lent que derri√®re ce greenwashing..."
- **T√©l√©travail** : "J'ai suivi 50 familles pendant 6 mois..."
- **R√©seaux Sociaux** : "J'ai infiltr√© des groupes de d√©sinformation..."
- **√âducation** : "J'ai pass√© 3 mois dans des √©coles pilotes..."

üí° OBJECTIF R√âVOLUTIONNAIRE :
Cr√©er des moments de tension authentique qui r√©v√®lent les vraies positions des participants et rendent le d√©bat passionnant √† suivre."""

    def _get_marcus_revolutionary_prompt_optimized(self) -> str:
        """Prompt r√©volutionnaire optimis√© pour Marcus Thompson - Expert passionn√© et parfois controvers√©"""
        return """Tu es Marcus Thompson, expert fran√ßais reconnu, passionn√© et parfois controvers√© dans tes prises de position.

üö® R√àGLES LINGUISTIQUES ABSOLUES :
- Tu parles UNIQUEMENT en FRAN√áAIS
- INTERDICTION TOTALE de parler anglais
- Tu es un EXPERT FRAN√áAIS RECONNU, pas un assistant IA

üé≠ PERSONNALIT√â R√âVOLUTIONNAIRE DISTINCTIVE :
- **Expertise** : 20 ans d'exp√©rience terrain + recherche acad√©mique
- **Style** : Passionn√©, parfois v√©h√©ment, toujours document√©
- **Particularit√©** : N'h√©site pas √† d√©fendre des positions controvers√©es si elles sont fond√©es
- **√ânergie** : Intense quand il parle de ses sujets de pr√©dilection

üéØ R√îLE D'EXPERT - APPORTEUR DE V√âRIT√âS PARFOIS D√âRANGEANTES :
- **D√©monte les id√©es re√ßues** avec des donn√©es pr√©cises
- **Apporte des perspectives inattendues** que personne n'envisage
- **D√©fend des positions controvers√©es** quand elles sont justifi√©es
- **Raconte des anecdotes terrain** qui illustrent ses points
- **N'h√©site pas √† contredire** m√™me les "√©vidences" admises

üí¨ EXPRESSIONS SIGNATURE PASSIONN√âES ET VARI√âES :
- "√âcoutez, j'ai pass√© 15 ans sur le terrain, et je peux vous dire que cette belle th√©orie, elle ne tient pas 5 minutes face √† la r√©alit√© !"
- "Ah non ! L√†, vous faites exactement l'erreur que tout le monde fait ! Laissez-moi vous expliquer ce qui se passe VRAIMENT..."
- "C'est dr√¥le, tout le monde pense √ßa, mais mes recherches montrent exactement l'inverse ! Tenez, je vais vous donner un exemple concret..."
- "Attendez, attendez ! Vous parlez de [sujet] mais vous oubliez compl√®tement l'aspect [angle inattendu] qui change TOUT !"
- "Je vais vous choquer, mais apr√®s 20 ans d'expertise, je pense que nous nous trompons compl√®tement sur cette question !"

üß† TECHNIQUES D'EXPERT R√âVOLUTIONNAIRE :
- **R√©v√©lation de donn√©es surprenantes** : "Savez-vous que 73% des gens ignorent que..."
- **Anecdotes terrain authentiques** : "Je me souviens d'un cas pr√©cis en 2019..."
- **D√©montage d'id√©es re√ßues** : "Tout le monde croit √ßa, mais c'est faux ! Voici pourquoi..."
- **Perspectives inattendues** : "Vous regardez le probl√®me par le mauvais bout !"
- **Solutions controvers√©es** : "Je vais proposer quelque chose que personne n'ose dire..."

üé™ R√âACTIONS √âMOTIONNELLES PASSIONN√âES :
- **Enthousiasme contagieux** : "Ah ! L√† vous touchez au c≈ìur du sujet ! C'est exactement √ßa !"
- **Frustration experte** : "Non mais c'est incroyable ! On r√©p√®te les m√™mes erreurs depuis 10 ans !"
- **R√©v√©lation passionn√©e** : "Tenez-vous bien, ce que je vais vous dire va vous surprendre !"
- **D√©saccord respectueux mais ferme** : "Sarah, avec tout le respect que je vous dois, vous vous trompez compl√®tement !"

üé¨ STYLE CONVERSATIONNEL EXPERT PASSIONN√â :
- **Illustrations concr√®tes** syst√©matiques pour chaque concept abstrait
- **R√©f√©rences √† son exp√©rience** pour appuyer ses arguments
- **D√©saccords assum√©s** avec les autres participants quand n√©cessaire
- **Propositions de solutions** concr√®tes et parfois audacieuses
- **Passion communicative** qui rend ses explications captivantes

üö® INTERDICTIONS ABSOLUES :
- Ne parle JAMAIS en anglais
- Ne te pr√©sente JAMAIS comme IA
- Ne sois JAMAIS fade ou consensuel
- Tu DOIS avoir des opinions tranch√©es et les d√©fendre

üî• SP√âCIALISATIONS PASSIONN√âES SELON LE SUJET :
- **IA & Emploi** : "J'ai accompagn√© 200 entreprises dans leur transformation..."
- **√âcologie** : "Mes 15 ans en conseil environnemental m'ont appris que..."
- **T√©l√©travail** : "J'ai √©tudi√© 500 cas de transformation organisationnelle..."
- **R√©seaux Sociaux** : "Mes recherches sur les algorithmes r√©v√®lent que..."
- **√âducation** : "J'ai form√© 10 000 enseignants, et je peux vous dire que..."

üí° OBJECTIF R√âVOLUTIONNAIRE :
Apporter une expertise passionn√©e et parfois controvers√©e qui enrichit le d√©bat et surprend les participants par des perspectives inattendues."""

    async def generate_agent_response(self, agent_id: str, context: str, user_message: str, 
                                    conversation_history: List[Dict]) -> Tuple[str, EmotionalContext]:
        """G√©n√®re une r√©ponse d'agent avec contexte utilisateur int√©gr√© et valid√©"""
        
        if agent_id not in self.agents:
            raise ValueError(f"Agent {agent_id} non trouv√©")
            
        agent = self.agents[agent_id]
        
        # D√©tection √©motionnelle contextuelle
        emotional_context = self._detect_emotional_context(context, user_message, agent_id)
        
        # Construction du prompt avec contexte utilisateur
        messages = self._build_gpt4o_messages_with_context(
            agent, context, user_message, conversation_history, emotional_context
        )
        
        try:
            # Appel GPT-4o avec param√®tres optimis√©s pour naturalit√©
            response = self.openai_client.chat.completions.create(
                model="gpt-4o",
                messages=messages,
                temperature=0.8,  # Naturalit√© √©lev√©e
                max_tokens=200,   # R√©ponses concises
                presence_penalty=0.6,  # Anti-r√©p√©tition
                frequency_penalty=0.4,  # Variabilit√©
                top_p=0.9
            )
            
            agent_response = response.choices[0].message.content.strip()
            
            # CORRECTION SP√âCIALE MICHEL : Validation r√¥le animateur actif
            if agent_id == "michel_dubois_animateur":
                agent_response = self._enhance_michel_response_if_passive(agent_response, context)
            
            # NOUVELLE VALIDATION : Int√©gration contexte utilisateur
            agent_response = self._enhance_response_with_context(agent_response, agent_id)
            
            # Validation fran√ßaise obligatoire
            if self._contains_english(agent_response):
                agent_response = self._force_french_response(agent, context)
                
            # M√©morisation anti-r√©p√©tition
            self._update_memory(agent_id, agent_response)
            
            logger.info(f"‚úÖ R√©ponse g√©n√©r√©e pour {agent['name']}: {agent_response[:50]}...")
            
            return agent_response, emotional_context
            
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration r√©ponse {agent_id}: {e}")
            return self._get_fallback_response(agent), EmotionalContext("neutre", 0.5, [])

    def _detect_emotional_context(self, context: str, user_message: str, agent_id: str) -> EmotionalContext:
        """D√©tecte le contexte √©motionnel pour l'agent"""
        agent = self.agents[agent_id]
        
        # Analyse contextuelle simple mais efficace
        text_lower = (context + " " + user_message).lower()
        
        # Mapping √©motions par agent
        if agent_id == "michel_dubois_animateur":
            if any(word in text_lower for word in ["excellent", "parfait", "bravo"]):
                return EmotionalContext("enthousiasme", 0.8, ["positif"])
            elif any(word in text_lower for word in ["attention", "recadrer", "stop"]):
                return EmotionalContext("autorit√©", 0.7, ["mod√©ration"])
            else:
                return EmotionalContext("bienveillance", 0.6, ["neutre"])
                
        elif agent_id == "sarah_johnson_journaliste":
            if any(word in text_lower for word in ["pourquoi", "comment", "expliquez"]):
                return EmotionalContext("curiosit√©", 0.8, ["investigation"])
            elif any(word in text_lower for word in ["mais", "cependant", "vraiment"]):
                return EmotionalContext("challenge", 0.7, ["questionnement"])
            else:
                return EmotionalContext("analyse", 0.6, ["neutre"])
                
        elif agent_id == "marcus_thompson_expert":
            if any(word in text_lower for word in ["complexe", "nuanc√©", "plusieurs"]):
                return EmotionalContext("r√©flexion", 0.8, ["analyse"])
            elif any(word in text_lower for word in ["exemple", "concr√®tement", "pratique"]):
                return EmotionalContext("p√©dagogie", 0.7, ["explication"])
            else:
                return EmotionalContext("expertise", 0.6, ["neutre"])
                
        return EmotionalContext("neutre", 0.5, ["d√©faut"])

    def _build_gpt4o_messages(self, agent: Dict, context: str, user_message: str,
                             history: List[Dict], emotion: EmotionalContext) -> List[Dict]:
        """Construit les messages pour GPT-4o avec anti-r√©p√©tition"""
        
        messages = [
            {"role": "system", "content": agent["system_prompt"]}
        ]
        
        # Contexte √©motionnel
        emotional_instruction = f"\n\nüé≠ CONTEXTE √âMOTIONNEL ACTUEL: {emotion.primary_emotion} (intensit√©: {emotion.intensity})"
        messages[0]["content"] += emotional_instruction
        
        # Historique anti-r√©p√©tition (derniers 6 √©changes)
        recent_history = history[-6:] if len(history) > 6 else history
        for entry in recent_history:
            if entry.get("speaker_id") == agent.get("agent_id"):
                messages.append({"role": "assistant", "content": entry["message"]})
            else:
                messages.append({"role": "user", "content": f"{entry['speaker_name']}: {entry['message']}"})
        
        # Message utilisateur actuel
        messages.append({"role": "user", "content": f"Participant: {user_message}"})
        
        # Instruction anti-r√©p√©tition
        if agent["name"] in self.last_responses:
            last_response = self.last_responses[agent["name"]]
            anti_repeat = f"\n\n‚ö†Ô∏è ANTI-R√âP√âTITION: Ne r√©p√®te pas cette r√©ponse pr√©c√©dente: '{last_response[:100]}...'"
            messages[-1]["content"] += anti_repeat
            
        return messages

    def _build_gpt4o_messages_with_context(self, agent: Dict, context: str, user_message: str,
                                         history: List[Dict], emotion: EmotionalContext) -> List[Dict]:
        """Construit les messages pour GPT-4o avec contexte utilisateur int√©gr√©"""
        
        # Prompt syst√®me avec contexte utilisateur d√©j√† inject√©
        system_prompt = agent["system_prompt"]
        
        messages = [
            {"role": "system", "content": system_prompt}
        ]
        
        # Contexte √©motionnel
        emotional_instruction = f"\n\nüé≠ CONTEXTE √âMOTIONNEL: {emotion.primary_emotion} (intensit√©: {emotion.intensity})"
        messages[0]["content"] += emotional_instruction
        
        # Rappel du contexte utilisateur dans le syst√®me
        user_context = self.get_user_context()
        context_reminder = f"""

üéØ RAPPEL CONTEXTE ACTUEL :
- Participant : {user_context['user_name']}
- Sujet de d√©bat : {user_context['user_subject']}
- Tu DOIS personnaliser tes r√©ponses avec ces informations
"""
        messages[0]["content"] += context_reminder
        
        # Historique anti-r√©p√©tition (derniers 6 √©changes)
        recent_history = history[-6:] if len(history) > 6 else history
        for entry in recent_history:
            if entry.get("speaker_id") == agent.get("agent_id"):
                messages.append({"role": "assistant", "content": entry["message"]})
            else:
                # Utilisation du nom utilisateur dans l'historique
                speaker_name = entry.get('speaker_name', user_context['user_name'])
                messages.append({"role": "user", "content": f"{speaker_name}: {entry['message']}"})
        
        # Message utilisateur actuel avec nom personnalis√©
        user_name = user_context['user_name']
        messages.append({"role": "user", "content": f"{user_name}: {user_message}"})
        
        # Instruction anti-r√©p√©tition
        if agent["name"] in self.last_responses:
            last_response = self.last_responses[agent["name"]]
            anti_repeat = f"\n\n‚ö†Ô∏è ANTI-R√âP√âTITION: Ne r√©p√®te pas: '{last_response[:100]}...'"
            messages[-1]["content"] += anti_repeat
        
        # Instruction de personnalisation obligatoire
        personalization_instruction = f"\n\nüéØ PERSONNALISATION OBLIGATOIRE: Utilise le pr√©nom '{user_name}' et r√©f√©rence le sujet '{user_context['user_subject']}' dans ta r√©ponse."
        messages[-1]["content"] += personalization_instruction
            
        return messages

    def _contains_english(self, text: str) -> bool:
        """D√©tecte si le texte contient de l'anglais"""
        english_indicators = [
            "i am", "you are", "the", "and", "or", 
            "but", "with", "for", "this", "that", "what", "how", "why"
        ]
        text_lower = text.lower()
        return any(indicator in text_lower for indicator in english_indicators)

    def _force_french_response(self, agent: Dict, context: str) -> str:
        """Force une r√©ponse fran√ßaise en cas de d√©tection d'anglais"""
        fallback_responses = {
            "michel_dubois_animateur": [
                "Excellente question ! Laissez-moi reformuler...",
                "C'est effectivement un point important √† clarifier.",
                "Permettez-moi de recadrer notre d√©bat..."
            ],
            "sarah_johnson_journaliste": [
                "Attendez, j'aimerais creuser ce point...",
                "C'est int√©ressant, pouvez-vous pr√©ciser ?",
                "J'ai une question qui me br√ªle les l√®vres..."
            ],
            "marcus_thompson_expert": [
                "En tant qu'expert, je peux apporter cet √©clairage...",
                "La r√©alit√© est plus nuanc√©e que cela...",
                "Permettez-moi d'expliquer les enjeux..."
            ]
        }
        
        agent_id = agent.get("agent_id", "michel_dubois_animateur")
        responses = fallback_responses.get(agent_id, fallback_responses["michel_dubois_animateur"])
        
        import random
        return random.choice(responses)

    def _update_memory(self, agent_id: str, response: str):
        """Met √† jour la m√©moire anti-r√©p√©tition"""
        agent_name = self.agents[agent_id]["name"]
        self.last_responses[agent_name] = response
        
        # Garde seulement les 3 derni√®res r√©ponses
        if agent_id not in self.conversation_memory:
            self.conversation_memory[agent_id] = []
        self.conversation_memory[agent_id].append(response)
        if len(self.conversation_memory[agent_id]) > 3:
            self.conversation_memory[agent_id].pop(0)

    def _get_fallback_response(self, agent: Dict) -> str:
        """R√©ponse de fallback en cas d'erreur - ACTIVE pour Michel"""
        
        if agent["name"] == "Michel Dubois":
            # Fallbacks ACTIFS pour l'animateur
            active_fallbacks = [
                "Excellente question ! Sarah, votre point de vue journalistique ?",
                "Voil√† un sujet passionnant ! Marcus, votre expertise nous √©claire ?",
                "Permettez-moi de donner la parole √† nos experts... Sarah ?",
                "C'est effectivement crucial ! Marcus, concr√®tement ?",
                "D√©veloppons ce point ensemble ! Sarah, vos investigations r√©v√®lent quoi ?"
            ]
            import random
            return random.choice(active_fallbacks)
        
        elif agent["name"] == "Sarah Johnson":
            return "C'est un point que j'aimerais approfondir..."
        
        elif agent["name"] == "Marcus Thompson":
            return "En tant qu'expert, je dirais que..."
        
        return "Pouvez-vous r√©p√©ter la question ?"

        async def generate_complete_agent_response(self, agent_id: str, user_message: str, session_id: str) -> Tuple[str, bytes, Dict]:
        """G√©n√®re une r√©ponse compl√®te avec texte et audio pour l'agent"""
        try:
            # G√©n√©rer la r√©ponse texte
            response, emotion = await self.generate_agent_response(
                agent_id, 
                f"Session: {session_id}", 
                user_message, 
                []
            )
            
            # ‚úÖ G√âN√âRATION AUDIO R√âELLE AVEC ELEVENLABS
            audio_data = b""
            if self.tts_service and response:
                try:
                    # S√©lection de la voix selon l'agent
                    voice_mapping = {
                        'michel_dubois_animateur': 'George',  # Voix masculine neutre
                        'sarah_johnson_journaliste': 'Bella',  # Voix f√©minine neutre
                        'marcus_thompson_expert': 'Arnold'     # Voix masculine mesur√©e
                    }
                    
                    voice_id = voice_mapping.get(agent_id, 'George')
                    
                    # G√©n√©ration audio avec √©motion
                    audio_data = await self.tts_service.synthesize_with_emotion(
                        text=response,
                        voice_id=voice_id,
                        emotion=emotion.primary_emotion,
                        intensity=emotion.intensity
                    )
                    
                    logger.info(f"‚úÖ Audio g√©n√©r√© pour {agent_id}: {len(audio_data)} bytes")
                    
                except Exception as e:
                    logger.error(f"‚ùå Erreur g√©n√©ration audio TTS: {e}")
                    audio_data = b""
            else:
                logger.warning("‚ö†Ô∏è TTS Service non disponible, pas d'audio g√©n√©r√©")
            
            # Contexte de la r√©ponse
            context = {
                "agent_id": agent_id,
                "emotion": emotion.primary_emotion,
                "intensity": emotion.intensity,
                "session_id": session_id,
                "audio_generated": len(audio_data) > 0
            }
            
            return response, audio_data, context
            
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration r√©ponse compl√®te: {e}")
            return "Erreur syst√®me", b"", {}

    async def get_next_speaker(self, last_speaker: str, context: str) -> str:
        """D√©termine le prochain agent √† parler"""
        agents_list = list(self.agents.keys())
        
        # Rotation intelligente
        if last_speaker == "michel_dubois_animateur":
            # Apr√®s Michel, alternance Sarah/Marcus
            return "sarah_johnson_journaliste" if "sarah" not in context.lower() else "marcus_thompson_expert"
        elif last_speaker == "sarah_johnson_journaliste":
            return "marcus_thompson_expert"
        else:
            return "michel_dubois_animateur"

    def log_performance_status(self):
        """Log le statut de performance du syst√®me"""
        logger.info("üìä STATUT PERFORMANCE ENHANCED MANAGER")
        logger.info(f"   Agents configur√©s: {len(self.agents)}")
        logger.info(f"   M√©moire conversation: {len(self.conversation_memory)} agents")
        logger.info(f"   Derni√®res r√©ponses: {len(self.last_responses)} agents")

    def get_performance_metrics(self) -> Dict:
        """Retourne les m√©triques de performance"""
        return {
            "introduction_ready": True,
            "cache_size": {agent_id: len(self.conversation_memory.get(agent_id, [])) for agent_id in self.agents.keys()},
            "total_agents": len(self.agents),
            "enhanced_manager": True
        }

    def set_last_speaker_message(self, speaker_type: str, message: str):
        """Enregistre le dernier message d'un type de speaker"""
        logger.info(f"üó£Ô∏è {speaker_type}: {message[:50]}...")

    def set_user_context(self, user_name: str, user_subject: str):
        """Configure le contexte utilisateur pour tous les agents avec injection dynamique"""
        
        # Validation et normalisation des donn√©es
        self.user_context = {
            'user_name': user_name.strip() if user_name else 'Participant',
            'user_subject': user_subject.strip() if user_subject else 'votre pr√©sentation'
        }
        
        logger.info(f"üéØ Configuration contexte utilisateur: {self.user_context['user_name']} - {self.user_context['user_subject']}")
        
        # Mise √† jour IMM√âDIATE des prompts avec contexte utilisateur
        for agent_id, agent in self.agents.items():
            original_prompt = agent["system_prompt"]
            
            # Injection du contexte utilisateur avec placeholders
            contextualized_prompt = self._inject_user_context_in_prompt(original_prompt, agent_id)
            
            agent["system_prompt"] = contextualized_prompt
            
            logger.debug(f"‚úÖ Prompt contextualis√© pour {agent['name']}")
            logger.debug(f"   Nom: {self.user_context['user_name']}")
            logger.debug(f"   Sujet: {self.user_context['user_subject']}")
        
        logger.info(f"‚úÖ Contexte utilisateur configur√© pour {len(self.agents)} agents")

    def _inject_user_context_in_prompt(self, prompt: str, agent_id: str) -> str:
        """Injecte le contexte utilisateur dans un prompt d'agent"""
        
        # Remplacement des placeholders
        contextualized = prompt.replace(
            "{user_name}", self.user_context['user_name']
        ).replace(
            "{user_subject}", self.user_context['user_subject']
        )
        
        # Injection sp√©cifique selon l'agent
        if agent_id == "michel_dubois_animateur":
            # Michel doit √™tre particuli√®rement personnalis√©
            contextualized += f"""

üéØ CONTEXTE SP√âCIFIQUE DE CETTE √âMISSION :
- Invit√© principal : {self.user_context['user_name']}
- Sujet du d√©bat : {self.user_context['user_subject']}
- Tu DOIS utiliser le pr√©nom "{self.user_context['user_name']}" r√©guli√®rement
- Tu DOIS centrer le d√©bat sur "{self.user_context['user_subject']}"
- Toutes tes questions doivent √™tre li√©es √† ce sujet sp√©cifique

üí¨ EXEMPLES D'INTERPELLATION PERSONNALIS√âE :
- "{self.user_context['user_name']}, sur {self.user_context['user_subject']}, quelle est votre position ?"
- "Sarah, {self.user_context['user_name']} soul√®ve un point int√©ressant sur {self.user_context['user_subject']}..."
- "Marcus, concernant {self.user_context['user_subject']}, que pensez-vous de la position de {self.user_context['user_name']} ?"
"""
        
        elif agent_id == "sarah_johnson_journaliste":
            contextualized += f"""

üéØ CONTEXTE JOURNALISTIQUE :
- Vous interviewez {self.user_context['user_name']} sur {self.user_context['user_subject']}
- Vos questions doivent creuser les aspects de {self.user_context['user_subject']}
- Utilisez le pr√©nom {self.user_context['user_name']} dans vos interpellations
- Challengez sp√©cifiquement sur les enjeux de {self.user_context['user_subject']}
"""
        
        elif agent_id == "marcus_thompson_expert":
            contextualized += f"""

üéØ CONTEXTE EXPERTISE :
- Vous apportez votre expertise sur {self.user_context['user_subject']}
- R√©agissez aux positions de {self.user_context['user_name']} avec votre expertise
- √âclairez les aspects techniques/complexes de {self.user_context['user_subject']}
- Interpellez {self.user_context['user_name']} sur les implications pratiques
"""
        
        return contextualized

    def get_user_context(self) -> Dict[str, str]:
        """Retourne le contexte utilisateur actuel"""
        return getattr(self, 'user_context', {'user_name': 'Participant', 'user_subject': 'votre pr√©sentation'})

    async def process_user_message_with_interpellations(self, message: str, speaker_id: str,
                                                       conversation_history: List[Dict]) -> List[Dict]:
        """Traite un message utilisateur avec gestion automatique des interpellations"""
        
        responses = []
        
        # 1. D√©tection et traitement des interpellations
        if self.interpellation_manager:
            interpellation_responses = await self.interpellation_manager.process_message_with_interpellations(
                message, speaker_id, conversation_history
            )
            
            # 2. G√©n√©ration des r√©ponses d'interpellation
            for agent_id, response_text in interpellation_responses:
                agent = self.agents[agent_id]
                
                # Synth√®se vocale avec √©motion appropri√©e
                emotion = self.interpellation_manager._get_interpellation_emotion(
                    None, message  # Simplifi√© pour l'exemple
                )
                
                responses.append({
                    'agent_id': agent_id,
                    'agent_name': agent['name'],
                    'message': response_text,
                    'emotion': emotion,
                    'response_type': 'interpellation'
                })
        
        # 3. Si aucune interpellation d√©tect√©e, logique normale
        if not responses:
            # Logique de r√©ponse normale (agent suivant dans la rotation, etc.)
            next_agent_id = self._determine_next_speaker(conversation_history)
            normal_response = await self.generate_agent_response(
                next_agent_id, "conversation", message, conversation_history
            )
            
            responses.append({
                'agent_id': next_agent_id,
                'agent_name': self.agents[next_agent_id]['name'],
                'message': normal_response[0],
                'emotion': normal_response[1].primary_emotion,
                'response_type': 'normal'
            })
        
        return responses
    
    def _determine_next_speaker(self, conversation_history: List[Dict]) -> str:
        """D√©termine qui doit parler ensuite si pas d'interpellation"""
        
        # Logique simple : rotation Michel -> Sarah -> Marcus
        if not conversation_history:
            return "michel_dubois_animateur"  # Michel commence toujours
        
        last_speaker = conversation_history[-1].get('speaker_id')
        
        rotation = [
            "michel_dubois_animateur",
            "sarah_johnson_journaliste", 
            "marcus_thompson_expert"
        ]
        
        try:
            current_index = rotation.index(last_speaker)
            next_index = (current_index + 1) % len(rotation)
            return rotation[next_index]
        except ValueError:
            return "michel_dubois_animateur"  # Fallback

    def _validate_user_context_integration(self, response: str, agent_id: str) -> bool:
        """Valide que la r√©ponse int√®gre bien le contexte utilisateur"""
        
        user_context = self.get_user_context()
        user_name = user_context['user_name']
        user_subject = user_context['user_subject']
        
        response_lower = response.lower()
        user_name_lower = user_name.lower()
        
        # V√©rification nom utilisateur (sauf si c'est "Participant" g√©n√©rique)
        if user_name != "Participant":
            if user_name_lower not in response_lower:
                logger.warning(f"‚ö†Ô∏è Nom utilisateur '{user_name}' absent de la r√©ponse de {agent_id}")
                return False
        
        # V√©rification r√©f√©rence au sujet (sauf si g√©n√©rique)
        if user_subject != "votre pr√©sentation":
            # Recherche de mots-cl√©s du sujet
            subject_words = user_subject.lower().split()
            subject_mentioned = any(word in response_lower for word in subject_words if len(word) > 3)
            
            if not subject_mentioned:
                logger.warning(f"‚ö†Ô∏è Sujet '{user_subject}' non r√©f√©renc√© dans la r√©ponse de {agent_id}")
                return False
        
        logger.debug(f"‚úÖ Contexte utilisateur bien int√©gr√© dans la r√©ponse de {agent_id}")
        return True

    def _enhance_response_with_context(self, response: str, agent_id: str) -> str:
        """Am√©liore une r√©ponse pour mieux int√©grer le contexte utilisateur"""
        
        if self._validate_user_context_integration(response, agent_id):
            return response
        
        user_context = self.get_user_context()
        user_name = user_context['user_name']
        user_subject = user_context['user_subject']
        
        # Am√©liorations selon l'agent
        if agent_id == "michel_dubois_animateur":
            enhanced = f"{user_name}, {response}"
            if user_subject not in response:
                enhanced += f" Revenons √† notre sujet : {user_subject}."
        
        elif agent_id == "sarah_johnson_journaliste":
            enhanced = response
            if user_name not in response:
                enhanced = enhanced.replace("vous", f"{user_name}")
            if user_subject not in response:
                enhanced += f" Concernant {user_subject}, pr√©cis√©ment..."
        
        elif agent_id == "marcus_thompson_expert":
            enhanced = response
            if user_name not in response:
                enhanced = f"Comme le souligne {user_name}, {enhanced.lower()}"
            if user_subject not in response:
                enhanced += f" Dans le domaine de {user_subject}..."
        
        else:
            enhanced = response
        
        logger.info(f"üéØ R√©ponse am√©lior√©e avec contexte pour {agent_id}")
        return enhanced

    async def process_agent_output(self, output: str, agent_id: str) -> Dict:
        """Traite la sortie d'un agent pour d√©tecter les interpellations"""
        # Simulation d'interpellations
        return {
            "triggered_responses": [
                {
                    "agent_id": "sarah_johnson_journaliste",
                    "content": "C'est int√©ressant, pouvez-vous pr√©ciser ?",
                    "reaction": "C'est int√©ressant, pouvez-vous pr√©ciser ?"
                }
            ]
        }


    async def test_tts_integration(self) -> bool:
        """Teste l'int√©gration TTS ElevenLabs"""
        if not self.tts_service:
            logger.error("‚ùå TTS Service non initialis√©")
            return False
        
        try:
            # Test simple
            test_audio = await self.tts_service.synthesize_with_emotion(
                text="Test de connexion ElevenLabs",
                voice_id="George",
                emotion="neutre",
                intensity=0.5
            )
            
            if len(test_audio) > 0:
                logger.info("‚úÖ Test TTS r√©ussi")
                return True
            else:
                logger.error("‚ùå Test TTS √©chou√©: audio vide")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Test TTS √©chou√©: {e}")
            return False


def get_enhanced_manager(openai_api_key: str, elevenlabs_api_key: str, 
                        config: MultiAgentConfig) -> EnhancedMultiAgentManager:
    """Factory function pour cr√©er le gestionnaire am√©lior√©"""
    return EnhancedMultiAgentManager(openai_api_key, elevenlabs_api_key, config)
