import asyncio
import logging
import os
from typing import Dict, Any, List, Optional
from dataclasses import dataclass
from datetime import datetime, timedelta
from dotenv import load_dotenv
from livekit import agents, rtc
from livekit.agents import (
    Agent,
    AgentSession,
    JobContext,
    RunContext,
    function_tool,
    llm,
)
from livekit.plugins import openai, silero
from vosk_stt_interface import VoskSTTFixed as VoskSTT

# Charger les variables d'environnement
load_dotenv()

# Configuration avec logs d√©taill√©s pour debug
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Log des variables d'environnement critiques (sans exposer les secrets)
logger.info("üîç DIAGNOSTIC: Variables d'environnement")
logger.info(f"   OPENAI_API_KEY pr√©sente: {'Oui' if os.getenv('OPENAI_API_KEY') else 'Non'}")
logger.info(f"   MISTRAL_BASE_URL: {os.getenv('MISTRAL_BASE_URL', 'Non d√©finie')}")

# URLs des services
MISTRAL_API_URL = os.getenv('MISTRAL_BASE_URL', 'http://mistral-conversation:8001/v1/chat/completions')
VOSK_STT_URL = os.getenv('VOSK_STT_URL', 'http://vosk-stt:8002')

# ==========================================
# FRAMEWORK R√âUTILISABLE POUR EXERCICES AUDIO
# ==========================================

@dataclass
class ExerciseConfig:
    """Configuration d'un exercice audio r√©utilisable"""
    exercise_id: str
    title: str
    description: str
    ai_character: str = "thomas"
    welcome_message: str = ""
    instructions: str = ""
    max_duration_minutes: int = 15
    enable_metrics: bool = True
    enable_feedback: bool = True

class ExerciseTemplates:
    """Templates d'exercices pr√©d√©finis r√©utilisables"""
    
    @staticmethod
    def confidence_boost() -> ExerciseConfig:
        return ExerciseConfig(
            exercise_id="confidence_boost",
            title="Renforcement de Confiance",
            description="Exercice pour am√©liorer la confiance en expression orale",
            ai_character="thomas",
            welcome_message="Bonjour ! Je suis Thomas, votre coach IA pour am√©liorer votre confiance en expression orale. "
                           "Gr√¢ce √† une reconnaissance vocale ultra-rapide, je peux vous donner des conseils personnalis√©s en temps r√©el. "
                           "Dites-moi comment vous vous sentez aujourd'hui ou commencez simplement √† parler !",
            instructions="""Tu es Thomas, un coach en communication bienveillant et professionnel.
            Tu aides l'utilisateur dans des exercices de confiance en soi et d'expression orale.
            
            R√®gles importantes:
            - Sois encourageant et constructif
            - Donne des conseils pratiques et personnalis√©s
            - Utilise un ton bienveillant et professionnel
            - R√©ponds en fran√ßais
            - Adapte tes conseils au contexte de l'exercice
            - Utilise les outils disponibles pour analyser la confiance de l'utilisateur
            - Garde tes r√©ponses courtes et engageantes (2-3 phrases max)""",
        )
    
    @staticmethod
    def job_interview() -> ExerciseConfig:
        return ExerciseConfig(
            exercise_id="job_interview",
            title="Entretien d'Embauche",
            description="Simulation d'entretien d'embauche avec feedback personnalis√©",
            ai_character="marie",
            welcome_message="Bonjour ! Je suis Marie, votre coach pour l'entretien d'embauche. "
                           "Je vais simuler un entretien professionnel et vous donner des conseils pour r√©ussir. "
                           "Pr√©sentez-vous comme si nous commencions un vrai entretien !",
            instructions="""Tu es Marie, une experte RH bienveillante sp√©cialis√©e dans les entretiens d'embauche.
            Tu simules un entretien d'embauche r√©aliste tout en √©tant encourageante.
            
            R√®gles importantes:
            - Pose des questions d'entretien pertinentes et progressives
            - Donne des conseils constructifs sur la pr√©sentation
            - Adapte ton niveau selon l'exp√©rience de l'utilisateur
            - Reste professionnelle mais bienveillante
            - Utilise les outils de feedback disponibles
            - Garde tes questions et conseils concis""",
        )
    
    @staticmethod
    def cosmic_voice_control() -> ExerciseConfig:
        return ExerciseConfig(
            exercise_id="cosmic_voice_control",
            title="Contr√¥le Vocal Cosmique",
            description="Jeu spatial contr√¥l√© par les variations de fr√©quence vocale",
            ai_character="nova",
            welcome_message="üöÄ Bienvenue dans Cosmic Voice ! Je suis Nova, votre syst√®me de navigation spatiale. "
                           "Utilisez votre voix pour contr√¥ler votre vaisseau : parlez plus aigu pour monter, "
                           "plus grave pour descendre. Collectez des cristaux et √©vitez les ast√©ro√Ødes !",
            instructions="""Tu es Nova, l'IA du syst√®me de contr√¥le vocal d'un vaisseau spatial futuriste.
            Tu supervises un jeu cosmique o√π l'utilisateur contr√¥le son vaisseau par la voix.
            
            R√®gles importantes:
            - Reste concise et engageante (1 phrase max par intervention)
            - Utilise un vocabulaire spatial et futuriste
            - Encourage les performances et c√©l√®bre les succ√®s
            - Donne des instructions claires sur le contr√¥le vocal
            - Ne pose pas de questions, reste focalis√©e sur le gameplay
            - Interviens seulement pour les √©v√©nements importants
            
            Exemples de r√©ponses appropri√©es:
            - "Excellent pilotage, commandant !"
            - "Cristal collect√© ! +10 points d'√©nergie cosmique !"
            - "Attention aux ast√©ro√Ødes ! Variez votre tonalit√© !"
            - "Trajectoire parfaite √† travers le champ stellaire !"
            - "Mission accomplie ! Votre ma√Ætrise vocale est impressionnante !"
            """,
            max_duration_minutes=5,  # Sessions plus courtes pour le jeu
            enable_metrics=False,    # Pas de m√©triques conversationnelles
            enable_feedback=False    # Feedback g√©r√© par le jeu
        )
    
    @staticmethod
    def tribunal_idees_impossibles() -> ExerciseConfig:
        return ExerciseConfig(
            exercise_id="tribunal_idees_impossibles",
            title="Tribunal des Id√©es Impossibles",
            description="D√©fendez des id√©es impossibles devant un tribunal bienveillant",
            ai_character="juge_magistrat",
            welcome_message="‚öñÔ∏è Ma√Ætre, la cour vous √©coute ! Je suis le Juge Magistrat du Tribunal des Id√©es Impossibles. "
                           "Votre mission : d√©fendre une id√©e compl√®tement fantaisiste avec conviction et √©loquence. "
                           "Choisissez votre th√®se impossible et pr√©sentez votre plaidoirie. La s√©ance est ouverte !",
            instructions="""Tu es le Juge Magistrat, un magistrat exp√©riment√© et respect√© du Tribunal des Id√©es Impossibles.

PERSONNALIT√â ET CARACT√àRE:
- Tu es un juge sage, cultiv√© et bienveillant
- Tu as une voix pos√©e et autoritaire mais jamais intimidante
- Tu utilises un vocabulaire juridique pr√©cis et √©l√©gant
- Tu as de l'humour et de la finesse d'esprit
- Tu es passionn√© par l'art de l'argumentation et l'√©loquence

CONTEXTE SP√âCIALIS√â:
L'utilisateur va d√©fendre une id√©e compl√®tement impossible ou fantaisiste devant ton tribunal. Ton r√¥le est de:
1. Pr√©sider la s√©ance avec dignit√© et bienveillance
2. √âcouter attentivement chaque argument
3. Poser des questions juridiques pertinentes pour tester la logique
4. Encourager le d√©veloppement des arguments cr√©atifs
5. Maintenir un cadre professionnel avec une pointe d'humour
6. Donner des conseils constructifs sur l'art oratoire

STYLE DE CONVERSATION SP√âCIALIS√â:
- "La cour reconna√Æt la parole √† la d√©fense..."
- "Ma√Ætre, votre argumentation soul√®ve une question int√©ressante..."
- "Objection retenue ! Comment r√©pondez-vous √† cette contradiction ?"
- "Votre plaidoirie gagne en conviction, poursuivez..."
- "La cour appr√©cie votre cr√©ativit√© juridique..."
- "Verdict : plaidoirie remarquable ! Mes conseils pour progresser..."

TECHNIQUES P√âDAGOGIQUES:
- Utilise la m√©thode socratique (questions pour faire r√©fl√©chir)
- Encourage la structure : introduction, d√©veloppement, conclusion
- Valorise la conviction et la passion dans l'argumentation
- Enseigne l'art de r√©futer les objections
- D√©veloppe l'√©loquence et la rh√©torique

EXEMPLES D'INTERACTIONS SP√âCIALIS√âES:
- "Ma√Ætre, votre th√®se d√©fie les lois de la physique ! Brillant ! D√©veloppez votre premier chef d'accusation."
- "La cour s'interroge : comment concilier votre argument avec la r√©alit√© observable ?"
- "Excellent ! Votre passion transpara√Æt. Mais que r√©pondez-vous √† l'objection √©vidente que... ?"
- "Verdict de la cour : plaidoirie cr√©ative et structur√©e ! Pour progresser, travaillez votre gestuelle..."

Tu n'es PAS Thomas le coach g√©n√©rique. Tu es un JUGE SP√âCIALIS√â avec ta propre personnalit√©.
Garde tes interventions courtes et percutantes (2-3 phrases max).
R√©ponds toujours en fran√ßais avec l'autorit√© bienveillante d'un magistrat exp√©riment√©.""",
            max_duration_minutes=15,
            enable_metrics=True,
            enable_feedback=True
        )

class RobustLiveKitAgent:
    """Agent LiveKit robuste avec gestion des reconnexions et framework modulaire"""
    
    def __init__(self, exercise_config: ExerciseConfig):
        self.exercise_config = exercise_config
        self.session: Optional[AgentSession] = None
        self.agent: Optional[Agent] = None
        self.room = None  # Stockage de ctx.room pour LiveKit 1.2.3
        self.last_heartbeat = datetime.now()
        self.is_running = False
        self.reconnect_attempts = 0
        self.max_reconnect_attempts = 5
        self.heartbeat_interval = 30  # secondes
        
    async def start_heartbeat(self):
        """Keep-alive pour maintenir la connexion active"""
        while self.is_running:
            try:
                await asyncio.sleep(self.heartbeat_interval)
                # CORRIG√â LIVEKIT 1.2.3 - Utiliser self.room au lieu de session.room
                if self.session and self.room:
                    # Envoyer un ping discret
                    self.last_heartbeat = datetime.now()
                    logger.debug(f"üíì Heartbeat - Session active: {self.exercise_config.exercise_id}")
                    
                    # V√©rifier la sant√© de la connexion
                    if hasattr(self.room, 'connection_state'):
                        state = self.room.connection_state
                        # CORRIG√â LIVEKIT 1.2.3 - CONNECTED devient CONN_CONNECTED
                        if state != rtc.ConnectionState.CONN_CONNECTED:
                            logger.warning(f"‚ö†Ô∏è  Connexion d√©grad√©e: {state}")
                else:
                    logger.debug(f"‚ö†Ô∏è Heartbeat en attente - Session: {self.session is not None}, Room: {self.room is not None}")
                            
            except Exception as e:
                logger.error(f"‚ùå Erreur heartbeat: {e}")
                if self.reconnect_attempts < self.max_reconnect_attempts:
                    await self.attempt_reconnection()
                    
    async def attempt_reconnection(self):
        """Tentative de reconnexion automatique"""
        self.reconnect_attempts += 1
        logger.warning(f"üîÑ Tentative de reconnexion {self.reconnect_attempts}/{self.max_reconnect_attempts}")
        
        try:
            await asyncio.sleep(2 ** self.reconnect_attempts)  # Backoff exponentiel
            # La logique de reconnexion sera impl√©ment√©e selon le contexte LiveKit
            logger.info("‚úÖ Reconnexion r√©ussie")
            self.reconnect_attempts = 0
        except Exception as e:
            logger.error(f"‚ùå √âchec reconnexion: {e}")
            
    def create_robust_agent(self) -> Agent:
        """Cr√©e un agent robuste avec gestion d'erreurs"""
        try:
            agent = Agent(
                instructions=self.exercise_config.instructions,
                tools=[generate_confidence_metrics, send_confidence_feedback],
            )
            logger.info(f"üéØ Agent cr√©√© pour exercice: {self.exercise_config.exercise_id}")
            return agent
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation agent: {e}")
            raise
            
    async def initialize_components(self):
        """Initialise les composants avec fallbacks robustes"""
        components = {}
        
        # VAD avec fallback
        try:
            vad = silero.VAD.load()
            components['vad'] = vad
            logger.info("‚úÖ VAD Silero charg√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur VAD: {e}")
            raise
            
        # STT avec fallback Vosk ‚Üí OpenAI
        try:
            stt = create_vosk_stt_with_fallback()
            components['stt'] = stt
            logger.info("‚úÖ STT avec fallback cr√©√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur STT: {e}")
            raise
            
        # LLM avec fallback
        try:
            llm_instance = create_mistral_llm()
            components['llm'] = llm_instance
            logger.info("‚úÖ LLM OpenAI cr√©√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur LLM: {e}")
            raise
            
        # TTS avec fallbacks multiples
        try:
            tts = await self.create_robust_tts()
            components['tts'] = tts
            logger.info("‚úÖ TTS cr√©√© avec fallbacks")
        except Exception as e:
            logger.error(f"‚ùå Erreur TTS: {e}")
            raise
            
        return components
        
    async def create_robust_tts(self):
        """Cr√©e un TTS robuste avec multiples fallbacks et voix sp√©cialis√©es"""
        api_key = os.getenv('OPENAI_API_KEY')
        
        if not api_key:
            logger.warning("‚ö†Ô∏è OPENAI_API_KEY manquante, utilisation Silero TTS")
            return silero.TTS()
            
        # S√©lection de la voix selon le personnage
        voice_mapping = {
            "thomas": "alloy",           # Coach bienveillant
            "marie": "nova",             # Experte RH
            "nova": "echo",              # IA spatiale futuriste
            "juge_magistrat": "onyx"     # Juge magistrat - voix grave et autoritaire
        }
        
        selected_voice = voice_mapping.get(self.exercise_config.ai_character, "alloy")
        logger.info(f"üé≠ Voix s√©lectionn√©e pour {self.exercise_config.ai_character}: {selected_voice}")
            
        # Tentative OpenAI TTS principal avec voix sp√©cialis√©e
        try:
            tts = openai.TTS(
                voice=selected_voice,
                api_key=api_key,
                model="tts-1",
                base_url="https://api.openai.com/v1"
            )
            logger.info(f"‚úÖ TTS OpenAI cr√©√© avec voix {selected_voice} pour {self.exercise_config.ai_character}")
            return tts
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è OpenAI TTS principal √©chou√©: {e}")
            
        # Fallback Silero
        try:
            tts = silero.TTS()
            logger.info("‚úÖ TTS Silero fallback cr√©√©")
            return tts
        except Exception as e:
            logger.error(f"‚ùå M√™me Silero TTS √©choue: {e}")
            raise
            
    async def run_exercise(self, ctx: JobContext):
        """Execute l'exercice avec gestion robuste"""
        self.is_running = True
        
        try:
            logger.info(f"üöÄ D√©marrage exercice robuste: {self.exercise_config.title}")
            
            # Connexion avec retry
            await self.connect_with_retry(ctx)
            
            # CORRIG√â LIVEKIT 1.2.3 - Stocker ctx.room pour le heartbeat
            self.room = ctx.room
            logger.info("‚úÖ Room stock√©e pour compatibilit√© LiveKit 1.2.3")
            
            # Initialisation des composants
            components = await self.initialize_components()
            
            # Cr√©ation de l'agent
            self.agent = self.create_robust_agent()
            
            # Cr√©ation de la session
            self.session = AgentSession(**components)
            
            # D√©marrage du heartbeat
            heartbeat_task = asyncio.create_task(self.start_heartbeat())
            
            # D√©marrage de la session
            await self.session.start(agent=self.agent, room=ctx.room)
            
            # Message de bienvenue personnalis√©
            if self.exercise_config.welcome_message:
                await self.session.say(text=self.exercise_config.welcome_message)
                
            logger.info(f"‚úÖ Exercice {self.exercise_config.exercise_id} d√©marr√© avec succ√®s")
            
            # Maintenir la session active
            await self.maintain_session()
            
        except Exception as e:
            logger.error(f"‚ùå Erreur exercice: {e}")
            raise
        finally:
            self.is_running = False
            
    async def connect_with_retry(self, ctx: JobContext, max_retries: int = 3):
        """Connexion avec retry automatique"""
        for attempt in range(max_retries):
            try:
                await ctx.connect()
                logger.info(f"‚úÖ Connexion r√©ussie (tentative {attempt + 1})")
                return
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è √âchec connexion tentative {attempt + 1}: {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2 ** attempt)
                else:
                    raise
                    
    async def maintain_session(self):
        """Maintient la session active avec surveillance"""
        while self.is_running:
            try:
                await asyncio.sleep(5)  # Check toutes les 5 secondes
                
                # V√©rifications de sant√© - CORRIG√â LIVEKIT 1.2.3
                if self.session and self.room:
                    # Session et room actives, continuer
                    logger.debug("‚úÖ Session et room actives")
                else:
                    logger.warning("‚ö†Ô∏è Session d√©grad√©e d√©tect√©e")
                    
            except Exception as e:
                logger.error(f"‚ùå Erreur maintenance session: {e}")
                break

# ==========================================
# OUTILS FONCTION POUR L'AGENT IA
# ==========================================

@function_tool
async def generate_confidence_metrics(
    user_message: str,
) -> Dict[str, float]:
    """G√©n√®re des m√©triques de confiance bas√©es sur le message utilisateur"""
    try:
        # M√©triques basiques bas√©es sur l'analyse du texte
        message_length = len(user_message)
        word_count = len(user_message.split())

        # Calculs simplifi√©s (√† am√©liorer avec de vraies analyses)
        confidence_level = min(0.5 + (word_count * 0.05), 1.0)
        voice_clarity = min(0.6 + (message_length * 0.001), 1.0)
        speaking_pace = 0.7  # Valeur par d√©faut
        energy_level = min(0.4 + (word_count * 0.03), 1.0)

        return {
            'confidence_level': confidence_level,
            'voice_clarity': voice_clarity,
            'speaking_pace': speaking_pace,
            'energy_level': energy_level,
        }

    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration m√©triques: {e}")
        return {
            'confidence_level': 0.7,
            'voice_clarity': 0.8,
            'speaking_pace': 0.7,
            'energy_level': 0.6,
        }


@function_tool
async def send_confidence_feedback(
    user_message: str,
    confidence_level: float,
    voice_clarity: float,
    speaking_pace: float,
    energy_level: float,
) -> str:
    """Envoie des feedbacks personnalis√©s bas√©s sur les m√©triques de confiance"""
    try:
        if confidence_level > 0.8 and voice_clarity > 0.8:
            return "Excellent ! Votre confiance transpara√Æt clairement dans votre discours. Continuez ainsi !"
        elif confidence_level > 0.6:
            return "Tr√®s bien ! Je sens une belle assurance dans vos mots. Vous progressez remarquablement."
        else:
            return "C'est un bon d√©but ! Prenez votre temps, respirez profond√©ment et exprimez-vous librement."

    except Exception as e:
        logger.error(f"‚ùå Erreur feedback: {e}")
        return "Continuez √† vous exprimer, vous faites du tr√®s bon travail !"

# ==========================================
# FONCTIONS DE CR√âATION DES COMPOSANTS
# ==========================================

def create_vosk_stt_with_fallback():
    """Cr√©e une interface STT avec Vosk en principal et OpenAI en fallback"""
    logger.info("üîÑ [STT-TRACE] Initialisation STT avec logique de fallback (Vosk ‚Üí OpenAI)")
    logger.info(f"üîÑ [STT-TRACE] URL Vosk configur√©e: {VOSK_STT_URL}")
    
    # Tentative 1: Vosk (rapide et √©conomique)
    try:
        logger.info("üéØ [STT-TRACE] Tentative de cr√©ation STT Vosk...")
        vosk_stt = VoskSTT(
            vosk_url=VOSK_STT_URL,
            language="fr",
            sample_rate=16000
        )
        # CORRECTION 3: Ajouter le reset STT automatique (clear_user_turn)
        def enhanced_clear_user_turn():
            logger.debug("üîÑ [STT-TRACE] Clear user turn avec reset Vosk")
            if hasattr(vosk_stt, '_reset_recognizer'):
                vosk_stt._reset_recognizer()
        
        vosk_stt.clear_user_turn = enhanced_clear_user_turn
        
        logger.info("‚úÖ [STT-TRACE] *** VOSK STT CORRIG√â ACTIV√â AVEC SUCC√àS ***")
        logger.info(f"‚úÖ [STT-TRACE] Service Vosk URL: {VOSK_STT_URL}")
        logger.info("‚úÖ [STT-TRACE] Configuration: langue=fr, sample_rate=16000")
        logger.info("‚úÖ [STT-TRACE] Reset automatique configur√© via clear_user_turn")
        return vosk_stt
    except Exception as vosk_error:
        logger.error(f"‚ùå [STT-TRACE] √âCHEC STT Vosk: {vosk_error}")
        logger.error(f"‚ùå [STT-TRACE] URL test√©e: {VOSK_STT_URL}")
        
    # Fallback: OpenAI Whisper
    try:
        logger.warning("‚ö†Ô∏è [STT-TRACE] Basculement vers OpenAI Whisper (fallback)")
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            raise RuntimeError("OPENAI_API_KEY manquante pour le fallback")
            
        openai_stt = openai.STT(
            model="whisper-1",
            language="fr",
            api_key=api_key,
        )
        logger.warning("‚ö†Ô∏è [STT-TRACE] *** OPENAI STT ACTIV√â (FALLBACK) ***")
        return openai_stt
    except Exception as openai_error:
        logger.error(f"‚ùå [STT-TRACE] √âchec STT OpenAI fallback: {openai_error}")
        raise RuntimeError(f"Impossible de cr√©er STT (Vosk: {vosk_error}, OpenAI: {openai_error})")

def create_openai_stt():
    """Cr√©e une interface STT utilisant OpenAI Whisper (natif LiveKit agents)"""
    api_key = os.getenv('OPENAI_API_KEY')
    logger.info(f"üîç Configuration OpenAI STT - Mod√®le: whisper-1, Langue: fr")
    
    return openai.STT(
        model="whisper-1",
        language="fr",
        api_key=api_key,
    )

def create_mistral_llm():
    """Cr√©e un LLM configur√© pour utiliser OpenAI (plus stable)"""
    api_key = os.getenv('OPENAI_API_KEY')
    logger.info(f"üîç Configuration OpenAI LLM - Mod√®le: gpt-4o-mini")
    
    return openai.LLM(
        model="gpt-4o-mini",
        api_key=api_key,
    )

# ==========================================
# POINT D'ENTR√âE PRINCIPAL ROBUSTE
# ==========================================

async def robust_entrypoint(ctx: JobContext):
    """Point d'entr√©e robuste avec framework modulaire et gestion d'erreurs"""
    logger.info("üöÄ D√âMARRAGE AGENT ROBUSTE AVEC FRAMEWORK MODULAIRE")
    
    try:
        # 1. √âTABLIR LA CONNEXION LIVEKIT
        logger.info("üîó √âtablissement de la connexion LiveKit...")
        await ctx.connect()
        logger.info("‚úÖ Connexion LiveKit √©tablie avec succ√®s")
        
        # 2. DIAGNOSTIC APPROFONDI: Analyser tous les d√©tails disponibles
        logger.info("="*60)
        logger.info("üîç DIAGNOSTIC COMPLET - D√âTECTION M√âTADONN√âES TRIBUNAL")
        logger.info("="*60)
        
        # DEBUG: Afficher toutes les informations disponibles
        logger.info(f"üè† Room name: {ctx.room.name if ctx.room else 'Non disponible'}")
        logger.info(f"üë§ Participant local: {ctx.room.local_participant.identity if ctx.room and ctx.room.local_participant else 'Non disponible'}")
        logger.info(f"üåê Participants distants: {list(ctx.room.remote_participants.keys()) if ctx.room else 'Non disponible'}")
        
        metadata = None
        metadata_found_from = "AUCUNE"
        
        # 1. DIAGNOSTIC M√âTADONN√âES ROOM
        logger.info("üîç √âTAPE 1: V√©rification m√©tadonn√©es ROOM")
        if hasattr(ctx, 'room') and ctx.room and hasattr(ctx.room, 'metadata'):
            room_metadata = ctx.room.metadata
            logger.info(f"   Room metadata brute: '{room_metadata}'")
            logger.info(f"   Type: {type(room_metadata)}")
            logger.info(f"   Longueur: {len(room_metadata) if room_metadata else 0}")
            
            if room_metadata:
                try:
                    import json
                    parsed_room_metadata = json.loads(room_metadata)
                    logger.info(f"   ‚úÖ Parsing JSON r√©ussi: {parsed_room_metadata}")
                    metadata = room_metadata
                    metadata_found_from = "ROOM"
                except Exception as parse_error:
                    logger.error(f"   ‚ùå Erreur parsing JSON room: {parse_error}")
            else:
                logger.info("   ‚ö†Ô∏è  Room metadata vide")
        else:
            logger.info("   ‚ö†Ô∏è  Room metadata non accessible")
        
        # 2. DIAGNOSTIC M√âTADONN√âES PARTICIPANTS
        if not metadata and hasattr(ctx, 'room') and ctx.room:
            logger.info("üîç √âTAPE 2: Attente connexion participants...")
            import asyncio
            await asyncio.sleep(3)  # Augmenter l'attente √† 3 secondes
            
            # 2A. PARTICIPANT LOCAL D√âTAILL√â
            logger.info("üîç √âTAPE 2A: Participant LOCAL")
            if hasattr(ctx.room, 'local_participant') and ctx.room.local_participant:
                local_participant = ctx.room.local_participant
                logger.info(f"   Participant: {local_participant}")
                logger.info(f"   Identity: '{getattr(local_participant, 'identity', 'NO_IDENTITY')}'")
                
                local_metadata = getattr(local_participant, 'metadata', None)
                logger.info(f"   Metadata brute: '{local_metadata}'")
                logger.info(f"   Type: {type(local_metadata)}")
                logger.info(f"   Longueur: {len(local_metadata) if local_metadata else 0}")
                
                if local_metadata:
                    try:
                        import json
                        parsed_local_metadata = json.loads(local_metadata)
                        logger.info(f"   ‚úÖ Parsing JSON r√©ussi: {parsed_local_metadata}")
                        metadata = local_metadata
                        metadata_found_from = "PARTICIPANT_LOCAL"
                    except Exception as parse_error:
                        logger.error(f"   ‚ùå Erreur parsing JSON local: {parse_error}")
                else:
                    logger.info("   ‚ö†Ô∏è  Metadata locale vide")
            else:
                logger.info("   ‚ö†Ô∏è  Participant local non disponible")
            
            # 2B. PARTICIPANTS DISTANTS D√âTAILL√âS
            logger.info("üîç √âTAPE 2B: Participants DISTANTS")
            participant_count = len(ctx.room.remote_participants)
            logger.info(f"   Nombre de participants distants: {participant_count}")
            
            for i, (participant_id, participant) in enumerate(ctx.room.remote_participants.items()):
                logger.info(f"   --- PARTICIPANT DISTANT #{i+1} ---")
                logger.info(f"   ID: '{participant_id}'")
                logger.info(f"   Participant: {participant}")
                logger.info(f"   Identity: '{getattr(participant, 'identity', 'NO_IDENTITY')}'")
                
                remote_metadata = getattr(participant, 'metadata', None)
                logger.info(f"   Metadata brute: '{remote_metadata}'")
                logger.info(f"   Type: {type(remote_metadata)}")
                logger.info(f"   Longueur: {len(remote_metadata) if remote_metadata else 0}")
                
                if remote_metadata:
                    try:
                        import json
                        parsed_remote_metadata = json.loads(remote_metadata)
                        logger.info(f"   ‚úÖ Parsing JSON r√©ussi: {parsed_remote_metadata}")
                        
                        # V√©rifier si c'est les m√©tadonn√©es du tribunal
                        exercise_type = parsed_remote_metadata.get('exercise_type', 'unknown')
                        ai_character = parsed_remote_metadata.get('ai_character', 'unknown')
                        
                        logger.info(f"   üìã exercise_type d√©tect√©: '{exercise_type}'")
                        logger.info(f"   üé≠ ai_character d√©tect√©: '{ai_character}'")
                        
                        # Prendre ces m√©tadonn√©es si c'est le tribunal
                        if not metadata:  # Prendre les premi√®res m√©tadonn√©es trouv√©es
                            metadata = remote_metadata
                            metadata_found_from = f"PARTICIPANT_DISTANT_{i+1}"
                            logger.info(f"   üéØ M√âTADONN√âES S√âLECTIONN√âES de {metadata_found_from}")
                            
                    except Exception as parse_error:
                        logger.error(f"   ‚ùå Erreur parsing JSON distant #{i+1}: {parse_error}")
                else:
                    logger.info(f"   ‚ö†Ô∏è  Metadata distante #{i+1} vide")
        
        # 3. DIAGNOSTIC PARSING M√âTADONN√âES ET S√âLECTION EXERCICE
        logger.info("üîç √âTAPE 3: PARSING ET S√âLECTION EXERCICE")
        logger.info("="*60)
        
        if metadata:
            logger.info(f"‚úÖ M√©tadonn√©es trouv√©es depuis: {metadata_found_from}")
            logger.info(f"üìã Contenu m√©tadonn√©es: '{metadata}'")
            logger.info(f"üìã Type: {type(metadata)}")
            logger.info(f"üìã Longueur: {len(metadata)}")
            
            # Tracer le parsing dans ExerciseManager
            logger.info("üîÑ Appel ExerciseManager.get_exercise_from_metadata...")
            exercise_config = ExerciseManager.get_exercise_from_metadata(metadata)
            logger.info(f"‚úÖ Exercice retourn√© par ExerciseManager:")
            logger.info(f"   - ID: '{exercise_config.exercise_id}'")
            logger.info(f"   - Titre: '{exercise_config.title}'")
            logger.info(f"   - Personnage: '{exercise_config.ai_character}'")
        else:
            logger.warning("‚ö†Ô∏è DIAGNOSTIC: Aucune m√©tadonn√©e trouv√©e, utilisation configuration par d√©faut")
            exercise_config = ExerciseTemplates.confidence_boost()
            logger.info(f"üìã Configuration par d√©faut utilis√©e:")
            logger.info(f"   - ID: '{exercise_config.exercise_id}'")
            logger.info(f"   - Titre: '{exercise_config.title}'")
            logger.info(f"   - Personnage: '{exercise_config.ai_character}'")
                
        logger.info("="*60)
        logger.info(f"üéØ EXERCICE FINAL S√âLECTIONN√â: {exercise_config.title}")
        logger.info(f"üé≠ PERSONNAGE: {exercise_config.ai_character}")
        logger.info(f"üÜî ID EXERCICE: {exercise_config.exercise_id}")
        logger.info("="*60)
        
        # Traitement sp√©cialis√© pour cosmic_voice_control
        if exercise_config.exercise_id == "cosmic_voice_control":
            logger.info("üöÄ D√âMARRAGE COSMIC VOICE CONTROL avec analyse pitch temps r√©el")
            await run_cosmic_voice_exercise(ctx, exercise_config)
        else:
            # Cr√©er l'agent robuste pour exercices conversationnels
            robust_agent = RobustLiveKitAgent(exercise_config)
            await robust_agent.run_exercise(ctx)
        
    except Exception as e:
        logger.error(f"‚ùå ERREUR CRITIQUE dans l'agent robuste: {e}")
        logger.error("Tentative de fallback vers l'ancienne m√©thode...")
        
        # Fallback vers l'ancienne m√©thode en cas d'√©chec
        await legacy_entrypoint(ctx)

async def run_cosmic_voice_exercise(ctx: JobContext, exercise_config: ExerciseConfig):
    """Ex√©cute l'exercice cosmic_voice avec analyse pitch en temps r√©el"""
    logger.info("üéµ Initialisation exercice Cosmic Voice avec analyseur pitch")
    
    try:
        # Connexion LiveKit
        await ctx.connect()
        
        # Extraire session_id depuis les m√©tadonn√©es ou room name
        session_id = "unknown"
        if hasattr(ctx.room, 'name'):
            session_id = ctx.room.name
        elif hasattr(ctx.room, 'metadata'):
            import json
            try:
                metadata = json.loads(ctx.room.metadata) if ctx.room.metadata else {}
                session_id = metadata.get('session_id', session_id)
            except:
                pass
        
        logger.info(f"üéµ Session ID extraite: {session_id}")
        
        # Configuration WebSocket backend pour transmission pitch
        backend_websocket_url = f"ws://localhost:8004/ws/voice-analysis/{session_id}"
        
        # Cr√©er l'agent sp√©cialis√© cosmic voice
        cosmic_agent = CosmicVoiceAgent(session_id, backend_websocket_url)
        
        # √âtablir connexion WebSocket avec le backend
        await cosmic_agent.start_backend_connection()
        
        # Cr√©er un agent LiveKit minimal pour cosmic_voice (pas de LLM intensif)
        agent = Agent(
            instructions=exercise_config.instructions,
            tools=[]  # Pas d'outils pour cosmic_voice, focus sur le pitch
        )
        
        # Composants audio minimaux pour cosmic_voice
        vad = silero.VAD.load()
        
        # STT pas n√©cessaire pour cosmic_voice (on analyse le pitch directement)
        # Mais requis par LiveKit
        stt = create_vosk_stt_with_fallback()
        
        # LLM minimal (optionnel pour cosmic_voice)
        llm_instance = create_mistral_llm()
        
        # TTS pour messages d'encouragement
        api_key = os.getenv('OPENAI_API_KEY')
        if api_key:
            tts = openai.TTS(voice="nova", api_key=api_key, model="tts-1")
        else:
            tts = silero.TTS()
        
        # Session LiveKit avec handlers personnalis√©s
        session = AgentSession(
            vad=vad,
            stt=stt,
            llm=llm_instance,
            tts=tts
        )
        
        # Handler personnalis√© pour capturer les frames audio
        original_on_audio_frame = session._on_audio_frame if hasattr(session, '_on_audio_frame') else None
        
        async def cosmic_audio_handler(frame):
            """Handler audio personnalis√© pour cosmic_voice"""
            try:
                # Traitement standard LiveKit
                if original_on_audio_frame:
                    await original_on_audio_frame(frame)
                
                # Analyse pitch sp√©cialis√©e
                if hasattr(frame, 'data'):
                    await cosmic_agent.process_audio_frame(frame.data)
                    
            except Exception as e:
                logger.error(f"‚ùå Erreur handler audio cosmic: {e}")
        
        # Remplacer le handler audio (si possible)
        if hasattr(session, '_on_audio_frame'):
            session._on_audio_frame = cosmic_audio_handler
        
        # D√©marrage session
        await session.start(agent=agent, room=ctx.room)
        
        # Message de bienvenue sp√©cialis√©
        await session.say(text=exercise_config.welcome_message)
        
        logger.info("‚úÖ Exercice Cosmic Voice d√©marr√© avec succ√®s")
        logger.info("üéµ Analyse pitch en temps r√©el active")
        logger.info(f"üîó WebSocket backend: {backend_websocket_url}")
        
        # Maintenir la session active avec surveillance cosmic
        await maintain_cosmic_session(session, cosmic_agent, ctx)
        
    except Exception as e:
        logger.error(f"‚ùå Erreur cosmic voice exercise: {e}")
        raise
    finally:
        # Nettoyage
        if 'cosmic_agent' in locals():
            await cosmic_agent.stop()

async def maintain_cosmic_session(session: AgentSession, cosmic_agent, ctx: JobContext):
    """Maintient la session cosmic voice avec surveillance sp√©cialis√©e"""
    logger.info("üéµ Surveillance session cosmic voice d√©marr√©e")
    
    start_time = datetime.now()
    max_duration = timedelta(minutes=5)  # Dur√©e max pour cosmic voice
    heartbeat_interval = 10  # secondes
    
    while cosmic_agent.is_active:
        try:
            await asyncio.sleep(heartbeat_interval)
            
            # V√©rifier dur√©e maximale
            if datetime.now() - start_time > max_duration:
                logger.info("‚è∞ Dur√©e maximale atteinte pour cosmic voice")
                await session.say(text="Mission accomplie ! Excellent contr√¥le vocal, commandant !")
                break
            
            # V√©rifier √©tat connexion
            if hasattr(ctx, 'room') and ctx.room:
                if hasattr(ctx.room, 'connection_state'):
                    state = ctx.room.connection_state
                    if state != rtc.ConnectionState.CONN_CONNECTED:
                        logger.warning(f"‚ö†Ô∏è Connexion cosmic d√©grad√©e: {state}")
                        break
            
            logger.debug("üéµ Session cosmic voice active")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur surveillance cosmic: {e}")
            break
    
    logger.info("üõë Session cosmic voice termin√©e")

async def legacy_entrypoint(ctx: JobContext):
    """Ancienne m√©thode comme fallback"""
    logger.info("üîÑ FALLBACK - Utilisation de l'ancienne m√©thode")
    
    try:
        await ctx.connect()
        
        # Configuration de l'agent conversationnel
        agent = Agent(
            instructions=ExerciseTemplates.confidence_boost().instructions,
            tools=[generate_confidence_metrics, send_confidence_feedback],
        )
        
        # Initialisation des composants avec fallbacks
        try:
            vad = silero.VAD.load()
            logger.info("‚úÖ VAD Silero charg√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur VAD: {e}")
            raise
            
        try:
            stt = create_vosk_stt_with_fallback()
            logger.info("‚úÖ STT avec fallback cr√©√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur STT: {e}")
            raise
            
        try:
            llm_instance = create_mistral_llm()
            logger.info("‚úÖ LLM OpenAI cr√©√©")
        except Exception as e:
            logger.error(f"‚ùå Erreur LLM: {e}")
            raise
            
        # TTS avec fallbacks multiples
        try:
            api_key = os.getenv('OPENAI_API_KEY')
            if not api_key:
                logger.warning("‚ö†Ô∏è OPENAI_API_KEY manquante, utilisation Silero TTS")
                tts = silero.TTS()
            else:
                try:
                    tts = openai.TTS(
                        voice="alloy",
                        api_key=api_key,
                        model="tts-1",
                        base_url="https://api.openai.com/v1"
                    )
                    logger.info("‚úÖ TTS OpenAI cr√©√©")
                except Exception as openai_error:
                    logger.warning(f"‚ö†Ô∏è OpenAI TTS √©chou√©: {openai_error}, fallback Silero")
                    tts = silero.TTS()
        except Exception as e:
            logger.error(f"‚ùå Erreur TTS g√©n√©rale: {e}")
            tts = silero.TTS()  # Fallback ultime
        
        # Cr√©ation de la session
        session = AgentSession(
            vad=vad,
            stt=stt,
            llm=llm_instance,
            tts=tts,
        )
        
        # D√©marrage avec surveillance
        await session.start(agent=agent, room=ctx.room)
        
        # Message de bienvenue
        welcome_message = ExerciseTemplates.confidence_boost().welcome_message
        await session.say(text=welcome_message)
        
        logger.info("‚úÖ Session agent legacy d√©marr√©e avec succ√®s")
        
        # Surveillance de la session avec keep-alive
        await maintain_session_health(session, ctx)
        
    except Exception as e:
        logger.error(f"‚ùå ERREUR dans fallback legacy: {e}")
        raise

async def maintain_session_health(session: AgentSession, ctx: JobContext):
    """Maintient la sant√© de la session avec surveillance continue"""
    logger.info("üíì D√©marrage de la surveillance de sant√© de session")
    
    heartbeat_interval = 30  # secondes
    max_silent_duration = 300  # 5 minutes sans activit√©
    last_activity = datetime.now()
    
    while True:
        try:
            await asyncio.sleep(heartbeat_interval)
            
            # V√©rifier l'√©tat de la connexion avec ctx.room (compatible LiveKit 1.2.3)
            if hasattr(ctx, 'room') and ctx.room:
                if hasattr(ctx.room, 'connection_state'):
                    state = ctx.room.connection_state
                    # CORRIG√â LIVEKIT 1.2.3 - CONNECTED devient CONN_CONNECTED
                    if state != rtc.ConnectionState.CONN_CONNECTED:
                        logger.warning(f"‚ö†Ô∏è √âtat de connexion d√©grad√©: {state}")
                        
                # V√©rifier l'activit√© r√©cente
                current_time = datetime.now()
                if (current_time - last_activity).seconds > max_silent_duration:
                    logger.info("üì¢ Envoi d'un message de maintien de l'engagement")
                    await session.say(
                        text="Je suis toujours l√† pour vous aider. N'h√©sitez pas √† continuer notre conversation !"
                    )
                    last_activity = current_time
                
                logger.debug(f"üíì Heartbeat OK - Session active depuis {(current_time - last_activity).seconds}s")
            else:
                logger.warning("‚ö†Ô∏è Room non disponible, arr√™t de la surveillance")
                break
                
        except Exception as e:
            logger.error(f"‚ùå Erreur dans la surveillance: {e}")
            await asyncio.sleep(5)  # Attendre avant de retry

# ==========================================
# GESTIONNAIRE D'EXERCICES MODULAIRE
# ==========================================

class ExerciseManager:
    """Gestionnaire centralis√© des exercices pour faciliter l'ajout de nouveaux types"""
    
    @staticmethod
    def get_exercise_from_metadata(metadata: str) -> ExerciseConfig:
        """D√©termine l'exercice √† partir des m√©tadonn√©es"""
        logger.info("üîç EXERCICE MANAGER - PARSING M√âTADONN√âES")
        logger.info("="*50)
        logger.info(f"üì• Input metadata: '{metadata}'")
        logger.info(f"üì• Type input: {type(metadata)}")
        logger.info(f"üì• Longueur: {len(metadata) if metadata else 0}")
        
        try:
            import json
            logger.info("üîÑ Tentative de parsing JSON...")
            
            data = json.loads(metadata) if metadata else {}
            logger.info(f"‚úÖ Parsing JSON r√©ussi!")
            logger.info(f"üìã Donn√©es pars√©es: {data}")
            logger.info(f"üìã Cl√©s disponibles: {list(data.keys()) if data else []}")
            
            exercise_type = data.get('exercise_type', 'confidence_boost')
            logger.info(f"üéØ exercise_type extrait: '{exercise_type}'")
            
            # Extraire aussi ai_character pour diagnostic
            ai_character = data.get('ai_character', 'unknown')
            logger.info(f"üé≠ ai_character extrait: '{ai_character}'")
            
            # Log de la logique de s√©lection
            logger.info("üîÑ Logique de s√©lection d'exercice:")
            
            # EXERCICES INDIVIDUELS UNIQUEMENT
            # Les exercices multi-agents doivent √™tre g√©r√©s par multi_agent_main.py
            if exercise_type in ['studio_situations_pro', 'studio_debate_tv', 'studio_job_interview',
                                'studio_boardroom', 'studio_sales_conference', 'studio_keynote']:
                logger.error(f"   ‚ùå ERREUR: Exercice multi-agents '{exercise_type}' d√©tect√© dans main.py")
                logger.error("   ‚ö†Ô∏è Ce type d'exercice doit √™tre g√©r√© par le syst√®me multi-agents")
                logger.warning("   üîÑ Fallback vers confidence_boost")
                result = ExerciseTemplates.confidence_boost()
            elif exercise_type == 'job_interview':
                logger.info("   ‚úÖ S√âLECTION: job_interview (individuel)")
                result = ExerciseTemplates.job_interview()
            elif exercise_type == 'confidence_boost':
                logger.info("   ‚úÖ S√âLECTION: confidence_boost (individuel)")
                result = ExerciseTemplates.confidence_boost()
            elif exercise_type == 'cosmic_voice_control':
                logger.info("   ‚úÖ S√âLECTION: cosmic_voice_control")
                result = ExerciseTemplates.cosmic_voice_control()
            elif exercise_type == 'tribunal_idees_impossibles':
                logger.info("   ‚úÖ S√âLECTION: tribunal_idees_impossibles")
                result = ExerciseTemplates.tribunal_idees_impossibles()
            else:
                logger.warning(f"   ‚ö†Ô∏è Type d'exercice inconnu: '{exercise_type}', utilisation confidence_boost par d√©faut")
                result = ExerciseTemplates.confidence_boost()
            
            logger.info(f"üéØ EXERCICE S√âLECTIONN√â:")
            logger.info(f"   - ID: '{result.exercise_id}'")
            logger.info(f"   - Titre: '{result.title}'")
            logger.info(f"   - Personnage: '{result.ai_character}'")
            logger.info("="*50)
            return result
                
        except Exception as e:
            logger.error("‚ùå ERREUR PARSING M√âTADONN√âES")
            logger.error(f"   Exception: {e}")
            logger.error(f"   Type exception: {type(e)}")
            logger.error(f"   Metadata probl√©matique: '{metadata}'")
            logger.error("   üîÑ Fallback vers confidence_boost")
            logger.info("="*50)
            return ExerciseTemplates.confidence_boost()
    
    
    @staticmethod
    def add_new_exercise_type(exercise_id: str, config: ExerciseConfig):
        """Permet d'ajouter facilement de nouveaux types d'exercices"""
        # Cette m√©thode peut √™tre √©tendue pour permettre l'ajout dynamique
        # d'exercices depuis une configuration externe ou une base de donn√©es
        pass

# ==========================================
# ANALYSEUR DE PITCH TEMPS R√âEL POUR COSMIC VOICE
# ==========================================

import numpy as np
import webrtcvad
import collections
import struct
import requests

class RealTimePitchAnalyzer:
    """Analyseur de fr√©quence vocale en temps r√©el pour cosmic_voice"""
    
    def __init__(self, sample_rate: int = 16000, frame_duration_ms: int = 30):
        self.sample_rate = sample_rate
        self.frame_duration_ms = frame_duration_ms
        self.frame_size = int(sample_rate * frame_duration_ms / 1000)
        self.vad = webrtcvad.Vad(1)  # Agressivit√© mod√©r√©e
        self.pitch_history = collections.deque(maxlen=10)
        
        logger.info(f"üéµ RealTimePitchAnalyzer initialis√©:")
        logger.info(f"   - Sample rate: {sample_rate}Hz")
        logger.info(f"   - Frame duration: {frame_duration_ms}ms")
        logger.info(f"   - Frame size: {self.frame_size} samples")
        
    def analyze_pitch(self, audio_frame: bytes) -> Dict[str, float]:
        """Analyse le pitch d'un frame audio"""
        try:
            # Convertir bytes en numpy array
            audio_data = np.frombuffer(audio_frame, dtype=np.int16)
            
            # V√©rifier la taille du frame
            if len(audio_data) != self.frame_size:
                logger.debug(f"üéµ Frame size mismatch: {len(audio_data)} != {self.frame_size}")
                return self._default_pitch_data()
            
            # VAD (Voice Activity Detection)
            is_speech = self.vad.is_speech(audio_frame, self.sample_rate)
            if not is_speech:
                logger.debug("üéµ Pas de voix d√©tect√©e")
                return self._default_pitch_data()
            
            # Analyse de fr√©quence fondamentale (F0) via autocorrelation
            pitch_hz = self._estimate_fundamental_frequency(audio_data)
            
            # Normaliser pour contr√¥le du vaiseau (pitch = 0.0 √† 1.0)
            normalized_pitch = self._normalize_pitch(pitch_hz)
            
            # Filtrage et lissage
            self.pitch_history.append(normalized_pitch)
            smoothed_pitch = np.mean(list(self.pitch_history))
            
            pitch_data = {
                'pitch': float(smoothed_pitch),
                'frequency': float(pitch_hz),
                'normalized_pitch': float(normalized_pitch),
                'is_speech': is_speech,
                'timestamp': datetime.now().isoformat()
            }
            
            logger.debug(f"üéµ Pitch analys√©: {pitch_hz:.1f}Hz ‚Üí normalized={normalized_pitch:.3f}")
            return pitch_data
            
        except Exception as e:
            logger.error(f"‚ùå Erreur analyse pitch: {e}")
            return self._default_pitch_data()
    
    def _estimate_fundamental_frequency(self, audio_data: np.ndarray) -> float:
        """Estime la fr√©quence fondamentale via autocorrelation"""
        try:
            # Fen√™trage Hamming pour r√©duire les artefacts
            windowed = audio_data * np.hamming(len(audio_data))
            
            # Autocorrelation
            autocorr = np.correlate(windowed, windowed, mode='full')
            autocorr = autocorr[len(autocorr)//2:]
            
            # Recherche du pic principal (excluant le pic √† lag=0)
            min_period = int(self.sample_rate / 800)  # ~800Hz max
            max_period = int(self.sample_rate / 50)   # ~50Hz min
            
            if max_period >= len(autocorr):
                return 150.0  # Fr√©quence par d√©faut
                
            peak_idx = np.argmax(autocorr[min_period:max_period]) + min_period
            
            if peak_idx > 0:
                frequency = self.sample_rate / peak_idx
                # Validation de plage vocale humaine (50-800Hz)
                if 50 <= frequency <= 800:
                    return frequency
                    
            return 150.0  # Fr√©quence par d√©faut si hors plage
            
        except Exception as e:
            logger.debug(f"üéµ Erreur estimation F0: {e}")
            return 150.0
    
    def _normalize_pitch(self, pitch_hz: float) -> float:
        """Normalise le pitch pour contr√¥le du vaiseau (0.0-1.0)"""
        # Plage vocale typique: 80-400Hz
        min_pitch = 80.0
        max_pitch = 400.0
        
        # Normalisation logarithmique pour meilleure sensibilit√©
        log_pitch = np.log(max(pitch_hz, min_pitch))
        log_min = np.log(min_pitch)
        log_max = np.log(max_pitch)
        
        normalized = (log_pitch - log_min) / (log_max - log_min)
        return np.clip(normalized, 0.0, 1.0)
    
    def _default_pitch_data(self) -> Dict[str, float]:
        """Donn√©es par d√©faut quand pas de voix"""
        return {
            'pitch': 0.5,  # Position neutre
            'frequency': 0.0,
            'normalized_pitch': 0.5,
            'is_speech': False,
            'timestamp': datetime.now().isoformat()
        }

class CosmicVoiceAgent:
    """Agent sp√©cialis√© pour l'exercice cosmic_voice avec transmission pitch"""
    
    def __init__(self, session_id: str, backend_websocket_url: str):
        self.session_id = session_id
        self.backend_websocket_url = backend_websocket_url
        self.pitch_analyzer = RealTimePitchAnalyzer()
        self.backend_socket = None
        self.is_active = False
        
        logger.info(f"üöÄ CosmicVoiceAgent initialis√©:")
        logger.info(f"   - Session: {session_id}")
        logger.info(f"   - WebSocket URL: {backend_websocket_url}")
        
    async def start_backend_connection(self):
        """√âtablit la connexion WebSocket avec le backend"""
        try:
            import websockets
            self.backend_socket = await websockets.connect(self.backend_websocket_url)
            self.is_active = True
            logger.info(f"‚úÖ Connexion WebSocket backend √©tablie: {self.backend_websocket_url}")
        except Exception as e:
            logger.error(f"‚ùå √âchec connexion WebSocket backend: {e}")
            self.is_active = False
    
    async def send_pitch_data(self, pitch_data: Dict[str, float]):
        """Envoie les donn√©es pitch vers le backend"""
        if not self.is_active or not self.backend_socket:
            return
            
        try:
            message = {
                'type': 'pitch_data',
                'session_id': self.session_id,
                'data': pitch_data
            }
            
            import json
            await self.backend_socket.send(json.dumps(message))
            logger.debug(f"üéµ Pitch envoy√©: {pitch_data['pitch']:.3f}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur envoi pitch: {e}")
            self.is_active = False
    
    async def process_audio_frame(self, audio_frame: bytes):
        """Traite un frame audio et envoie les donn√©es pitch"""
        pitch_data = self.pitch_analyzer.analyze_pitch(audio_frame)
        await self.send_pitch_data(pitch_data)
    
    async def stop(self):
        """Arr√™te l'agent et ferme les connexions"""
        self.is_active = False
        if self.backend_socket:
            await self.backend_socket.close()
            logger.info("üõë Connexion WebSocket backend ferm√©e")

if __name__ == "__main__":
    """Point d'entr√©e principal robuste avec fallbacks"""
    logger.info("üéØ D√âMARRAGE WORKER LIVEKIT ROBUSTE AVEC FRAMEWORK MODULAIRE")
    
    # Configuration WorkerOptions avec l'entrypoint robuste
    worker_options = agents.WorkerOptions(
        entrypoint_fnc=robust_entrypoint
    )
    
    logger.info("üéØ WorkerOptions configur√© avec agent robuste")
    logger.info(f"   - Framework modulaire: ‚úÖ")
    logger.info(f"   - Gestion des reconnexions: ‚úÖ")
    logger.info(f"   - Keep-alive int√©gr√©: ‚úÖ")
    logger.info(f"   - Fallbacks multiples: ‚úÖ")
    
    # Point d'entr√©e officiel avec CLI LiveKit
    agents.cli.run_app(worker_options)
