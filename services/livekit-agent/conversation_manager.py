"""
Gestionnaire de conversations pour Eloquence
G√®re les tours de parole, silences et continuit√© conversationnelle
"""
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional, Callable
from livekit.agents import AgentSession
from conversation_health_monitor import ConversationHealthMonitor

logger = logging.getLogger(__name__)

class ConversationManager:
    """G√®re les tours de parole et la continuit√© conversationnelle"""
    
    def __init__(self, agent_session: AgentSession, exercise_config, silence_timeout=8.0):
        self.agent_session = agent_session
        self.exercise_config = exercise_config
        self.silence_timeout = silence_timeout
        self.last_user_speech = None
        self.last_ai_response = None
        self.conversation_active = True
        self.silence_count = 0
        self.total_interactions = 0
        
        # NOUVEAU: Monitoring de sant√©
        self.health_monitor = ConversationHealthMonitor(exercise_config.exercise_id)
        
        # Configurer les callbacks avec le health monitor
        self.on_interaction_complete = self.health_monitor.log_interaction
        self.on_silence_timeout = self.health_monitor.log_silence_timeout
        
        logger.info(f"üéØ ConversationManager initialis√© pour {exercise_config.exercise_id}")
    
    async def start_conversation_monitoring(self):
        """D√©marre la surveillance de la conversation"""
        logger.info("üîÑ D√©marrage surveillance conversationnelle")
        
        # T√¢che de surveillance des silences
        silence_task = asyncio.create_task(self.monitor_silence())
        
        # Message de bienvenue si configur√©
        if self.exercise_config.welcome_message:
            await self.send_ai_message(self.exercise_config.welcome_message)
        
        return silence_task
    
    async def handle_user_speech_end(self, user_message: str):
        """Appel√© quand l'utilisateur arr√™te de parler"""
        logger.info(f"üë§ Fin de parole utilisateur: '{user_message[:50]}...'")
        
        self.last_user_speech = datetime.now()
        self.total_interactions += 1
        
        # Attendre un court d√©lai pour s'assurer que l'utilisateur a fini
        await asyncio.sleep(1.0)
        
        # G√©n√©rer et envoyer la r√©ponse IA
        start_time = datetime.now()
        ai_response = await self.generate_ai_response(user_message)
        response_time = (datetime.now() - start_time).total_seconds()
        
        if ai_response:
            await self.send_ai_message(ai_response)
            self.last_ai_response = datetime.now()
            
            # Callback pour monitoring
            if self.on_interaction_complete:
                await self.on_interaction_complete(user_message, ai_response, response_time)
        else:
            logger.error("‚ùå Aucune r√©ponse IA g√©n√©r√©e")
            await self.send_fallback_response()
    
    async def generate_ai_response(self, user_message: str) -> str:
        """G√©n√®re une r√©ponse IA contextuelle"""
        try:
            # Construire le contexte conversationnel
            context = self.build_conversation_context(user_message)
            
            # G√©n√©rer la r√©ponse via l'agent
            # Note: Adapter selon l'API LiveKit exacte
            response = await self.agent_session.generate_response(context)
            
            if response and len(response.strip()) > 0:
                logger.info(f"ü§ñ R√©ponse IA g√©n√©r√©e: '{response[:50]}...'")
                return response.strip()
            else:
                logger.warning("‚ö†Ô∏è R√©ponse IA vide")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration r√©ponse IA: {e}")
            return None
    
    def build_conversation_context(self, user_message: str) -> str:
        """Construit le contexte conversationnel"""
        context_parts = []
        
        # Instructions sp√©cialis√©es
        context_parts.append(self.exercise_config.instructions)
        
        # Contexte de silence si applicable
        if self.silence_count > 0:
            context_parts.append(f"\nCONTEXTE: L'utilisateur a √©t√© silencieux {self.silence_count} fois. Sois plus encourageant.")
        
        # Contexte d'interaction
        if self.total_interactions == 1:
            context_parts.append("\nCONTEXTE: Premi√®re interaction, sois accueillant.")
        elif self.total_interactions > 10:
            context_parts.append("\nCONTEXTE: Conversation avanc√©e, approfondis les sujets.")
        
        # Message utilisateur
        context_parts.append(f"\nUTILISATEUR: {user_message}")
        context_parts.append("\nR√âPONDS EN 1-2 PHRASES MAXIMUM:")
        
        return "\n".join(context_parts)
    
    async def send_ai_message(self, message: str):
        """Envoie un message IA √† l'utilisateur"""
        try:
            await self.agent_session.say(text=message)
            logger.info(f"ü§ñ Message IA envoy√©: '{message[:50]}...'")
        except Exception as e:
            logger.error(f"‚ùå Erreur envoi message IA: {e}")
    
    async def send_fallback_response(self):
        """Envoie une r√©ponse de fallback en cas d'erreur"""
        fallback_messages = {
            'confidence_boost': "Je vous √©coute attentivement. Continuez, vous vous en sortez tr√®s bien !",
            'tribunal_idees_impossibles': "Ma√Ætre, la cour vous √©coute. D√©veloppez votre argumentation.",
            'default': "Je vous √©coute. Continuez, s'il vous pla√Æt."
        }
        
        message = fallback_messages.get(
            self.exercise_config.exercise_id, 
            fallback_messages['default']
        )
        
        await self.send_ai_message(message)
    
    async def monitor_silence(self):
        """Surveille les silences et relance la conversation"""
        logger.info("üëÇ Surveillance des silences activ√©e")
        
        while self.conversation_active:
            await asyncio.sleep(2.0)
            
            if self.last_user_speech:
                silence_duration = (datetime.now() - self.last_user_speech).total_seconds()
                
                if silence_duration > self.silence_timeout:
                    await self.handle_silence_timeout(silence_duration)
                    self.last_user_speech = datetime.now()  # Reset timer
    
    async def handle_silence_timeout(self, silence_duration: float):
        """G√®re les timeouts de silence"""
        self.silence_count += 1
        logger.info(f"‚è∞ Timeout silence #{self.silence_count} apr√®s {silence_duration:.1f}s")
        
        # Messages de relance sp√©cialis√©s
        silence_messages = self.get_silence_messages()
        
        if self.silence_count <= len(silence_messages):
            message = silence_messages[self.silence_count - 1]
            await self.send_ai_message(message)
        else:
            # Silence prolong√©, message g√©n√©rique
            await self.send_ai_message("Je reste √† votre disposition quand vous souhaitez continuer.")
        
        # Callback pour monitoring
        if self.on_silence_timeout:
            await self.on_silence_timeout(silence_duration, self.silence_count)
    
    def get_silence_messages(self) -> list:
        """Retourne les messages de relance sp√©cialis√©s par exercice"""
        messages = {
            'confidence_boost': [
                "Je vous √©coute, prenez votre temps...",
                "N'h√©sitez pas √† partager ce qui vous passe par la t√™te.",
                "Voulez-vous qu'on commence par un exercice simple ?"
            ],
            'tribunal_idees_impossibles': [
                "Ma√Ætre, la cour attend votre argumentation...",
                "Prenez votre temps pour structurer votre plaidoirie.",
                "Souhaitez-vous que la cour vous propose une th√®se impossible ?"
            ],
            'studio_situations_pro': [
                "Prenez votre temps pour r√©fl√©chir...",
                "Y a-t-il un point sur lequel vous aimeriez revenir ?",
                "Voulez-vous qu'on aborde un autre aspect ?"
            ],
            'default': [
                "Je vous √©coute...",
                "Continuez quand vous √™tes pr√™t.",
                "Que souhaitez-vous faire maintenant ?"
            ]
        }
        
        return messages.get(self.exercise_config.exercise_id, messages['default'])
    
    def stop_conversation(self):
        """Arr√™te la surveillance de la conversation"""
        self.conversation_active = False
        self.health_monitor.stop_monitoring()
        logger.info("üõë Surveillance conversationnelle arr√™t√©e")
    
    def get_conversation_stats(self) -> dict:
        """Retourne les statistiques de conversation"""
        return {
            'total_interactions': self.total_interactions,
            'silence_timeouts': self.silence_count,
            'conversation_duration': (
                (datetime.now() - self.last_user_speech).total_seconds() 
                if self.last_user_speech else 0
            ),
            'last_activity': self.last_user_speech.isoformat() if self.last_user_speech else None
        }
    
    def get_health_report(self):
        """Retourne le rapport de sant√© conversationnelle"""
        return self.health_monitor.get_health_report()