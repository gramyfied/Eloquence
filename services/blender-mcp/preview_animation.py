#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Outil de pr√©visualisation des animations Blender MCP avant int√©gration
Permet de voir le code g√©n√©r√© et optionnellement l'ouvrir dans Blender
"""

import sys
import os
import subprocess
import json
from pathlib import Path
from datetime import datetime

# Ajouter le dossier parent au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

from eloquence_blender_tools import AnimationTemplates, PromptParser


def preview_prompt(prompt: str, show_code: bool = True, open_blender: bool = False):
    """
    Pr√©visualise une animation √† partir d'un prompt
    
    Args:
        prompt: Le prompt en langage naturel
        show_code: Afficher le code Python Blender g√©n√©r√©
        open_blender: Ouvrir automatiquement dans Blender
    """
    print("=" * 80)
    print(f"PREVISUALISATION : {prompt}")
    print("=" * 80)
    
    # 1. Analyser le prompt
    parser = PromptParser()
    try:
        result = parser.parse_prompt(prompt)
        print(f"‚úÖ Type d√©tect√© : {result['type']}")
        print(f"üìã Param√®tres : {result['params']}")
        print()
        
        # 2. G√©n√©rer le code correspondant
        templates = AnimationTemplates()
        params = result.get("params", {})
        code = None
        
        if result["type"] == "virelangue_roulette":
            code = templates.create_virelangue_roulette(
                segments=params.get("segments", 8)
            )
            print("üé∞ ROULETTE DES VIRELANGUES ELOQUENCE")
            print(f"   ‚Ä¢ {params.get('segments', 8)} segments")
            print("   ‚Ä¢ Couleurs Flutter int√©gr√©es")
            print("   ‚Ä¢ Virelangues fran√ßais")
            print("   ‚Ä¢ Animation 180 frames")
            
        elif result["type"] == "roulette":
            code = templates.create_spinning_roulette(
                segments=params.get("segments", 6),
                colors=params.get("colors")
            )
            print("üé∞ ROULETTE CASINO")
            print(f"   ‚Ä¢ {params.get('segments', 6)} segments")
            if params.get('colors'):
                print(f"   ‚Ä¢ Couleurs : {params['colors']}")
            print("   ‚Ä¢ Animation 120 frames")
            
        elif result["type"] == "bouncing_cube":
            code = templates.create_bouncing_cube(
                bounces=params.get("bounces", 3)
            )
            print("üßä CUBE REBONDISSANT")
            print(f"   ‚Ä¢ {params.get('bounces', 3)} rebonds")
            print("   ‚Ä¢ Couleur orange par d√©faut")
            print("   ‚Ä¢ Physique r√©aliste")
            
        elif result["type"] == "logo_text":
            code = templates.create_rotating_logo_text(
                text=params.get("text", "ELOQUENCE")
            )
            print("‚ú® LOGO TEXTE 3D")
            print(f"   ‚Ä¢ Texte : '{params.get('text', 'ELOQUENCE')}'")
            print("   ‚Ä¢ Mat√©riau dor√©")
            print("   ‚Ä¢ Animation apparition + rotation")
            
        else:
            print("‚ùå Type d'animation non reconnu")
            return
        
        print(f"üìè Code g√©n√©r√© : {len(code)} caract√®res")
        print()
        
        # 3. Afficher le code si demand√©
        if show_code:
            print("=" * 80)
            print("üêç CODE PYTHON BLENDER G√âN√âR√â")
            print("=" * 80)
            print(code)
            print("=" * 80)
            print()
        
        # 4. Sauvegarder dans un fichier temporaire
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"preview_{result['type']}_{timestamp}.py"
        filepath = Path(__file__).parent / "temp" / filename
        
        # Cr√©er le dossier temp s'il n'existe pas
        filepath.parent.mkdir(exist_ok=True)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(code)
        
        print(f"üíæ Code sauvegard√© : {filepath}")
        
        # 5. Ouvrir dans Blender si demand√©
        if open_blender:
            try:
                blender_cmd = ["blender", "--python", str(filepath)]
                print(f"üöÄ Ouverture dans Blender...")
                subprocess.Popen(blender_cmd)
                print("‚úÖ Blender lanc√© avec le script !")
            except FileNotFoundError:
                print("‚ùå Blender non trouv√©. Installez Blender ou ajoutez-le au PATH")
                print(f"   Vous pouvez ex√©cuter manuellement : blender --python {filepath}")
        
        return {
            "type": result["type"],
            "params": params,
            "code_length": len(code),
            "filepath": str(filepath)
        }
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la pr√©visualisation : {e}")
        return None


def interactive_preview():
    """Mode interactif pour tester plusieurs prompts"""
    print("üé® OUTIL DE PR√âVISUALISATION BLENDER MCP ELOQUENCE")
    print("=" * 60)
    print()
    print("Entrez vos prompts pour voir les animations g√©n√©r√©es.")
    print("Commandes sp√©ciales :")
    print("  'exit' ou 'quit' - Quitter")
    print("  'blender' - Ouvrir la derni√®re animation dans Blender")
    print("  'examples' - Voir des exemples de prompts")
    print()
    
    last_result = None
    
    while True:
        try:
            prompt = input("üéØ Prompt > ").strip()
            
            if prompt.lower() in ['exit', 'quit', 'q']:
                print("üëã Au revoir !")
                break
                
            elif prompt.lower() == 'blender':
                if last_result and last_result.get('filepath'):
                    try:
                        subprocess.Popen(["blender", "--python", last_result['filepath']])
                        print("üöÄ Blender lanc√© !")
                    except FileNotFoundError:
                        print("‚ùå Blender non trouv√©")
                else:
                    print("‚ùå Aucune animation √† ouvrir")
                continue
                
            elif prompt.lower() == 'examples':
                print_examples()
                continue
                
            elif not prompt:
                continue
            
            # Pr√©visualiser le prompt
            print()
            last_result = preview_prompt(prompt, show_code=False)
            print()
            
        except KeyboardInterrupt:
            print("\nüëã Au revoir !")
            break
        except EOFError:
            break


def print_examples():
    """Affiche des exemples de prompts"""
    print("üí° EXEMPLES DE PROMPTS")
    print("=" * 40)
    print()
    print("üé∞ VIRELANGUES ELOQUENCE :")
    print('   "Roulette des virelangues magiques"')
    print('   "Tongue twister wheel Eloquence"')
    print('   "Virelangue roulette avec 6 segments"')
    print()
    print("üé∞ ROULETTES CASINO :")
    print('   "Roulette casino 8 segments"')
    print('   "Roue rouge et noire 6 parts"')
    print('   "Wheel color√© 12 segments"')
    print()
    print("üßä CUBES REBONDISSANTS :")
    print('   "Cube orange qui rebondit 3 fois"')
    print('   "Box rouge qui saute 5 fois"')
    print('   "Cube rebondissant bleu"')
    print()
    print("‚ú® LOGOS 3D :")
    print('   "Logo ELOQUENCE dor√© qui tourne"')
    print('   "Texte \'BONJOUR\' qui appara√Æt"')
    print('   "Logo m√©tallique qui brille"')
    print()


def batch_preview(prompts_file: str):
    """Pr√©visualise plusieurs prompts depuis un fichier JSON"""
    try:
        with open(prompts_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        prompts = data.get('prompts', [])
        print(f"üìã Pr√©visualisation de {len(prompts)} prompts...")
        print()
        
        results = []
        for i, prompt in enumerate(prompts, 1):
            print(f"[{i}/{len(prompts)}]")
            result = preview_prompt(prompt, show_code=False)
            if result:
                results.append({"prompt": prompt, "result": result})
            print("-" * 60)
        
        # Sauvegarder le rapport
        report_file = Path(prompts_file).with_suffix('.report.json')
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print(f"üìä Rapport sauvegard√© : {report_file}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du traitement batch : {e}")


def main():
    """Fonction principale"""
    if len(sys.argv) > 1:
        if sys.argv[1] == '--interactive':
            interactive_preview()
        elif sys.argv[1] == '--batch' and len(sys.argv) > 2:
            batch_preview(sys.argv[2])
        else:
            # Prompt direct en argument
            prompt = ' '.join(sys.argv[1:])
            preview_prompt(prompt, show_code=True, open_blender=False)
    else:
        # Mode interactif par d√©faut
        interactive_preview()


if __name__ == "__main__":
    main()