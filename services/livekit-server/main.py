import os
import time
import uuid
import json
import jwt
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional, Dict, List
import logging
from datetime import datetime, timedelta

# Import du SDK officiel LiveKit
from livekit import api

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="LiveKit Token Service")

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configuration LiveKit depuis les variables d'environnement
LIVEKIT_API_KEY = os.getenv("LIVEKIT_API_KEY", "devkey")
LIVEKIT_API_SECRET = os.getenv("LIVEKIT_API_SECRET", "devsecret123456789abcdef0123456789abcdef")
LIVEKIT_URL = os.getenv("LIVEKIT_URL", "ws://localhost:7880")

# Cache de tokens actifs (en production, utiliser Redis)
active_tokens: Dict[str, Dict] = {}

def create_manual_livekit_token(
    api_key: str,
    secret_key: str,
    identity: str,
    room_name: str,
    grants: Optional[Dict] = None,
    metadata: Optional[Dict] = None,
    validity_hours: int = 24
) -> str:
    """
    G√©n√®re un token JWT LiveKit manuellement avec format correct pour les m√©tadonn√©es
    
    Cette fonction √©vite les probl√®mes du SDK Python en cr√©ant directement
    le JWT avec le format attendu par le serveur LiveKit Go.
    """
    try:
        now = int(time.time())
        exp = now + (validity_hours * 60 * 60)
        
        # Configuration des grants par d√©faut
        default_grants = grants or {}
        
        # Cr√©er le payload JWT
        payload = {
            "exp": exp,
            "iss": api_key,
            "sub": identity,
            "name": identity,
            "video": {
                "roomJoin": default_grants.get("roomJoin", True),
                "room": room_name,
                "canPublish": default_grants.get("canPublish", True),
                "canSubscribe": default_grants.get("canSubscribe", True),
                "canPublishData": default_grants.get("canPublishData", True),
                "canUpdateOwnMetadata": default_grants.get("canUpdateOwnMetadata", True),
                "roomRecord": default_grants.get("roomRecord", False),
                "roomAdmin": default_grants.get("roomAdmin", False),
                "roomCreate": default_grants.get("roomCreate", False),
                "roomList": default_grants.get("roomList", False),
            }
        }
        
        # Ajouter les m√©tadonn√©es UNIQUEMENT si elles existent et ne sont pas vides
        # Format correct : string JSON, pas objet JSON
        if metadata and len(metadata) > 0:
            payload["metadata"] = json.dumps(metadata)
        # Si pas de m√©tadonn√©es, ne pas ajouter le champ du tout
        
        # G√©n√©rer le token JWT
        token = jwt.encode(payload, secret_key, algorithm="HS256")
        
        logger.info(f"‚úÖ Token JWT manuel cr√©√©: {len(token)} chars")
        if metadata:
            logger.info(f"üì¶ M√©tadonn√©es incluses: {list(metadata.keys())}")
        else:
            logger.info("üì¶ Aucune m√©tadonn√©e (champ omis)")
            
        return token
        
    except Exception as e:
        logger.error(f"‚ùå Erreur cr√©ation JWT manuel: {e}")
        raise Exception(f"Erreur g√©n√©ration token manuel: {e}")

class TokenRequest(BaseModel):
    """Requ√™te de g√©n√©ration de token"""
    room_name: str
    participant_name: str
    participant_identity: Optional[str] = None
    grants: Optional[Dict] = None
    metadata: Optional[Dict] = None
    validity_hours: Optional[int] = 24

class TokenResponse(BaseModel):
    """R√©ponse avec token JWT"""
    token: str
    expires_at: str
    room_name: str
    participant_identity: str
    livekit_url: str

class RoomInfo(BaseModel):
    """Informations sur une room"""
    room_name: str
    participant_count: int
    created_at: str
    scenario_type: Optional[str] = None

@app.get("/health")
def health_check():
    """V√©rification de sant√© du service"""
    return {
        "status": "healthy",
        "service": "livekit-token-service",
        "timestamp": datetime.now().isoformat(),
        "livekit_url": LIVEKIT_URL
    }

@app.post("/generate-token", response_model=TokenResponse)
async def generate_token(request: TokenRequest):
    """
    G√©n√®re un token JWT pour LiveKit avec le SDK officiel
    
    Le token contient :
    - Identit√© du participant
    - Permissions (publish, subscribe, etc.)
    - M√©tadonn√©es personnalis√©es
    - Dur√©e de validit√©
    """
    try:
        logger.info(f"G√©n√©ration token pour {request.participant_name} dans {request.room_name}")
        
        # G√©n√©rer une identit√© unique si non fournie
        participant_identity = request.participant_identity or f"{request.participant_name}_{uuid.uuid4().hex[:8]}"
        
        # Calculer l'expiration
        now = datetime.now()
        expires_at = now + timedelta(hours=request.validity_hours or 24)
        
        # Configurer les variables d'environnement pour le SDK
        os.environ["LIVEKIT_API_KEY"] = LIVEKIT_API_KEY
        os.environ["LIVEKIT_API_SECRET"] = LIVEKIT_API_SECRET
        
        # Permissions par d√©faut
        default_grants = request.grants or {}
        
        # Cr√©er les grants avec le SDK LiveKit
        video_grants = api.VideoGrants(
            room_join=default_grants.get("roomJoin", True),
            room=request.room_name,
            can_publish=default_grants.get("canPublish", True),
            can_subscribe=default_grants.get("canSubscribe", True),
            can_publish_data=default_grants.get("canPublishData", True),
            can_update_own_metadata=default_grants.get("canUpdateOwnMetadata", True),
            room_record=default_grants.get("roomRecord", False),
            room_admin=default_grants.get("roomAdmin", False),
            room_create=default_grants.get("roomCreate", False),
            room_list=default_grants.get("roomList", False),
        )
        
        # Cr√©er le token avec le SDK officiel
        access_token = api.AccessToken() \
            .with_identity(participant_identity) \
            .with_name(request.participant_name) \
            .with_grants(video_grants)
        
        # Ajouter les m√©tadonn√©es SEULEMENT si pr√©sentes et non vides
        # Note: LiveKit Go server attend une string, pas un objet JSON vide
        if request.metadata and len(request.metadata) > 0:
            # Convertir les m√©tadonn√©es en string JSON pour compatibilit√©
            metadata_str = json.dumps(request.metadata)
            access_token = access_token.with_metadata(metadata_str)
        # Si pas de m√©tadonn√©es, on ne fait RIEN - pas d'appel √† with_metadata()
        
        # Configurer la dur√©e de validit√©
        validity_seconds = (request.validity_hours or 24) * 3600
        access_token = access_token.with_ttl(validity_seconds)
        
        # üîß CORRECTION FINALE: Utiliser UNIQUEMENT la g√©n√©ration manuelle
        # pour garantir le format string des m√©tadonn√©es
        logger.info("üîß Utilisation g√©n√©ration JWT manuelle pour m√©tadonn√©es string")
        token = create_manual_livekit_token(
            api_key=LIVEKIT_API_KEY,
            secret_key=LIVEKIT_API_SECRET,
            identity=participant_identity,
            room_name=request.room_name,
            grants=request.grants,
            metadata=request.metadata,
            validity_hours=request.validity_hours or 24
        )
        
        # V√©rification suppl√©mentaire du format des m√©tadonn√©es dans le JWT
        import jwt as jwt_lib
        try:
            decoded = jwt_lib.decode(token, options={"verify_signature": False})
            metadata_in_jwt = decoded.get("metadata")
            if metadata_in_jwt:
                logger.info(f"‚úÖ JWT v√©rifi√© - m√©tadonn√©es type: {type(metadata_in_jwt)}")
                if isinstance(metadata_in_jwt, str):
                    logger.info("‚úÖ M√©tadonn√©es JWT au format string correct")
                else:
                    logger.error("‚ùå M√©tadonn√©es JWT encore en format objet!")
            else:
                logger.info("‚úÖ JWT sans m√©tadonn√©es (correct)")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Impossible de v√©rifier JWT: {e}")
        
        # Stocker dans le cache
        active_tokens[participant_identity] = {
            "token": token,
            "room_name": request.room_name,
            "expires_at": expires_at.isoformat(),
            "created_at": now.isoformat(),
            "metadata": request.metadata
        }
        
        logger.info(f"‚úÖ Token LiveKit MANUEL g√©n√©r√© avec succ√®s pour {participant_identity}")
        
        return TokenResponse(
            token=token,
            expires_at=expires_at.isoformat(),
            room_name=request.room_name,
            participant_identity=participant_identity,
            livekit_url=LIVEKIT_URL
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration token SDK: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur g√©n√©ration token: {str(e)}")

@app.post("/refresh-token")
async def refresh_token(old_token: str):
    """
    Renouvelle un token existant
    
    Note: Avec le SDK LiveKit, il est recommand√© de simplement g√©n√©rer
    un nouveau token plut√¥t que de d√©coder l'ancien
    """
    try:
        # Chercher le token dans le cache pour r√©cup√©rer les informations
        participant_identity = None
        token_info = None
        
        for identity, info in active_tokens.items():
            if info["token"] == old_token:
                participant_identity = identity
                token_info = info
                break
        
        if not token_info:
            raise HTTPException(status_code=404, detail="Token non trouv√© dans le cache")
        
        # Cr√©er une nouvelle requ√™te avec les m√™mes informations
        request = TokenRequest(
            room_name=token_info["room_name"],
            participant_name=participant_identity.split("_")[0],  # Extraire le nom
            participant_identity=participant_identity,
            metadata=token_info.get("metadata", {})
        )
        
        # G√©n√©rer un nouveau token
        return await generate_token(request)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erreur renouvellement token: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur renouvellement: {str(e)}")

@app.delete("/revoke-token/{participant_identity}")
async def revoke_token(participant_identity: str):
    """
    R√©voque un token pour un participant
    
    Note: Cela ne d√©connecte pas imm√©diatement le participant de LiveKit,
    mais emp√™che la r√©utilisation du token
    """
    if participant_identity in active_tokens:
        del active_tokens[participant_identity]
        logger.info(f"Token r√©voqu√© pour {participant_identity}")
        return {"status": "revoked", "participant_identity": participant_identity}
    else:
        raise HTTPException(status_code=404, detail="Token non trouv√©")

@app.get("/active-rooms", response_model=List[RoomInfo])
async def get_active_rooms():
    """
    Liste les rooms actives bas√©es sur les tokens g√©n√©r√©s
    
    Note: En production, cette information devrait venir directement de l'API LiveKit
    """
    rooms = {}
    
    for identity, token_info in active_tokens.items():
        room_name = token_info["room_name"]
        if room_name not in rooms:
            rooms[room_name] = {
                "room_name": room_name,
                "participant_count": 0,
                "created_at": token_info["created_at"],
                "scenario_type": token_info.get("metadata", {}).get("scenario")
            }
        rooms[room_name]["participant_count"] += 1
    
    return list(rooms.values())

@app.get("/room/{room_name}/participants")
async def get_room_participants(room_name: str):
    """
    Liste les participants d'une room
    """
    participants = []
    
    for identity, token_info in active_tokens.items():
        if token_info["room_name"] == room_name:
            participants.append({
                "identity": identity,
                "joined_at": token_info["created_at"],
                "metadata": token_info.get("metadata", {})
            })
    
    if not participants:
        raise HTTPException(status_code=404, detail="Room non trouv√©e")
    
    return {
        "room_name": room_name,
        "participant_count": len(participants),
        "participants": participants
    }

@app.post("/cleanup-expired")
async def cleanup_expired_tokens():
    """
    Nettoie les tokens expir√©s du cache
    """
    now = datetime.now()
    expired = []
    
    for identity, token_info in list(active_tokens.items()):
        expires_at = datetime.fromisoformat(token_info["expires_at"])
        if expires_at < now:
            expired.append(identity)
            del active_tokens[identity]
    
    logger.info(f"Nettoyage: {len(expired)} tokens expir√©s supprim√©s")
    
    return {
        "cleaned": len(expired),
        "remaining": len(active_tokens)
    }

# Configuration sp√©cifique pour les sc√©narios Eloquence
@app.post("/confidence-boost/token")
async def generate_confidence_boost_token(
    scenario_id: str,
    scenario_title: str,
    user_id: str,
    session_id: str,
    ai_character: Optional[str] = "thomas"
):
    """
    G√©n√®re un token sp√©cialement configur√© pour Confidence Boost
    """
    request = TokenRequest(
        room_name=f"confidence_boost_{scenario_id}_{session_id}",
        participant_name=f"user_{user_id}",
        grants={
            "roomJoin": True,
            "canPublish": True,
            "canSubscribe": True,
            "canPublishData": True,
            "roomRecord": False,  # Enregistrement g√©r√© c√¥t√© VOSK
        },
        metadata={
            "scenario": scenario_title,
            "scenario_id": scenario_id,
            "session_id": session_id,
            "ai_character": ai_character,
            "timestamp": datetime.now().isoformat()
        }
    )
    
    return await generate_token(request)

# Webhook pour les √©v√©nements LiveKit (optionnel)
@app.post("/webhook/livekit")
async def livekit_webhook(event: Dict):
    """
    Re√ßoit les √©v√©nements de LiveKit (participant joined, left, etc.)
    
    N√©cessite la configuration du webhook dans LiveKit
    """
    logger.info(f"√âv√©nement LiveKit re√ßu: {event.get('event')}")
    
    # Traiter selon le type d'√©v√©nement
    event_type = event.get("event")
    
    if event_type == "participant_joined":
        logger.info(f"Participant rejoint: {event.get('participant', {}).get('identity')}")
    elif event_type == "participant_left":
        logger.info(f"Participant parti: {event.get('participant', {}).get('identity')}")
    elif event_type == "room_started":
        logger.info(f"Room d√©marr√©e: {event.get('room', {}).get('name')}")
    elif event_type == "room_finished":
        logger.info(f"Room termin√©e: {event.get('room', {}).get('name')}")
    
    return {"status": "received"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8004)