#!/usr/bin/env python3
"""
üîß CORRECTIF TRIBUNAL DES ID√âES - Configuration LiveKit TTS
R√©sout le probl√®me d'absence d'interaction IA dans l'exercice "Tribunal des Id√©es Impossibles"

PROBL√àME IDENTIFI√â:
- L'√©cran tribunal_idees_screen.dart n'utilise pas le provider LiveKit correct
- Il cr√©e un sc√©nario manuellement au lieu d'utiliser le syst√®me unifi√©
- Il n'utilise pas confidence_livekit_provider qui fonctionne dans confidence_boost

SOLUTION:
- Modifier tribunal_idees_screen.dart pour utiliser ConfidenceBoostLiveKitScreen
- Cr√©er un sc√©nario pr√©d√©fini pour le tribunal des id√©es
- Assurer la compatibilit√© avec le syst√®me LiveKit existant
"""

import os
import shutil
from datetime import datetime

def create_backup(file_path):
    """Cr√©er une sauvegarde du fichier original"""
    if os.path.exists(file_path):
        backup_path = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        shutil.copy2(file_path, backup_path)
        print(f"‚úÖ Sauvegarde cr√©√©e: {backup_path}")
        return backup_path
    return None

def fix_tribunal_idees_screen():
    """Corriger l'√©cran du tribunal des id√©es pour utiliser LiveKit"""
    
    tribunal_screen_path = "frontend/flutter_app/lib/features/confidence_boost/presentation/screens/tribunal_idees_screen.dart"
    
    if not os.path.exists(tribunal_screen_path):
        print(f"‚ùå Fichier non trouv√©: {tribunal_screen_path}")
        return False
    
    # Cr√©er une sauvegarde
    create_backup(tribunal_screen_path)
    
    # Nouveau contenu utilisant le syst√®me LiveKit unifi√©
    new_content = '''import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../domain/entities/confidence_scenario.dart';
import 'confidence_boost_livekit_screen.dart';

/// √âcran Tribunal des Id√©es Impossibles
/// Utilise maintenant le syst√®me LiveKit unifi√© via ConfidenceBoostLiveKitScreen
class TribunalIdeesScreen extends ConsumerWidget {
  const TribunalIdeesScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // üîß FIX: Cr√©er le sc√©nario Tribunal des Id√©es avec la configuration correcte
    final tribunalScenario = ConfidenceScenario(
      id: 'tribunal_idees_impossibles',
      title: 'Tribunal des Id√©es Impossibles',
      description: 'D√©fendez des id√©es impossibles devant un tribunal bienveillant. '
                  'Exercez votre √©loquence en argumentant pour des concepts fantaisistes '
                  'avec conviction et cr√©ativit√©.',
      difficulty: ScenarioDifficulty.intermediate,
      estimatedDuration: const Duration(minutes: 15),
      tags: ['argumentation', 'cr√©ativit√©', '√©loquence', 'd√©bat'],
      aiCharacter: 'thomas', // Utilise le m√™me personnage IA que les autres exercices
      systemPrompt: '''Tu es Thomas, un juge bienveillant mais exigeant du Tribunal des Id√©es Impossibles.

CONTEXTE:
L'utilisateur va d√©fendre une id√©e compl√®tement impossible ou fantaisiste. Ton r√¥le est de:
1. L'√©couter avec attention et respect
2. Poser des questions pertinentes pour tester sa logique
3. L'encourager √† d√©velopper ses arguments
4. Maintenir un ton professionnel mais avec une pointe d'humour
5. Donner des conseils constructifs sur son √©loquence

STYLE DE CONVERSATION:
- Commence par "Ma√Ætre [nom], la cour vous √©coute..."
- Utilise un vocabulaire juridique adapt√© mais accessible
- Pose des questions comme "Comment r√©pondez-vous √† l'objection que..." 
- Encourage: "Votre argumentation gagne en force..."
- Conclus par un verdict bienveillant avec des conseils

OBJECTIFS P√âDAGOGIQUES:
- Am√©liorer la capacit√© d'argumentation
- D√©velopper la confiance en soi
- Travailler la structure du discours
- Encourager la cr√©ativit√© verbale

Sois exigeant mais toujours encourageant. L'objectif est de faire progresser l'√©loquence.''',
      exerciseInstructions: [
        'Choisissez une id√©e impossible √† d√©fendre (ex: "Les nuages devraient payer des imp√¥ts")',
        'Pr√©parez 3 arguments principaux',
        'Parlez avec conviction et structure',
        'R√©pondez aux questions du juge Thomas',
        'Maintenez votre position m√™me face aux objections',
      ],
      successCriteria: [
        'Arguments structur√©s et coh√©rents',
        'Conviction dans le ton de voix',
        'Capacit√© √† r√©pondre aux objections',
        'Cr√©ativit√© dans l\'argumentation',
        'Maintien du r√¥le d\'avocat',
      ],
    );

    // üîß FIX: Utiliser directement ConfidenceBoostLiveKitScreen avec le sc√©nario
    return ConfidenceBoostLiveKitScreen(scenario: tribunalScenario);
  }
}

/// √ânum√©ration des difficult√©s de sc√©nario
enum ScenarioDifficulty {
  beginner,
  intermediate,
  advanced,
  expert,
}
'''
    
    try:
        with open(tribunal_screen_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        print(f"‚úÖ √âcran tribunal des id√©es corrig√©: {tribunal_screen_path}")
        print("üîß Modifications appliqu√©es:")
        print("   - Utilise maintenant ConfidenceBoostLiveKitScreen")
        print("   - Sc√©nario pr√©d√©fini avec prompt IA optimis√©")
        print("   - Compatible avec le syst√®me LiveKit existant")
        print("   - M√™me provider que l'exercice confidence boost qui fonctionne")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la correction: {e}")
        return False

def verify_dependencies():
    """V√©rifier que les d√©pendances n√©cessaires existent"""
    
    required_files = [
        "frontend/flutter_app/lib/features/confidence_boost/presentation/screens/confidence_boost_livekit_screen.dart",
        "frontend/flutter_app/lib/features/confidence_boost/presentation/providers/confidence_livekit_provider.dart",
        "frontend/flutter_app/lib/features/confidence_boost/data/services/confidence_livekit_service.dart",
        "frontend/flutter_app/lib/features/confidence_boost/domain/entities/confidence_scenario.dart",
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print("‚ùå Fichiers manquants pour le correctif:")
        for file in missing_files:
            print(f"   - {file}")
        return False
    
    print("‚úÖ Toutes les d√©pendances sont pr√©sentes")
    return True

def main():
    """Fonction principale du correctif"""
    
    print("üîß CORRECTIF TRIBUNAL DES ID√âES - Configuration LiveKit TTS")
    print("=" * 60)
    
    # V√©rifier les d√©pendances
    if not verify_dependencies():
        print("\n‚ùå Correctif annul√©: d√©pendances manquantes")
        return False
    
    # Appliquer le correctif
    success = fix_tribunal_idees_screen()
    
    if success:
        print("\n‚úÖ CORRECTIF APPLIQU√â AVEC SUCC√àS!")
        print("\nüìã PROCHAINES √âTAPES:")
        print("1. Red√©marrer l'application Flutter")
        print("2. Tester l'exercice 'Tribunal des Id√©es Impossibles'")
        print("3. V√©rifier que l'IA Thomas r√©pond correctement")
        print("4. Confirmer que l'audio fonctionne")
        
        print("\nüîç DIAGNOSTIC:")
        print("- L'√©cran utilise maintenant le m√™me syst√®me LiveKit que confidence_boost")
        print("- Le sc√©nario est pr√©d√©fini avec un prompt IA optimis√©")
        print("- Compatible avec confidence_livekit_provider qui fonctionne")
        print("- M√™me configuration audio et r√©seau")
        
        return True
    else:
        print("\n‚ùå √âCHEC DU CORRECTIF")
        return False

if __name__ == "__main__":
    main()
