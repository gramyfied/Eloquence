#!/usr/bin/env python3
"""
Script pour corriger d√©finitivement le probl√®me de scope du manager
"""

import os

def fix_manager_scope_final():
    """Corrige le probl√®me de scope du manager dans multi_agent_main.py"""
    
    file_path = "/home/ubuntu/Eloquence/services/livekit-agent/multi_agent_main.py"
    
    print("üîß CORRECTION SCOPE MANAGER FINAL")
    
    try:
        # Lire le fichier
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Identifier le probl√®me : l'introduction est appel√©e AVANT que manager soit cr√©√©
        # PROBL√àME : ligne ~1750 appel introduction, ligne ~1771 cr√©ation manager
        
        # SOLUTION : D√©placer l'appel d'introduction APR√àS la cr√©ation du manager
        
        # Supprimer l'ancien bloc d'introduction (lignes ~1740-1765)
        old_intro_block = """        try:
            logging.getLogger(__name__).info("üé¨ G√©n√©ration introduction...")
            
            # R√©cup√©ration user_data depuis le contexte
            user_data = {
                'user_name': getattr(ctx, 'user_name', 'notre invit√©'),
                'user_subject': getattr(ctx, 'user_subject', 'un sujet passionnant')
            }
            
            # G√©n√©ration introduction avec manager
            try:
                if 'manager' in locals() and manager:
                    intro_text, intro_audio = await manager.generate_introduction(exercise_type, user_data)
                else:
                    logger.error("‚ùå Manager non initialis√© pour introduction")
                    return
            except Exception as e:
                logger.error(f"‚ùå Erreur g√©n√©ration introduction: {e}")
                return
            logging.getLogger(__name__).info(f"‚úÖ Introduction g√©n√©r√©e: {len(intro_text)} caract√®res")
            
            # Note: L'audio sera g√©r√© par le syst√®me TTS existant
            
        except Exception as e:
            logging.getLogger(__name__).error(f"‚ùå Erreur g√©n√©ration introduction: {e}")
            # Continuer sans introduction
            pass"""
        
        # Remplacer par un commentaire simple
        new_intro_placeholder = """        # Introduction sera g√©n√©r√©e apr√®s initialisation du manager"""
        
        if old_intro_block in content:
            content = content.replace(old_intro_block, new_intro_placeholder)
            print("‚úÖ Ancien bloc introduction supprim√©")
        else:
            print("‚ö†Ô∏è Ancien bloc introduction non trouv√© exactement, suppression ligne par ligne")
            
            # Supprimer ligne par ligne
            lines = content.split('\n')
            new_lines = []
            skip_lines = False
            
            for i, line in enumerate(lines):
                if "üé¨ G√©n√©ration introduction..." in line and "try:" in lines[i-1] if i > 0 else False:
                    skip_lines = True
                    new_lines.append("        # Introduction sera g√©n√©r√©e apr√®s initialisation du manager")
                    continue
                elif skip_lines and ("# 2. INITIALISATION DU MANAGER" in line or "logging.getLogger(__name__).info(f\"üéØ Initialisation syst√®me:" in line):
                    skip_lines = False
                    new_lines.append(line)
                elif not skip_lines:
                    new_lines.append(line)
            
            content = '\n'.join(new_lines)
        
        # Ajouter le nouveau bloc d'introduction APR√àS la cr√©ation du manager
        manager_creation_line = "        manager = await initialize_multi_agent_system(exercise_type)"
        
        new_intro_block_after = """        manager = await initialize_multi_agent_system(exercise_type)
        
        # 3. G√âN√âRATION INTRODUCTION AVEC MANAGER INITIALIS√â
        try:
            logging.getLogger(__name__).info("üé¨ G√©n√©ration introduction...")
            
            # R√©cup√©ration user_data depuis le contexte
            user_data = {
                'user_name': getattr(ctx, 'user_name', 'notre invit√©'),
                'user_subject': getattr(ctx, 'user_subject', 'un sujet passionnant')
            }
            
            # G√©n√©ration introduction avec manager (maintenant initialis√©)
            if manager:
                intro_text, intro_audio = await manager.generate_introduction(exercise_type, user_data)
                logging.getLogger(__name__).info(f"‚úÖ Introduction g√©n√©r√©e: {len(intro_text)} caract√®res, {len(intro_audio) if intro_audio else 0} bytes audio")
            else:
                logging.getLogger(__name__).error("‚ùå Manager non initialis√© apr√®s initialize_multi_agent_system")
                
        except Exception as e:
            logging.getLogger(__name__).error(f"‚ùå Erreur g√©n√©ration introduction: {e}")
            # Continuer sans introduction"""
        
        if manager_creation_line in content:
            content = content.replace(manager_creation_line, new_intro_block_after)
            print("‚úÖ Nouveau bloc introduction ajout√© apr√®s cr√©ation manager")
        else:
            print("‚ùå Ligne de cr√©ation manager non trouv√©e")
            return False
        
        # R√©√©crire le fichier
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ Fichier corrig√© avec succ√®s")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur correction scope manager: {e}")
        return False

def verify_syntax():
    """V√©rifie la syntaxe Python du fichier corrig√©"""
    
    file_path = "/home/ubuntu/Eloquence/services/livekit-agent/multi_agent_main.py"
    
    print("\nüß™ V√âRIFICATION SYNTAXE PYTHON")
    
    try:
        # Compiler le fichier pour v√©rifier la syntaxe
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        compile(content, file_path, 'exec')
        print("‚úÖ Syntaxe Python valide")
        return True
        
    except SyntaxError as e:
        print(f"‚ùå Erreur syntaxe: {e}")
        print(f"   Ligne {e.lineno}: {e.text}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur v√©rification: {e}")
        return False

def main():
    """Fonction principale"""
    
    print("üöÄ CORRECTION SCOPE MANAGER FINAL")
    print("=" * 50)
    
    success = True
    
    # Correction scope manager
    if not fix_manager_scope_final():
        success = False
    
    # V√©rification syntaxe
    if not verify_syntax():
        success = False
    
    if success:
        print("\n‚úÖ CORRECTION R√âUSSIE !")
        print("\nüéØ CHANGEMENTS APPLIQU√âS :")
        print("1. Ancien bloc introduction supprim√© (avant cr√©ation manager)")
        print("2. Nouveau bloc introduction ajout√© (apr√®s cr√©ation manager)")
        print("3. Manager maintenant accessible pour introduction")
        print("\nüéØ PROCHAINES √âTAPES :")
        print("1. Committer et pousser la correction")
        print("2. Red√©marrer les services Docker")
        print("3. Tester avec une nouvelle room")
        print("4. V√©rifier logs : '‚úÖ Introduction g√©n√©r√©e: X caract√®res, X bytes audio'")
    else:
        print("\n‚ùå CORRECTION √âCHOU√âE")
        print("V√©rifiez les erreurs ci-dessus")
    
    return success

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)

