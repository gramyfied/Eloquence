import 'package:flutter_test/flutter_test.dart';
import 'package:eloquence_2_0/features/confidence_boost/data/services/text_support_generator.dart';
import 'package:eloquence_2_0/features/confidence_boost/domain/entities/confidence_models.dart';
import 'package:eloquence_2_0/features/confidence_boost/domain/entities/confidence_scenario.dart';

void main() {
  group('TextSupportGenerator Tests d\'Int√©gration', () {
    late TextSupportGenerator textSupportGenerator;

    // Sc√©nario de test
    final testScenario = ConfidenceScenario(
      id: 'test_scenario',
      title: 'Pr√©sentation Produit',
      description: 'Pr√©parer une pr√©sentation efficace pour un nouveau produit.',
      prompt: 'Pr√©sentez votre nouveau produit innovant √† des clients potentiels.',
      type: ConfidenceScenarioType.presentation,
      durationSeconds: 180,
      keywords: ['innovation', 'march√©', 'croissance'],
      tips: ['Utiliser des visuels', '√ätre concis'],
      difficulty: 'Moyenne',
      icon: 'üì±',
    );

    setUp(() {
      textSupportGenerator = TextSupportGenerator();
    });

    test('generateSupport g√©n√®re un TextSupport valide pour fullText', () async {
      // Act
      final result = await textSupportGenerator.generateSupport(
        scenario: testScenario,
        type: SupportType.fullText,
        difficulty: 'Facile',
      );

      // Assert
      expect(result, isA<TextSupport>());
      expect(result.type, SupportType.fullText);
      expect(result.content, isNotEmpty);
      expect(result.content.length, greaterThan(50)); // Contenu substantiel
      expect(result.suggestedWords, isNotEmpty);
      expect(result.suggestedWords, contains('innovation'));
    });

    test('generateSupport g√©n√®re un TextSupport valide pour fillInBlanks', () async {
      // Act
      final result = await textSupportGenerator.generateSupport(
        scenario: testScenario,
        type: SupportType.fillInBlanks,
        difficulty: 'Moyen',
      );

      // Assert
      expect(result, isA<TextSupport>());
      expect(result.type, SupportType.fillInBlanks);
      expect(result.content, isNotEmpty);
      expect(result.content, contains('[BLANK]'));
      expect(result.suggestedWords, isNotEmpty);
      // Test flexible: accepte soit le contenu API soit le fallback
      expect(
        result.suggestedWords.any((word) =>
          word.contains('compl√©tez') || word.contains('innovation')
        ),
        isTrue
      );
    });

    test('generateSupport g√©n√®re un TextSupport valide pour guidedStructure', () async {
      // Act
      final result = await textSupportGenerator.generateSupport(
        scenario: testScenario,
        type: SupportType.guidedStructure,
        difficulty: 'Difficile',
      );

      // Assert
      expect(result, isA<TextSupport>());
      expect(result.type, SupportType.guidedStructure);
      expect(result.content, isNotEmpty);
      expect(result.content, contains('1.')); // Structure num√©rot√©e
      expect(result.suggestedWords, isNotEmpty);
      // Test flexible: accepte soit le contenu API soit le fallback
      expect(
        result.suggestedWords.any((word) =>
          word.contains('premi√®rement') || word.contains('innovation')
        ),
        isTrue
      );
    });

    test('generateSupport g√©n√®re un TextSupport valide pour keywordChallenge', () async {
      // Act
      final result = await textSupportGenerator.generateSupport(
        scenario: testScenario,
        type: SupportType.keywordChallenge,
        difficulty: 'Facile',
      );

      // Assert
      expect(result, isA<TextSupport>());
      expect(result.type, SupportType.keywordChallenge);
      expect(result.content, isNotEmpty);
      expect(result.content, contains(',')); // Liste de mots s√©par√©s par des virgules
      expect(result.suggestedWords, isNotEmpty);
      // Test flexible: accepte soit le contenu API soit le fallback
      expect(
        result.suggestedWords.any((word) =>
          word.contains('d√©fi') || word.contains('innovation')
        ),
        isTrue
      );
    });

    test('generateSupport g√©n√®re un TextSupport valide pour freeImprovisation', () async {
      // Act
      final result = await textSupportGenerator.generateSupport(
        scenario: testScenario,
        type: SupportType.freeImprovisation,
        difficulty: 'Moyen',
      );

      // Assert
      expect(result, isA<TextSupport>());
      expect(result.type, SupportType.freeImprovisation);
      expect(result.content, isNotEmpty);
      expect(result.content, contains('‚Ä¢')); // Format de conseils avec puces
      expect(result.suggestedWords, isNotEmpty);
      // Test flexible: accepte soit le contenu API soit le fallback
      expect(
        result.suggestedWords.any((word) =>
          word.contains('spontan√©it√©') || word.contains('innovation')
        ),
        isTrue
      );
    });

    test('generateSupport fonctionne pour tous les niveaux de difficult√©', () async {
      final difficulties = ['Facile', 'Moyen', 'Difficile'];
      
      for (final difficulty in difficulties) {
        final result = await textSupportGenerator.generateSupport(
          scenario: testScenario,
          type: SupportType.fullText,
          difficulty: difficulty,
        );

        expect(result, isA<TextSupport>());
        expect(result.content, isNotEmpty);
        expect(result.suggestedWords, isNotEmpty);
      }
    });

    test('generateSupport utilise les mots-cl√©s du sc√©nario dans le contenu sugg√©r√©', () async {
      // Act
      final result = await textSupportGenerator.generateSupport(
        scenario: testScenario,
        type: SupportType.fullText,
        difficulty: 'Moyen',
      );

      // Assert
      expect(result.suggestedWords, contains('innovation'));
      expect(result.suggestedWords, contains('march√©'));
      expect(result.suggestedWords, contains('croissance'));
    });

    test('generateSupport retourne toujours un r√©sultat m√™me en cas d\'erreur potentielle', () async {
      // Test avec un sc√©nario ayant des caract√®res sp√©ciaux qui pourraient causer des erreurs
      final scenarioComplexe = ConfidenceScenario(
        id: 'test_complexe',
        title: 'Test "Complexe" & Sp√©cial',
        description: 'Description avec caract√®res sp√©ciaux: √©√†√ß & <>',
        prompt: 'Prompt avec caract√®res sp√©ciaux et "guillemets"',
        type: ConfidenceScenarioType.pitch,
        durationSeconds: 90,
        keywords: ['test', 'sp√©ciaux', 'caract√®res'],
        tips: ['Attention aux caract√®res', 'G√©rer les erreurs'],
        difficulty: 'Test',
        icon: 'üß™',
      );

      // Act
      final result = await textSupportGenerator.generateSupport(
        scenario: scenarioComplexe,
        type: SupportType.fullText,
        difficulty: 'Facile',
      );

      // Assert - Le syst√®me doit toujours retourner un TextSupport valide
      expect(result, isA<TextSupport>());
      expect(result.content, isNotEmpty);
      expect(result.type, SupportType.fullText);
    });

    test('generateSupport produit des contenus diff√©rents pour diff√©rents types', () async {
      // Act - G√©n√©rer pour tous les types
      final results = <SupportType, TextSupport>{};
      
      for (final type in SupportType.values) {
        results[type] = await textSupportGenerator.generateSupport(
          scenario: testScenario,
          type: type,
          difficulty: 'Moyen',
        );
      }

      // Assert - V√©rifier que chaque type a des caract√©ristiques sp√©cifiques
      expect(results[SupportType.fullText]!.content.length, greaterThan(100));
      expect(results[SupportType.fillInBlanks]!.content, contains('[BLANK]'));
      expect(results[SupportType.guidedStructure]!.content, contains('1.'));
      expect(results[SupportType.keywordChallenge]!.content, contains(','));
      expect(results[SupportType.freeImprovisation]!.content, contains('‚Ä¢'));

      // V√©rifier que les contenus sont diff√©rents
      final contents = results.values.map((r) => r.content).toSet();
      expect(contents.length, greaterThan(1)); // Au moins 2 contenus diff√©rents
    });
  });
}