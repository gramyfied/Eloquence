// Mocks generated by Mockito 5.4.5 from annotations
// in eloquence_2_0/test/features/confidence_boost/conversation_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i10;

import 'package:eloquence_2_0/features/confidence_boost/data/services/adaptive_ai_character_service.dart'
    as _i11;
import 'package:eloquence_2_0/features/confidence_boost/data/services/ai_character_factory.dart'
    as _i3;
import 'package:eloquence_2_0/features/confidence_boost/data/services/conversation_engine.dart'
    as _i2;
import 'package:eloquence_2_0/features/confidence_boost/data/services/robust_livekit_service.dart'
    as _i8;
import 'package:eloquence_2_0/features/confidence_boost/domain/entities/ai_character_models.dart'
    as _i4;
import 'package:eloquence_2_0/features/confidence_boost/domain/entities/confidence_models.dart'
    as _i9;
import 'package:eloquence_2_0/features/confidence_boost/domain/entities/confidence_scenario.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConversationResponse_0 extends _i1.SmartFake
    implements _i2.ConversationResponse {
  _FakeConversationResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAICharacterInstance_1 extends _i1.SmartFake
    implements _i3.AICharacterInstance {
  _FakeAICharacterInstance_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAdaptiveDialogue_2 extends _i1.SmartFake
    implements _i4.AdaptiveDialogue {
  _FakeAdaptiveDialogue_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBehavioralAnalysis_3 extends _i1.SmartFake
    implements _i4.BehavioralAnalysis {
  _FakeBehavioralAnalysis_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserAdaptiveProfile_4 extends _i1.SmartFake
    implements _i4.UserAdaptiveProfile {
  _FakeUserAdaptiveProfile_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ConversationEngine].
///
/// See the documentation for Mockito's code generation for more information.
class MockConversationEngine extends _i1.Mock
    implements _i2.ConversationEngine {
  MockConversationEngine() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> initialize({
    required _i6.ConfidenceScenario? scenario,
    required _i4.UserAdaptiveProfile? userProfile,
    _i4.AICharacterType? preferredCharacter,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
          {
            #scenario: scenario,
            #userProfile: userProfile,
            #preferredCharacter: preferredCharacter,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.ConversationResponse> generateIntroduction() =>
      (super.noSuchMethod(
        Invocation.method(
          #generateIntroduction,
          [],
        ),
        returnValue: _i5.Future<_i2.ConversationResponse>.value(
            _FakeConversationResponse_0(
          this,
          Invocation.method(
            #generateIntroduction,
            [],
          ),
        )),
      ) as _i5.Future<_i2.ConversationResponse>);

  @override
  _i5.Future<String> generateResponse({
    required String? userInput,
    required List<_i2.ConversationTurn>? conversationHistory,
    required _i6.ConfidenceScenario? scenario,
    required _i4.AICharacterType? character,
    required _i4.UserAdaptiveProfile? userProfile,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateResponse,
          [],
          {
            #userInput: userInput,
            #conversationHistory: conversationHistory,
            #scenario: scenario,
            #character: character,
            #userProfile: userProfile,
          },
        ),
        returnValue: _i5.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #generateResponse,
            [],
            {
              #userInput: userInput,
              #conversationHistory: conversationHistory,
              #scenario: scenario,
              #character: character,
              #userProfile: userProfile,
            },
          ),
        )),
      ) as _i5.Future<String>);

  @override
  List<_i2.ConversationTurn> getConversationHistory() => (super.noSuchMethod(
        Invocation.method(
          #getConversationHistory,
          [],
        ),
        returnValue: <_i2.ConversationTurn>[],
      ) as List<_i2.ConversationTurn>);

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [RobustLiveKitService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRobustLiveKitService extends _i1.Mock
    implements _i8.RobustLiveKitService {
  MockRobustLiveKitService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> initialize({
    String? livekitUrl,
    String? livekitToken,
    String? roomName,
    String? participantName,
    bool isMobileOptimized = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
          {
            #livekitUrl: livekitUrl,
            #livekitToken: livekitToken,
            #roomName: roomName,
            #participantName: participantName,
            #isMobileOptimized: isMobileOptimized,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i9.ConfidenceAnalysis?> analyzePerformanceRobust({
    required _i6.ConfidenceScenario? scenario,
    required _i9.TextSupport? textSupport,
    required Duration? recordingDuration,
    _i10.Uint8List? audioData,
    String? userContext = '',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #analyzePerformanceRobust,
          [],
          {
            #scenario: scenario,
            #textSupport: textSupport,
            #recordingDuration: recordingDuration,
            #audioData: audioData,
            #userContext: userContext,
          },
        ),
        returnValue: _i5.Future<_i9.ConfidenceAnalysis?>.value(),
      ) as _i5.Future<_i9.ConfidenceAnalysis?>);

  @override
  _i5.Future<bool> healthCheck() => (super.noSuchMethod(
        Invocation.method(
          #healthCheck,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [AICharacterFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockAICharacterFactory extends _i1.Mock
    implements _i3.AICharacterFactory {
  MockAICharacterFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AICharacterInstance createCharacter({
    required _i6.ConfidenceScenario? scenario,
    required _i4.UserAdaptiveProfile? userProfile,
    _i4.AICharacterType? preferredCharacter,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createCharacter,
          [],
          {
            #scenario: scenario,
            #userProfile: userProfile,
            #preferredCharacter: preferredCharacter,
          },
        ),
        returnValue: _FakeAICharacterInstance_1(
          this,
          Invocation.method(
            #createCharacter,
            [],
            {
              #scenario: scenario,
              #userProfile: userProfile,
              #preferredCharacter: preferredCharacter,
            },
          ),
        ),
      ) as _i3.AICharacterInstance);
}

/// A class which mocks [AdaptiveAICharacterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdaptiveAICharacterService extends _i1.Mock
    implements _i11.AdaptiveAICharacterService {
  MockAdaptiveAICharacterService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i4.AdaptiveDialogue> generateContextualDialogue({
    required _i4.AICharacterType? character,
    required _i4.AIInterventionPhase? phase,
    required _i4.SessionContext? context,
    _i4.AIEmotionalState? preferredEmotion,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateContextualDialogue,
          [],
          {
            #character: character,
            #phase: phase,
            #context: context,
            #preferredEmotion: preferredEmotion,
          },
        ),
        returnValue:
            _i5.Future<_i4.AdaptiveDialogue>.value(_FakeAdaptiveDialogue_2(
          this,
          Invocation.method(
            #generateContextualDialogue,
            [],
            {
              #character: character,
              #phase: phase,
              #context: context,
              #preferredEmotion: preferredEmotion,
            },
          ),
        )),
      ) as _i5.Future<_i4.AdaptiveDialogue>);

  @override
  _i5.Future<_i4.BehavioralAnalysis> analyzeBehaviorPattern({
    required _i4.UserAdaptiveProfile? profile,
    required List<_i9.ConfidenceAnalysis>? sessionHistory,
    required _i6.ConfidenceScenario? currentScenario,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #analyzeBehaviorPattern,
          [],
          {
            #profile: profile,
            #sessionHistory: sessionHistory,
            #currentScenario: currentScenario,
          },
        ),
        returnValue:
            _i5.Future<_i4.BehavioralAnalysis>.value(_FakeBehavioralAnalysis_3(
          this,
          Invocation.method(
            #analyzeBehaviorPattern,
            [],
            {
              #profile: profile,
              #sessionHistory: sessionHistory,
              #currentScenario: currentScenario,
            },
          ),
        )),
      ) as _i5.Future<_i4.BehavioralAnalysis>);

  @override
  _i5.Future<_i4.UserAdaptiveProfile> updateUserProfile({
    required _i4.UserAdaptiveProfile? currentProfile,
    required _i9.ConfidenceAnalysis? newAnalysis,
    required _i6.ConfidenceScenario? scenario,
    required Duration? sessionDuration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserProfile,
          [],
          {
            #currentProfile: currentProfile,
            #newAnalysis: newAnalysis,
            #scenario: scenario,
            #sessionDuration: sessionDuration,
          },
        ),
        returnValue: _i5.Future<_i4.UserAdaptiveProfile>.value(
            _FakeUserAdaptiveProfile_4(
          this,
          Invocation.method(
            #updateUserProfile,
            [],
            {
              #currentProfile: currentProfile,
              #newAnalysis: newAnalysis,
              #scenario: scenario,
              #sessionDuration: sessionDuration,
            },
          ),
        )),
      ) as _i5.Future<_i4.UserAdaptiveProfile>);

  @override
  _i5.Stream<_i4.AdaptiveDialogue> generateRealTimeCoaching({
    required _i4.SessionContext? context,
    required _i5.Stream<Map<String, double>>? realTimeMetrics,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateRealTimeCoaching,
          [],
          {
            #context: context,
            #realTimeMetrics: realTimeMetrics,
          },
        ),
        returnValue: _i5.Stream<_i4.AdaptiveDialogue>.empty(),
      ) as _i5.Stream<_i4.AdaptiveDialogue>);

  @override
  _i4.AICharacterType selectOptimalCharacter({
    required _i6.ConfidenceScenario? scenario,
    required _i4.UserAdaptiveProfile? profile,
    _i4.AICharacterType? userPreference,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #selectOptimalCharacter,
          [],
          {
            #scenario: scenario,
            #profile: profile,
            #userPreference: userPreference,
          },
        ),
        returnValue: _i4.AICharacterType.thomas,
      ) as _i4.AICharacterType);
}
