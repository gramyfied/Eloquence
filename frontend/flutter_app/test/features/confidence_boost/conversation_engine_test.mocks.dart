// Mocks generated by Mockito 5.4.5 from annotations
// in eloquence_2_0/test/features/confidence_boost/conversation_engine_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:convert' as _i6;

import 'package:eloquence_2_0/core/services/optimized_http_service.dart' as _i4;
import 'package:eloquence_2_0/features/confidence_boost/data/services/adaptive_ai_character_service.dart'
    as _i7;
import 'package:eloquence_2_0/features/confidence_boost/domain/entities/ai_character_models.dart'
    as _i3;
import 'package:eloquence_2_0/features/confidence_boost/domain/entities/confidence_models.dart'
    as _i8;
import 'package:eloquence_2_0/features/confidence_boost/domain/entities/confidence_scenario.dart'
    as _i9;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAdaptiveDialogue_2 extends _i1.SmartFake
    implements _i3.AdaptiveDialogue {
  _FakeAdaptiveDialogue_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBehavioralAnalysis_3 extends _i1.SmartFake
    implements _i3.BehavioralAnalysis {
  _FakeBehavioralAnalysis_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserAdaptiveProfile_4 extends _i1.SmartFake
    implements _i3.UserAdaptiveProfile {
  _FakeUserAdaptiveProfile_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OptimizedHttpService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOptimizedHttpService extends _i1.Mock
    implements _i4.OptimizedHttpService {
  MockOptimizedHttpService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Response> get(
    String? url, {
    Map<String, String>? headers,
    Duration? timeout,
    int? maxRetries,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {
            #headers: headers,
            #timeout: timeout,
            #maxRetries: maxRetries,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #get,
            [url],
            {
              #headers: headers,
              #timeout: timeout,
              #maxRetries: maxRetries,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> post(
    String? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
    Duration? timeout,
    int? maxRetries,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
            #timeout: timeout,
            #maxRetries: maxRetries,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
              #timeout: timeout,
              #maxRetries: maxRetries,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> put(
    String? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
    Duration? timeout,
    int? maxRetries,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
            #timeout: timeout,
            #maxRetries: maxRetries,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
              #timeout: timeout,
              #maxRetries: maxRetries,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> delete(
    String? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
    Duration? timeout,
    int? maxRetries,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
            #timeout: timeout,
            #maxRetries: maxRetries,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
              #timeout: timeout,
              #maxRetries: maxRetries,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.StreamedResponse> sendMultipart(
    String? url,
    String? method, {
    Map<String, String>? headers,
    Map<String, String>? fields,
    _i5.FutureOr<List<_i2.MultipartFile>> Function()? fileProvider,
    Duration? timeout,
    int? maxRetries,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMultipart,
          [
            url,
            method,
          ],
          {
            #headers: headers,
            #fields: fields,
            #fileProvider: fileProvider,
            #timeout: timeout,
            #maxRetries: maxRetries,
          },
        ),
        returnValue:
            _i5.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_1(
          this,
          Invocation.method(
            #sendMultipart,
            [
              url,
              method,
            ],
            {
              #headers: headers,
              #fields: fields,
              #fileProvider: fileProvider,
              #timeout: timeout,
              #maxRetries: maxRetries,
            },
          ),
        )),
      ) as _i5.Future<_i2.StreamedResponse>);

  @override
  _i5.Future<_i2.StreamedResponse> sendMultipartRequest(
    _i2.MultipartRequest? request, {
    Duration? timeout,
    int? maxRetries,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMultipartRequest,
          [request],
          {
            #timeout: timeout,
            #maxRetries: maxRetries,
          },
        ),
        returnValue:
            _i5.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_1(
          this,
          Invocation.method(
            #sendMultipartRequest,
            [request],
            {
              #timeout: timeout,
              #maxRetries: maxRetries,
            },
          ),
        )),
      ) as _i5.Future<_i2.StreamedResponse>);

  @override
  _i5.Future<Map<String, dynamic>> getPerformanceStats() => (super.noSuchMethod(
        Invocation.method(
          #getPerformanceStats,
          [],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AdaptiveAICharacterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdaptiveAICharacterService extends _i1.Mock
    implements _i7.AdaptiveAICharacterService {
  MockAdaptiveAICharacterService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.AdaptiveDialogue> generateContextualDialogue({
    required _i3.AICharacterType? character,
    required _i3.AIInterventionPhase? phase,
    required _i3.SessionContext? context,
    _i3.AIEmotionalState? preferredEmotion,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateContextualDialogue,
          [],
          {
            #character: character,
            #phase: phase,
            #context: context,
            #preferredEmotion: preferredEmotion,
          },
        ),
        returnValue:
            _i5.Future<_i3.AdaptiveDialogue>.value(_FakeAdaptiveDialogue_2(
          this,
          Invocation.method(
            #generateContextualDialogue,
            [],
            {
              #character: character,
              #phase: phase,
              #context: context,
              #preferredEmotion: preferredEmotion,
            },
          ),
        )),
      ) as _i5.Future<_i3.AdaptiveDialogue>);

  @override
  _i5.Future<_i3.BehavioralAnalysis> analyzeBehaviorPattern({
    required _i3.UserAdaptiveProfile? profile,
    required List<_i8.ConfidenceAnalysis>? sessionHistory,
    required _i9.ConfidenceScenario? currentScenario,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #analyzeBehaviorPattern,
          [],
          {
            #profile: profile,
            #sessionHistory: sessionHistory,
            #currentScenario: currentScenario,
          },
        ),
        returnValue:
            _i5.Future<_i3.BehavioralAnalysis>.value(_FakeBehavioralAnalysis_3(
          this,
          Invocation.method(
            #analyzeBehaviorPattern,
            [],
            {
              #profile: profile,
              #sessionHistory: sessionHistory,
              #currentScenario: currentScenario,
            },
          ),
        )),
      ) as _i5.Future<_i3.BehavioralAnalysis>);

  @override
  _i5.Future<_i3.UserAdaptiveProfile> updateUserProfile({
    required _i3.UserAdaptiveProfile? currentProfile,
    required _i8.ConfidenceAnalysis? newAnalysis,
    required _i9.ConfidenceScenario? scenario,
    required Duration? sessionDuration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserProfile,
          [],
          {
            #currentProfile: currentProfile,
            #newAnalysis: newAnalysis,
            #scenario: scenario,
            #sessionDuration: sessionDuration,
          },
        ),
        returnValue: _i5.Future<_i3.UserAdaptiveProfile>.value(
            _FakeUserAdaptiveProfile_4(
          this,
          Invocation.method(
            #updateUserProfile,
            [],
            {
              #currentProfile: currentProfile,
              #newAnalysis: newAnalysis,
              #scenario: scenario,
              #sessionDuration: sessionDuration,
            },
          ),
        )),
      ) as _i5.Future<_i3.UserAdaptiveProfile>);

  @override
  _i5.Stream<_i3.AdaptiveDialogue> generateRealTimeCoaching({
    required _i3.SessionContext? context,
    required _i5.Stream<Map<String, double>>? realTimeMetrics,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateRealTimeCoaching,
          [],
          {
            #context: context,
            #realTimeMetrics: realTimeMetrics,
          },
        ),
        returnValue: _i5.Stream<_i3.AdaptiveDialogue>.empty(),
      ) as _i5.Stream<_i3.AdaptiveDialogue>);

  @override
  _i3.AICharacterType selectOptimalCharacter({
    required _i9.ConfidenceScenario? scenario,
    required _i3.UserAdaptiveProfile? profile,
    _i3.AICharacterType? userPreference,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #selectOptimalCharacter,
          [],
          {
            #scenario: scenario,
            #profile: profile,
            #userPreference: userPreference,
          },
        ),
        returnValue: _i3.AICharacterType.thomas,
      ) as _i3.AICharacterType);
}
