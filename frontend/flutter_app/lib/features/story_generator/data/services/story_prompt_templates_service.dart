import '../../domain/entities/story_models.dart';
import '../../../confidence_boost/domain/entities/virelangue_models.dart';

/// Service de gestion des templates de prompts pour la g√©n√©ration d'√©l√©ments narratifs
class StoryPromptTemplatesService {
  
  /// G√©n√®re un prompt pour cr√©er des √©l√©ments narratifs personnalis√©s
  static String generateElementsPrompt({
    required StoryGenre? genre,
    required VirelangueDifficulty difficulty,
    required List<String>? keywords,
    required int elementsCount,
  }) {
    final genreContext = _getGenreContext(genre);
    final difficultyContext = _getDifficultyContext(difficulty);
    final keywordsContext = keywords?.isNotEmpty == true 
        ? '\n- Mots-cl√©s √† int√©grer : ${keywords!.join(", ")}'
        : '';
    
    return '''
Tu es un cr√©ateur d'histoires sp√©cialis√© dans la g√©n√©ration d'√©l√©ments narratifs cr√©atifs et coh√©rents.

MISSION : G√©n√®re exactement 3 √©l√©ments narratifs uniques :
1. UN PERSONNAGE principal
2. UN LIEU d'action  
3. UN OBJET MAGIQUE central

CONTRAINTES :
- Genre : ${genreContext.genreDescription}
- Niveau de difficult√© : ${difficultyContext.description}
- Vocabulaire adapt√© : ${difficultyContext.vocabularyLevel}$keywordsContext

R√àGLES DE CR√âATION :
${genreContext.creationRules.map((rule) => '- $rule').join('\n')}

EXIGENCES TECHNIQUES :
- Chaque √©l√©ment doit avoir un nom accrocheur (2-4 mots max)
- Description vivante et √©vocatrice (15-25 mots)
- Emoji repr√©sentatif pour chaque √©l√©ment
- Coh√©rence entre les 3 √©l√©ments pour former une histoire potentielle
- Originalit√© : √©viter les clich√©s trop r√©p√©titifs

R√âPONSE OBLIGATOIRE EN JSON :
{
  "elements": [
    {
      "type": "character",
      "name": "Nom du personnage",
      "emoji": "üßô‚Äç‚ôÇÔ∏è",
      "description": "Description captivante du personnage en 15-25 mots",
      "keywords": ["mot-cl√©1", "mot-cl√©2", "mot-cl√©3"],
      "difficulty_level": "${difficulty.index}"
    },
    {
      "type": "location", 
      "name": "Nom du lieu",
      "emoji": "üè∞",
      "description": "Description immersive du lieu en 15-25 mots",
      "keywords": ["mot-cl√©1", "mot-cl√©2", "mot-cl√©3"],
      "difficulty_level": "${difficulty.index}"
    },
    {
      "type": "magic_object",
      "name": "Nom de l'objet magique", 
      "emoji": "üîÆ",
      "description": "Description myst√©rieuse de l'objet en 15-25 mots",
      "keywords": ["mot-cl√©1", "mot-cl√©2", "mot-cl√©3"],
      "difficulty_level": "${difficulty.index}"
    }
  ],
  "story_seed": "Phrase d'accroche d√©crivant comment ces 3 √©l√©ments pourraient s'articuler dans une histoire (20-30 mots)"
}

G√âN√àRE MAINTENANT ces 3 √©l√©ments uniques et coh√©rents !
''';
  }

  /// G√©n√®re un prompt pour un type d'√©l√©ment sp√©cifique
  static String generateSpecificElementPrompt({
    required StoryElementType elementType,
    required StoryGenre? genre,
    required VirelangueDifficulty difficulty,
    required List<String>? keywords,
    String? contextualHint,
  }) {
    final genreContext = _getGenreContext(genre);
    final difficultyContext = _getDifficultyContext(difficulty);
    final elementContext = _getElementTypeContext(elementType);
    final keywordsContext = keywords?.isNotEmpty == true 
        ? '\n- Mots-cl√©s √† int√©grer : ${keywords!.join(", ")}'
        : '';
    final hintContext = contextualHint?.isNotEmpty == true
        ? '\n- Contexte narratif : $contextualHint'
        : '';
    
    return '''
Tu es un expert en cr√©ation d'√©l√©ments narratifs pour histoires interactives.

MISSION : Cr√©e UN ${elementContext.typeName} exceptionnel pour une histoire ${genreContext.genreDescription.toLowerCase()}.

SP√âCIFICATIONS DU ${elementContext.typeName.toUpperCase()} :
${elementContext.specifications.map((spec) => '- $spec').join('\n')}

CONTRAINTES :
- Genre : ${genreContext.genreDescription}
- Difficult√© : ${difficultyContext.description}
- Vocabulaire : ${difficultyContext.vocabularyLevel}$keywordsContext$hintContext

INSPIRATION ${elementContext.typeName.toUpperCase()} :
${elementContext.inspirations.map((insp) => '- $insp').join('\n')}

R√âPONSE JSON OBLIGATOIRE :
{
  "element": {
    "type": "${elementType.name}",
    "name": "Nom cr√©atif du ${elementContext.typeName} (2-4 mots)",
    "emoji": "${elementContext.defaultEmoji}",
    "description": "Description captivante et immersive (20-30 mots)",
    "keywords": ["mot-cl√©1", "mot-cl√©2", "mot-cl√©3", "mot-cl√©4"],
    "special_ability": "Pouvoir ou caract√©ristique unique (10-15 mots)",
    "story_potential": "Comment cet √©l√©ment peut enrichir une narration (15-20 mots)",
    "difficulty_level": "${difficulty.index}",
    "genre_tags": ["${genre?.name ?? 'libre'}"]
  },
  "usage_suggestions": [
    "Suggestion d'utilisation narrative 1",
    "Suggestion d'utilisation narrative 2", 
    "Suggestion d'utilisation narrative 3"
  ]
}

CR√âE MAINTENANT ce ${elementContext.typeName} unique et m√©morable !
''';
  }

  /// Obtient le contexte du genre
  static _GenreContext _getGenreContext(StoryGenre? genre) {
    switch (genre) {
      case StoryGenre.fantasy:
        return _GenreContext(
          genreDescription: 'Fantastique √©pique',
          creationRules: [
            'Int√©grer des √©l√©ments magiques subtils mais pr√©sents',
            'Cr√©er un univers coh√©rent avec ses propres r√®gles',
            'M√©langer familier et extraordinaire de mani√®re naturelle',
            'Privil√©gier l\'√©merveillement et le myst√®re',
          ],
        );
      
      case StoryGenre.scienceFiction:
        return _GenreContext(
          genreDescription: 'Science-Fiction immersive',
          creationRules: [
            'Int√©grer des technologies avanc√©es mais plausibles',
            'Cr√©er un futur coh√©rent et r√©fl√©chi',
            '√âquilibrer innovation et humanit√©',
            'Privil√©gier l\'exploration et la d√©couverte',
          ],
        );
      
      case StoryGenre.adventure:
        return _GenreContext(
          genreDescription: 'Aventure palpitante',
          creationRules: [
            'Cr√©er des √©l√©ments orient√©s action et exploration',
            'Int√©grer des d√©fis et obstacles potentiels',
            'Privil√©gier le mouvement et la dynamique',
            'Favoriser l\'h√©ro√Øsme et le courage',
          ],
        );
      
      case StoryGenre.mystery:
        return _GenreContext(
          genreDescription: 'Myst√®re intriguant',
          creationRules: [
            'Int√©grer des √©l√©ments √©nigmatiques et ambigus',
            'Cr√©er des indices subtils et des secrets',
            'Privil√©gier l\'atmosph√®re et la tension',
            'Favoriser la curiosit√© et la d√©duction',
          ],
        );
      
      case StoryGenre.comedy:
        return _GenreContext(
          genreDescription: 'Com√©die divertissante',
          creationRules: [
            'Cr√©er des √©l√©ments d√©cal√©s et amusants',
            'Int√©grer des situations cocasses potentielles',
            'Privil√©gier la l√©g√®ret√© et l\'humour',
            'Favoriser l\'originalit√© et la surprise',
          ],
        );
      
      case StoryGenre.horror:
        return _GenreContext(
          genreDescription: 'Horreur atmosph√©rique',
          creationRules: [
            'Cr√©er une atmosph√®re inqui√©tante mais adapt√©e',
            'Int√©grer des √©l√©ments myst√©rieux et sombres',
            'Privil√©gier la tension et le suspense',
            '√âviter la violence explicite, favoriser le psychologique',
          ],
        );
      
      case StoryGenre.fairytale:
        return _GenreContext(
          genreDescription: 'Conte merveilleux',
          creationRules: [
            'Cr√©er des √©l√©ments magiques et bienveillants',
            'Int√©grer des le√ßons de vie subtiles',
            'Privil√©gier l\'√©merveillement et la po√©sie',
            'Favoriser les arch√©types positifs et inspirants',
          ],
        );
      
      default:
        return _GenreContext(
          genreDescription: 'Histoire cr√©ative libre',
          creationRules: [
            'Cr√©er des √©l√©ments originaux et polyvalents',
            'Int√©grer de la diversit√© narrative',
            'Privil√©gier l\'adaptabilit√© et la cr√©ativit√©',
            'Favoriser l\'imagination sans contraintes sp√©cifiques',
          ],
        );
    }
  }

  /// Obtient le contexte de difficult√©
  static _DifficultyContext _getDifficultyContext(VirelangueDifficulty difficulty) {
    switch (difficulty) {
      case VirelangueDifficulty.easy:
        return _DifficultyContext(
          description: 'Facile - Vocabulaire simple et accessible',
          vocabularyLevel: 'Mots courants, phrases courtes, concepts familiers',
        );
      
      case VirelangueDifficulty.medium:
        return _DifficultyContext(
          description: 'Moyen - Vocabulaire enrichi avec nuances',
          vocabularyLevel: 'Mots vari√©s, phrases √©labor√©es, concepts interm√©diaires',
        );
      
      case VirelangueDifficulty.hard:
        return _DifficultyContext(
          description: 'Difficile - Vocabulaire sophistiqu√© et riche',
          vocabularyLevel: 'Mots recherch√©s, phrases complexes, concepts avanc√©s',
        );
      
      case VirelangueDifficulty.expert:
        return _DifficultyContext(
          description: 'Expert - Vocabulaire litt√©raire et technique',
          vocabularyLevel: 'Mots rares, phrases √©labor√©es, concepts sophistiqu√©s',
        );
    }
  }

  /// Obtient le contexte du type d'√©l√©ment
  static _ElementTypeContext _getElementTypeContext(StoryElementType elementType) {
    switch (elementType) {
      case StoryElementType.character:
        return _ElementTypeContext(
          typeName: 'personnage',
          defaultEmoji: 'üßô‚Äç‚ôÇÔ∏è',
          specifications: [
            'Personnalit√© distincte et m√©morable',
            'Motivation claire et compr√©hensible',
            'Apparence √©vocatrice sans √™tre st√©r√©otyp√©e',
            'Potentiel de d√©veloppement narratif',
            'Trait distinctif qui le rend unique',
          ],
          inspirations: [
            'H√©ros de l√©gendes avec une touche moderne',
            'Personnages arch√©typaux r√©invent√©s',
            'Professions inattendues dans des contextes fantastiques',
            'Contradictions int√©ressantes (ex: dragon v√©g√©tarien)',
          ],
        );
      
      case StoryElementType.location:
        return _ElementTypeContext(
          typeName: 'lieu',
          defaultEmoji: 'üè∞',
          specifications: [
            'Atmosph√®re distinctive et immersive',
            'Caract√©ristiques visuelles marquantes',
            'Potentiel d\'action et d\'interaction',
            'Histoire ou myst√®re sous-jacent',
            '√âl√©ments sensoriels (sons, odeurs, textures)',
          ],
          inspirations: [
            'Lieux familiers transform√©s par la magie',
            'Architectures impossibles ou oniriques',
            'Environnements naturels aux propri√©t√©s sp√©ciales',
            'Espaces hybrides m√©langeant plusieurs univers',
          ],
        );
      
      case StoryElementType.magicObject:
        return _ElementTypeContext(
          typeName: 'objet magique',
          defaultEmoji: 'üîÆ',
          specifications: [
            'Pouvoir unique et bien d√©fini',
            'Apparence distinctive et m√©morable',
            'Origine myst√©rieuse ou int√©ressante',
            'Avantages ET limitations/contraintes',
            'Potentiel d\'√©volution narrative',
          ],
          inspirations: [
            'Objets du quotidien aux pouvoirs extraordinaires',
            'Artefacts anciens aux secrets oubli√©s',
            'Cr√©ations magiques aux effets inattendus',
            'Objets symbiotiques qui √©voluent avec leur utilisateur',
          ],
        );
    }
  }
}

/// Contexte de genre pour la g√©n√©ration
class _GenreContext {
  final String genreDescription;
  final List<String> creationRules;

  const _GenreContext({
    required this.genreDescription,
    required this.creationRules,
  });
}

/// Contexte de difficult√© pour la g√©n√©ration  
class _DifficultyContext {
  final String description;
  final String vocabularyLevel;

  const _DifficultyContext({
    required this.description,
    required this.vocabularyLevel,
  });
}

/// Contexte de type d'√©l√©ment pour la g√©n√©ration
class _ElementTypeContext {
  final String typeName;
  final String defaultEmoji;
  final List<String> specifications;
  final List<String> inspirations;

  const _ElementTypeContext({
    required this.typeName,
    required this.defaultEmoji,
    required this.specifications,
    required this.inspirations,
  });
}