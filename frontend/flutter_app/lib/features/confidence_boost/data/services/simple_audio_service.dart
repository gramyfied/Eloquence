import 'dart:async';
import 'dart:io';
import 'dart:typed_data';
import 'package:flutter_sound/flutter_sound.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:path_provider/path_provider.dart';
import 'package:logger/logger.dart';

/// üé§ SERVICE AUDIO SIMPLIFI√â POUR REST
/// 
/// Remplace l'UnifiedLiveKitService complexe par une approche simple :
/// ‚úÖ flutter_sound pour enregistrement local
/// ‚úÖ Fichiers WAV temporaires
/// ‚úÖ Upload direct vers API REST
/// ‚úÖ Gestion permissions microphone
class SimpleAudioService {
  final Logger _logger = Logger();
  FlutterSoundRecorder? _recorder;
  bool _isInitialized = false;
  String? _currentRecordingPath;

  /// üéØ INITIALISATION
  Future<bool> initialize() async {
    try {
      _recorder = FlutterSoundRecorder();
      await _recorder!.openRecorder();
      _isInitialized = true;
      _logger.i('‚úÖ SimpleAudioService initialis√©');
      return true;
    } catch (e) {
      _logger.e('‚ùå Erreur initialisation audio: $e');
      return false;
    }
  }

  /// üé§ D√âMARRER ENREGISTREMENT
  Future<String?> startRecording() async {
    try {
      if (!_isInitialized) {
        _logger.e('Service non initialis√©');
        return null;
      }

      // V√©rifier permission
      final status = await Permission.microphone.request();
      if (!status.isGranted) {
        _logger.e('Permission microphone refus√©e');
        return null;
      }

      // Cr√©er fichier temporaire
      final tempDir = await getTemporaryDirectory();
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      _currentRecordingPath = '${tempDir.path}/audio_$timestamp.wav';

      // D√©marrer enregistrement
      await _recorder!.startRecorder(
        toFile: _currentRecordingPath,
        codec: Codec.pcm16WAV,
        sampleRate: 16000, // Optimal pour analyse vocale
        bitRate: 64000,
      );

      _logger.i('üé§ Enregistrement d√©marr√©: $_currentRecordingPath');
      return _currentRecordingPath;

    } catch (e) {
      _logger.e('‚ùå Erreur d√©marrage enregistrement: $e');
      return null;
    }
  }

  /// üõë ARR√äTER ENREGISTREMENT
  Future<File?> stopRecording() async {
    try {
      if (!_isInitialized || _currentRecordingPath == null) {
        return null;
      }

      await _recorder!.stopRecorder();
      
      final file = File(_currentRecordingPath!);
      if (await file.exists()) {
        _logger.i('‚úÖ Enregistrement termin√©: ${file.lengthSync()} bytes');
        return file;
      }

      return null;

    } catch (e) {
      _logger.e('‚ùå Erreur arr√™t enregistrement: $e');
      return null;
    }
  }

  /// üìä V√âRIFIER PERMISSIONS
  Future<bool> checkPermissions() async {
    final status = await Permission.microphone.status;
    return status.isGranted;
  }

  /// üßπ NETTOYER RESSOURCES
  Future<void> dispose() async {
    try {
      await _recorder?.closeRecorder();
      _isInitialized = false;
      _logger.i('üßπ SimpleAudioService nettoy√©');
    } catch (e) {
      _logger.e('‚ùå Erreur nettoyage: $e');
    }
  }

  /// üìÅ NETTOYER FICHIERS TEMPORAIRES
  Future<void> cleanupTempFiles() async {
    try {
      final tempDir = await getTemporaryDirectory();
      final files = tempDir.listSync();
      
      for (final file in files) {
        if (file.path.contains('audio_') && file.path.endsWith('.wav')) {
          await file.delete();
        }
      }
      
      _logger.i('üßπ Fichiers temporaires nettoy√©s');
    } catch (e) {
      _logger.e('‚ùå Erreur nettoyage fichiers: $e');
    }
  }

  /// üìè OBTENIR TAILLE FICHIER
  Future<int> getFileSize(String path) async {
    try {
      final file = File(path);
      if (await file.exists()) {
        return await file.length();
      }
      return 0;
    } catch (e) {
      _logger.e('‚ùå Erreur taille fichier: $e');
      return 0;
    }
  }

  /// ‚è±Ô∏è CALCULER DUR√âE AUDIO (approximation)
  Duration estimateAudioDuration(int fileSizeBytes, {int sampleRate = 16000, int bitRate = 64000}) {
    // Calcul approximatif bas√© sur la taille du fichier
    final seconds = (fileSizeBytes * 8) / bitRate;
    return Duration(seconds: seconds.round());
  }
}