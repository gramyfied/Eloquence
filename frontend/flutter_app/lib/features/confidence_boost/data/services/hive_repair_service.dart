import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:logger/logger.dart';
import 'package:path_provider/path_provider.dart';

/// Service de r√©paration des bo√Ætes Hive corrompues
/// 
/// üîß PROBL√àME R√âSOLU :
/// - Erreur "type 'int' is not a subtype of type 'DateTime' in type cast"
/// - Corruption des donn√©es de s√©rialisation Hive
/// - Incompatibilit√© entre versions des adaptateurs
class HiveRepairService {
  static final Logger _logger = Logger();
  
  /// R√©pare toutes les bo√Ætes Hive corrompues
  static Future<void> repairCorruptedBoxes() async {
    try {
      _logger.w('üîß R√âPARATION HIVE: D√©marrage de la r√©paration des bo√Ætes corrompues...');
      
      // 1. Nettoyer les bo√Ætes de r√©compenses
      await _cleanRewardBoxes();
      
      // 2. Nettoyer les bo√Ætes de virelangues
      await _cleanVirelangueBoxes();
      
      // 3. Nettoyer les bo√Ætes d'historique
      await _cleanHistoryBoxes();
      
      // 4. Supprimer les fichiers temporaires
      await _cleanTempFiles();
      
      _logger.i('‚úÖ R√âPARATION HIVE: Toutes les bo√Ætes corrompues ont √©t√© r√©par√©es');
      
    } catch (e, stackTrace) {
      _logger.e('‚ùå R√âPARATION HIVE: Erreur durant la r√©paration: $e', error: e, stackTrace: stackTrace);
      rethrow;
    }
  }
  
  /// Nettoie les bo√Ætes de r√©compenses corrompues
  static Future<void> _cleanRewardBoxes() async {
    final boxNames = [
      'virelangueRewardHistoryBox',
      'virelanguePityTimerBox',
      'gemCollectionBox',
    ];
    
    for (final boxName in boxNames) {
      try {
        _logger.i('üßπ R√âPARATION: Nettoyage de la bo√Æte "$boxName"...');
        
        // Fermer la bo√Æte si ouverte
        if (Hive.isBoxOpen(boxName)) {
          await Hive.box(boxName).close();
          _logger.d('üì¶ R√âPARATION: Bo√Æte "$boxName" ferm√©e');
        }
        
        // Supprimer la bo√Æte corrompue
        await Hive.deleteBoxFromDisk(boxName);
        _logger.i('üóëÔ∏è R√âPARATION: Bo√Æte "$boxName" supprim√©e du disque');
        
      } catch (e) {
        _logger.w('‚ö†Ô∏è R√âPARATION: Impossible de nettoyer "$boxName": $e');
        // Continuer avec les autres bo√Ætes
      }
    }
  }
  
  /// Nettoie les bo√Ætes de virelangues corrompues
  static Future<void> _cleanVirelangueBoxes() async {
    final boxNames = [
      'virelangueBox',
      'sessionBox',
      'scoreBox',
      'progressBox',
    ];
    
    for (final boxName in boxNames) {
      try {
        _logger.i('üßπ R√âPARATION: Nettoyage de la bo√Æte "$boxName"...');
        
        if (Hive.isBoxOpen(boxName)) {
          await Hive.box(boxName).close();
        }
        
        await Hive.deleteBoxFromDisk(boxName);
        _logger.i('üóëÔ∏è R√âPARATION: Bo√Æte "$boxName" supprim√©e du disque');
        
      } catch (e) {
        _logger.w('‚ö†Ô∏è R√âPARATION: Impossible de nettoyer "$boxName": $e');
      }
    }
  }
  
  /// Nettoie les bo√Ætes d'historique corrompues
  static Future<void> _cleanHistoryBoxes() async {
    final boxNames = [
      'userHistoryBox',
      'exerciseHistoryBox',
      'achievementBox',
    ];
    
    for (final boxName in boxNames) {
      try {
        if (Hive.isBoxOpen(boxName)) {
          await Hive.box(boxName).close();
        }
        await Hive.deleteBoxFromDisk(boxName);
        _logger.i('üóëÔ∏è R√âPARATION: Bo√Æte "$boxName" supprim√©e du disque');
      } catch (e) {
        _logger.w('‚ö†Ô∏è R√âPARATION: Impossible de nettoyer "$boxName": $e');
      }
    }
  }
  
  /// Supprime les fichiers temporaires et cache
  static Future<void> _cleanTempFiles() async {
    try {
      if (!kIsWeb) {
        final appDir = await getApplicationDocumentsDirectory();
        final hiveDir = Directory('${appDir.path}/hive');
        
        if (await hiveDir.exists()) {
          // Supprimer tous les fichiers .hive corrompus
          final files = await hiveDir.list().toList();
          for (final file in files) {
            if (file is File && file.path.endsWith('.hive')) {
              try {
                await file.delete();
                _logger.d('üóëÔ∏è R√âPARATION: Fichier supprim√©: ${file.path}');
              } catch (e) {
                _logger.w('‚ö†Ô∏è R√âPARATION: Impossible de supprimer ${file.path}: $e');
              }
            }
          }
        }
      }
    } catch (e) {
      _logger.w('‚ö†Ô∏è R√âPARATION: Erreur nettoyage fichiers temporaires: $e');
    }
  }
  
  /// R√©initialise compl√®tement Hive
  static Future<void> resetHiveCompletely() async {
    try {
      _logger.w('üîÑ R√âPARATION COMPL√àTE: R√©initialisation totale de Hive...');
      
      // Fermer toutes les bo√Ætes
      await Hive.close();
      
      // Supprimer tous les fichiers Hive
      if (!kIsWeb) {
        final appDir = await getApplicationDocumentsDirectory();
        final hiveDir = Directory('${appDir.path}/hive');
        
        if (await hiveDir.exists()) {
          await hiveDir.delete(recursive: true);
          _logger.i('üóëÔ∏è R√âPARATION COMPL√àTE: Dossier Hive supprim√© compl√®tement');
        }
      }
      
      // R√©initialiser Hive
      await Hive.initFlutter();
      _logger.i('‚úÖ R√âPARATION COMPL√àTE: Hive r√©initialis√© avec succ√®s');
      
    } catch (e, stackTrace) {
      _logger.e('‚ùå R√âPARATION COMPL√àTE: Erreur: $e', error: e, stackTrace: stackTrace);
      rethrow;
    }
  }
  
  /// V√©rifie l'int√©grit√© des bo√Ætes Hive
  static Future<bool> checkHiveIntegrity() async {
    try {
      _logger.i('üîç V√âRIFICATION HIVE: Contr√¥le d\'int√©grit√©...');
      
      final testBoxName = 'hive_integrity_test';
      
      // Test d'√©criture/lecture
      final testBox = await Hive.openBox(testBoxName);
      await testBox.put('test_key', DateTime.now());
      final testValue = testBox.get('test_key');
      await testBox.close();
      await Hive.deleteBoxFromDisk(testBoxName);
      
      final isHealthy = testValue != null;
      _logger.i('‚úÖ V√âRIFICATION HIVE: Int√©grit√© ${isHealthy ? "OK" : "CORROMPUE"}');
      
      return isHealthy;
      
    } catch (e) {
      _logger.e('‚ùå V√âRIFICATION HIVE: Erreur lors du test d\'int√©grit√©: $e');
      return false;
    }
  }
}