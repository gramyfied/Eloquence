#!/usr/bin/env python3
"""
Script de validation pour v√©rifier que l'exercice "studio situation pro debat tv"
utilise bien les multi-agents au lieu de Thomas
"""

import json
import sys
import os

def validate_fix():
    """Valide que les corrections appliqu√©es fonctionnent correctement"""
    
    print("üîç VALIDATION DES CORRECTIONS - STUDIO DEBATE TV")
    print("="*60)
    
    # 1. V√©rifier que les fichiers modifi√©s existent
    files_to_check = [
        'services/livekit-agent/unified_entrypoint.py',
        'frontend/flutter_app/lib/features/studio_situations_pro/data/services/studio_livekit_service.dart',
        'frontend/flutter_app/lib/features/studio_situations_pro/data/services/studio_situations_pro_service.dart',
    ]
    
    print("üìÅ V√©rification des fichiers modifi√©s:")
    for file_path in files_to_check:
        if os.path.exists(file_path):
            print(f"   ‚úÖ {file_path}")
        else:
            print(f"   ‚ùå {file_path} - MANQUANT")
            return False
    
    # 2. V√©rifier les corrections dans unified_entrypoint.py
    print("\nüîß V√©rification des corrections dans unified_entrypoint.py:")
    
    try:
        with open('services/livekit-agent/unified_entrypoint.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        checks = [
            ("Priorit√© absolue aux m√©tadonn√©es", "return exercise_type"),
            ("studio_debate_tv dans MULTI_AGENT_EXERCISES", "'studio_debate_tv'"),
            ("studio_debatPlateau dans MULTI_AGENT_EXERCISES", "'studio_debatPlateau'"),
            ("Alias studio_debatPlateau", "'studio_debatplateau': 'studio_debate_tv'"),
            ("Alias studio_situations_pro", "'studio_situations_pro': 'studio_situations_pro'"),
        ]
        
        for check_name, check_text in checks:
            if check_text in content:
                print(f"   ‚úÖ {check_name}")
            else:
                print(f"   ‚ùå {check_name} - MANQUANT")
                return False
                
    except Exception as e:
        print(f"   ‚ùå Erreur lecture fichier: {e}")
        return False
    
    # 3. V√©rifier les corrections dans le frontend
    print("\nüîß V√©rification des corrections dans le frontend:")
    
    try:
        with open('frontend/flutter_app/lib/features/studio_situations_pro/data/services/studio_livekit_service.dart', 'r', encoding='utf-8') as f:
            content = f.read()
        
        if "'exercise_type': 'studio_debate_tv'" in content:
            print("   ‚úÖ M√©tadonn√©es studio_debate_tv dans studio_livekit_service.dart")
        else:
            print("   ‚ùå M√©tadonn√©es studio_debate_tv manquantes dans studio_livekit_service.dart")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur lecture fichier frontend: {e}")
        return False
    
    # 4. V√©rifier le mapping des types de simulation
    try:
        with open('frontend/flutter_app/lib/features/studio_situations_pro/data/services/studio_situations_pro_service.dart', 'r', encoding='utf-8') as f:
            content = f.read()
        
        if "_getExerciseTypeForSimulation" in content and "return 'studio_debate_tv'" in content:
            print("   ‚úÖ Mapping des types de simulation correct")
        else:
            print("   ‚ùå Mapping des types de simulation manquant")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur lecture fichier service: {e}")
        return False
    
    # 5. V√©rifier la configuration multi-agents
    print("\nüîß V√©rification de la configuration multi-agents:")
    
    try:
        with open('services/livekit-agent/multi_agent_config.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        multi_agent_checks = [
            ("Configuration studio_debate_tv", "get_studio_debate_tv_config"),
            ("Agent Michel Dubois", "michel_dubois_animateur"),
            ("Agent Sarah Johnson", "sarah_johnson_journaliste"),
            ("Agent Marcus Thompson", "marcus_thompson_expert"),
            ("Voix George", '"voice": "George"'),
            ("Voix Bella", '"voice": "Bella"'),
            ("Voix Arnold", '"voice": "Arnold"'),
        ]
        
        for check_name, check_text in multi_agent_checks:
            if check_text in content:
                print(f"   ‚úÖ {check_name}")
            else:
                print(f"   ‚ùå {check_name} - MANQUANT")
                return False
                
    except Exception as e:
        print(f"   ‚ùå Erreur lecture multi_agent_config.py: {e}")
        return False
    
    # 6. V√©rifier que Thomas n'est pas utilis√© pour les multi-agents
    print("\nüîß V√©rification que Thomas n'est pas utilis√© pour les multi-agents:")
    
    try:
        with open('services/livekit-agent/multi_agent_main.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        if "thomas" not in content.lower() or "ai_character" not in content.lower():
            print("   ‚úÖ Pas d'utilisation de Thomas dans multi_agent_main.py")
        else:
            print("   ‚ö†Ô∏è Thomas pourrait √™tre utilis√© dans multi_agent_main.py")
            
    except Exception as e:
        print(f"   ‚ùå Erreur lecture multi_agent_main.py: {e}")
    
    print("\n‚úÖ VALIDATION TERMIN√âE AVEC SUCC√àS !")
    print("="*50)
    print("üéØ R√âSUM√â DES CORRECTIONS APPLIQU√âES:")
    print("1. ‚úÖ Priorit√© absolue aux m√©tadonn√©es dans unified_entrypoint.py")
    print("2. ‚úÖ Correction des m√©tadonn√©es frontend (studio_debate_tv)")
    print("3. ‚úÖ Mapping correct des types de simulation")
    print("4. ‚úÖ Ajout de tous les types d'exercices multi-agents")
    print("5. ‚úÖ Alias complets pour la normalisation")
    print("6. ‚úÖ Configuration multi-agents avec Michel, Sarah, Marcus")
    print("\nüöÄ L'exercice 'studio situation pro debat tv' devrait maintenant")
    print("   utiliser les multi-agents (Michel, Sarah, Marcus) au lieu de Thomas !")
    print("\nüìã PROCHAINES √âTAPES:")
    print("1. Red√©marrer les services LiveKit")
    print("2. Tester l'exercice dans l'application")
    print("3. V√©rifier que Michel Dubois (animateur) r√©pond au lieu de Thomas")
    
    return True

def generate_test_instructions():
    """G√©n√®re les instructions de test pour valider le fix"""
    
    print("\nüìã INSTRUCTIONS DE TEST:")
    print("="*40)
    print("1. Red√©marrez les services LiveKit:")
    print("   ./scripts/restart-unified.ps1")
    print("   ou")
    print("   docker-compose restart livekit-agent")
    print("\n2. Lancez l'application Flutter")
    print("   cd frontend/flutter_app")
    print("   flutter run")
    print("\n3. Testez l'exercice 'D√©bat en Plateau TV':")
    print("   - Allez dans Studio Situations Pro")
    print("   - S√©lectionnez 'D√©bat en Plateau TV'")
    print("   - Entrez un nom et un sujet")
    print("   - Commencez l'exercice")
    print("\n4. V√©rifiez que:")
    print("   ‚úÖ Michel Dubois (animateur) vous accueille")
    print("   ‚úÖ Sarah Johnson (journaliste) participe")
    print("   ‚úÖ Marcus Thompson (expert) participe")
    print("   ‚ùå Thomas ne r√©pond PAS")
    print("\n5. Messages attendus:")
    print("   'Bonsoir ! Je suis Michel Dubois et bienvenue dans notre studio de d√©bat !'")
    print("   (au lieu de 'Bonjour ! Je suis Thomas...')")

if __name__ == "__main__":
    success = validate_fix()
    if success:
        generate_test_instructions()
    else:
        print("\n‚ùå VALIDATION √âCHOU√âE - V√©rifiez les corrections")
        sys.exit(1)
