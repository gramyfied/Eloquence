# Configuration Docker complète avec TOUS les exercices et services
# Combine les services originaux ET le système multi-agents Studio Situations Pro

services:
  # === SERVICES DE BASE ===
  redis:
    image: redis:7-alpine
    container_name: eloquence-redis
    restart: on-failure:5
    ports:
      - "6379:6379"
    networks:
      - eloquence-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - redis-data:/data

  # === SERVICES STT/TTS ===
  vosk-stt:
    build:
      context: ./services/vosk-stt-analysis
      dockerfile: Dockerfile
    image: eloquence/vosk-stt:latest
    container_name: eloquence-vosk-stt
    restart: unless-stopped
    ports:
      - "8002:8002"
    networks:
      - eloquence-network
    volumes:
      - vosk-models:/app/models
      - ./logs:/app/logs
    environment:
      - PYTHONIOENCODING=utf-8
      - LANG=C.UTF-8
      - LC_ALL=C.UTF-8
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  mistral-conversation:
    build:
      context: ./services/mistral-conversation
      dockerfile: Dockerfile
    image: eloquence/mistral-conversation:latest
    container_name: eloquence-mistral-conversation
    restart: unless-stopped
    ports:
      - "8001:8001"
    networks:
      - eloquence-network
    env_file:
      - .env
    environment:
      - SCALEWAY_MISTRAL_URL=${SCALEWAY_MISTRAL_URL}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - MISTRAL_MODEL=${MISTRAL_MODEL}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  
  # === LIVEKIT SERVICES (Pour les exercices existants) ===
  livekit-server:
    image: livekit/livekit-server:latest
    container_name: eloquence-livekit-server
    restart: unless-stopped
    ports:
      - "7880:7880"    # WebSocket
      - "7881:7881"    # TCP fallback
      - "40000-40100:40000-40100/udp"  # RTC traffic
    networks:
      - eloquence-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:7880/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    environment:
      - "LIVEKIT_KEYS=devkey: devsecret123456789abcdef0123456789abcdef"
      - LIVEKIT_LOG_LEVEL=info
      - LIVEKIT_RTC_TCP_PORT=7881
      - LIVEKIT_RTC_PORT_RANGE_START=40000
      - LIVEKIT_RTC_PORT_RANGE_END=40100
      - LIVEKIT_REDIS_HOST=redis
      - LIVEKIT_REDIS_PORT=6379

  livekit-token-service:
    build:
      context: ./services/livekit-server
      dockerfile: Dockerfile
    image: eloquence/livekit-token-service:latest
    container_name: eloquence-livekit-token-service
    restart: unless-stopped
    ports:
      - "8004:8004"
    networks:
      - eloquence-network
    env_file:
      - .env
    environment:
      - LIVEKIT_API_KEY=devkey
      - LIVEKIT_API_SECRET=devsecret123456789abcdef0123456789abcdef
      - LIVEKIT_URL=ws://livekit-server:7880
    depends_on:
      livekit-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # === AGENT ORIGINAL (Tribunal des Idées, Confidence Boost) ===
  livekit-agent:
    build:
      context: ./services/livekit-agent
      dockerfile: Dockerfile
    image: eloquence/livekit-agent:latest
    container_name: eloquence-livekit-agent-original
    restart: unless-stopped
    networks:
      - eloquence-network
    env_file:
      - .env
      - ./services/livekit-agent/.env
    environment:
      - LIVEKIT_URL=ws://livekit-server:7880
      - LIVEKIT_API_KEY=devkey
      - LIVEKIT_API_SECRET=devsecret123456789abcdef0123456789abcdef
      - LIVEKIT_ROOM=confidence_boost_default
      - VOSK_STT_URL=http://vosk-stt:8002
      - MISTRAL_BASE_URL=${SCALEWAY_MISTRAL_URL}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEBUG=true
      - LOG_LEVEL=debug
    depends_on:
      livekit-server:
        condition: service_healthy
      livekit-token-service:
        condition: service_healthy
      mistral-conversation:
        condition: service_healthy
      vosk-stt:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # === API DES EXERCICES ===
  eloquence-exercises-api:
    build:
      context: ./services/eloquence-exercises-api
      dockerfile: Dockerfile
    image: eloquence/exercises-api:latest
    container_name: eloquence-exercises-api
    restart: unless-stopped
    ports:
      - "8005:8005"
    networks:
      - eloquence-network
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - LIVEKIT_URL=ws://livekit-server:7880
      - TOKEN_SERVICE_URL=http://livekit-token-service:8004
      - VOSK_SERVICE_URL=http://vosk-stt:8002
    depends_on:
      redis:
        condition: service_healthy
      livekit-server:
        condition: service_healthy
      livekit-token-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # === MULTI-AGENTS STUDIO SITUATIONS PRO (4 instances) ===
  livekit-agent-1:
    build:
      context: ./services/livekit-agent
      dockerfile: Dockerfile.multiagent
    container_name: eloquence-agent-1
    ports:
      - "8011:8080"
    environment:
      - LIVEKIT_URL=ws://livekit-server:7880
      - LIVEKIT_API_KEY=APIkey1234567890
      - LIVEKIT_API_SECRET=secret1234567890
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - AGENT_ID=agent_1
      - AGENT_TYPE=multi_agent
      - MAX_CONCURRENT_AGENTS=15
      - REDIS_URL=redis://redis:6379/0
      - PORT=8080
    depends_on:
      - livekit-server
      - redis
    networks:
      - eloquence-network
    restart: unless-stopped

  livekit-agent-2:
    build:
      context: ./services/livekit-agent
      dockerfile: Dockerfile.multiagent
    container_name: eloquence-agent-2
    ports:
      - "8012:8080"
    environment:
      - LIVEKIT_URL=ws://livekit-server:7880
      - LIVEKIT_API_KEY=APIkey1234567890
      - LIVEKIT_API_SECRET=secret1234567890
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - AGENT_ID=agent_2
      - AGENT_TYPE=multi_agent
      - MAX_CONCURRENT_AGENTS=15
      - REDIS_URL=redis://redis:6379/0
      - PORT=8080
    depends_on:
      - livekit-server
      - redis
    networks:
      - eloquence-network
    restart: unless-stopped

  livekit-agent-3:
    build:
      context: ./services/livekit-agent
      dockerfile: Dockerfile.multiagent
    container_name: eloquence-agent-3
    ports:
      - "8013:8080"
    environment:
      - LIVEKIT_URL=ws://livekit-server:7880
      - LIVEKIT_API_KEY=APIkey1234567890
      - LIVEKIT_API_SECRET=secret1234567890
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - AGENT_ID=agent_3
      - AGENT_TYPE=multi_agent
      - MAX_CONCURRENT_AGENTS=15
      - REDIS_URL=redis://redis:6379/0
      - PORT=8080
    depends_on:
      - livekit-server
      - redis
    networks:
      - eloquence-network
    restart: unless-stopped

  livekit-agent-4:
    build:
      context: ./services/livekit-agent
      dockerfile: Dockerfile.multiagent
    container_name: eloquence-agent-4
    ports:
      - "8014:8080"
    environment:
      - LIVEKIT_URL=ws://livekit-server:7880
      - LIVEKIT_API_KEY=APIkey1234567890
      - LIVEKIT_API_SECRET=secret1234567890
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - AGENT_ID=agent_4
      - AGENT_TYPE=multi_agent
      - MAX_CONCURRENT_AGENTS=15
      - REDIS_URL=redis://redis:6379/0
      - PORT=8080
    depends_on:
      - livekit-server
      - redis
    networks:
      - eloquence-network
    restart: unless-stopped

  # === LOAD BALANCER HAPROXY ===
  haproxy:
    image: haproxy:2.9-alpine
    container_name: eloquence-haproxy
    ports:
      - "8080:8080"  # Frontend
      - "8404:8404"  # Stats
    volumes:
      - ./services/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - livekit-agent-1
      - livekit-agent-2
      - livekit-agent-3
      - livekit-agent-4
    networks:
      - eloquence-network
    restart: unless-stopped

  # === MONITORING ===
  prometheus:
    image: prom/prometheus:latest
    container_name: eloquence-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - eloquence-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: eloquence-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - eloquence-network
    restart: unless-stopped

networks:
  eloquence-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  vosk-models:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local