services:
  # Service LiveKit Server
  livekit-server:
    image: livekit/livekit-server:latest
    container_name: eloquence-livekit-server
    ports:
      - "7880:7880"  # WebRTC
      - "7881:7881"  # HTTP API
      - "7882:7882"  # gRPC
    environment:
      - "LIVEKIT_KEYS=APIkey1234567890: secret1234567890"
      - LIVEKIT_LOG_LEVEL=info
      - LIVEKIT_RTC_TCP_PORT=7881
      - LIVEKIT_RTC_PORT_RANGE_START=50000
      - LIVEKIT_RTC_PORT_RANGE_END=60000
      - LIVEKIT_REDIS_HOST=redis:6379
    networks:
      - eloquence-network

  # Service Multi-Agents LiveKit (4 instances pour scalabilité)
  livekit-agent-1:
    build:
      context: ./services/livekit-agent
      dockerfile: Dockerfile.multiagent
    container_name: eloquence-agent-1
    environment:
      - LIVEKIT_URL=ws://livekit-server:7880
      - LIVEKIT_API_KEY=APIkey1234567890
      - LIVEKIT_API_SECRET=secret1234567890
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - AGENT_ID=agent_1
      - AGENT_TYPE=multi_agent
      - MAX_CONCURRENT_AGENTS=3
      - REDIS_URL=redis://redis:6379/0
      - PROMETHEUS_PORT=9091
    depends_on:
      - livekit-server
      - redis
    networks:
      - eloquence-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  livekit-agent-2:
    build:
      context: ./services/livekit-agent
      dockerfile: Dockerfile.multiagent
    container_name: eloquence-agent-2
    environment:
      - LIVEKIT_URL=ws://livekit-server:7880
      - LIVEKIT_API_KEY=APIkey1234567890
      - LIVEKIT_API_SECRET=secret1234567890
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - AGENT_ID=agent_2
      - AGENT_TYPE=multi_agent
      - MAX_CONCURRENT_AGENTS=3
      - REDIS_URL=redis://redis:6379/0
      - PROMETHEUS_PORT=9092
    depends_on:
      - livekit-server
      - redis
    networks:
      - eloquence-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  livekit-agent-3:
    build:
      context: ./services/livekit-agent
      dockerfile: Dockerfile.multiagent
    container_name: eloquence-agent-3
    environment:
      - LIVEKIT_URL=ws://livekit-server:7880
      - LIVEKIT_API_KEY=APIkey1234567890
      - LIVEKIT_API_SECRET=secret1234567890
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - AGENT_ID=agent_3
      - AGENT_TYPE=multi_agent
      - MAX_CONCURRENT_AGENTS=3
      - REDIS_URL=redis://redis:6379/0
      - PROMETHEUS_PORT=9093
    depends_on:
      - livekit-server
      - redis
    networks:
      - eloquence-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  livekit-agent-4:
    build:
      context: ./services/livekit-agent
      dockerfile: Dockerfile.multiagent
    container_name: eloquence-agent-4
    environment:
      - LIVEKIT_URL=ws://livekit-server:7880
      - LIVEKIT_API_KEY=APIkey1234567890
      - LIVEKIT_API_SECRET=secret1234567890
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - AGENT_ID=agent_4
      - AGENT_TYPE=multi_agent
      - MAX_CONCURRENT_AGENTS=3
      - REDIS_URL=redis://redis:6379/0
      - PROMETHEUS_PORT=9094
    depends_on:
      - livekit-server
      - redis
    networks:
      - eloquence-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Redis pour la coordination entre agents
  redis:
    image: redis:7-alpine
    container_name: eloquence-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - eloquence-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Load Balancer HAProxy pour distribuer la charge
  haproxy:
    image: haproxy:2.9-alpine
    container_name: eloquence-haproxy
    ports:
      - "8080:8080"  # Frontend
      - "8404:8404"  # Stats
    volumes:
      - ./services/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - livekit-agent-1
      - livekit-agent-2
      - livekit-agent-3
      - livekit-agent-4
    networks:
      - eloquence-network
    restart: unless-stopped

  # Prometheus pour monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: eloquence-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - eloquence-network
    restart: unless-stopped

  # Grafana pour visualisation
  grafana:
    image: grafana/grafana:latest
    container_name: eloquence-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - eloquence-network
    restart: unless-stopped

  # Node Exporter pour métriques système
  node-exporter:
    image: prom/node-exporter:latest
    container_name: eloquence-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+)($$|/)'
    networks:
      - eloquence-network
    restart: unless-stopped

  # cAdvisor pour métriques Docker
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: eloquence-cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - eloquence-network
    restart: unless-stopped

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  eloquence-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16