#!/usr/bin/env python3
"""
Correction COMPL√àTE des probl√®mes de voix Eloquence
1. Mapping voix (Sarah/Marcus utilisent voix de Michel)
2. Buffer audio introduction
3. Noms agents audibles
"""

import os
import sys
import re

def fix_voice_mapping():
    """Corrige le mapping des voix dans elevenlabs_flash_tts_service.py"""
    
    file_path = "/home/ubuntu/Eloquence/services/livekit-agent/elevenlabs_flash_tts_service.py"
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # CORRECTION 1 : Ajouter des logs d√©taill√©s dans get_voice_config_for_agent
    old_method = '''def get_voice_config_for_agent(self, agent_id: str) -> Dict[str, Any]:
        """R√©cup√®re la configuration vocale pour un agent sp√©cifique"""
        
        if agent_id in VOICE_MAPPING_FRENCH_NEUTRAL_PROFESSIONAL:
            return VOICE_MAPPING_FRENCH_NEUTRAL_PROFESSIONAL[agent_id]
        else:
            # Fallback vers Michel si agent non trouv√©
            return VOICE_MAPPING_FRENCH_NEUTRAL_PROFESSIONAL["michel_dubois_animateur"]'''
    
    new_method = '''def get_voice_config_for_agent(self, agent_id: str) -> Dict[str, Any]:
        """R√©cup√®re la configuration vocale pour un agent sp√©cifique"""
        
        logger.info(f"üîç RECHERCHE VOIX pour agent: {agent_id}")
        
        if agent_id in VOICE_MAPPING_FRENCH_NEUTRAL_PROFESSIONAL:
            config = VOICE_MAPPING_FRENCH_NEUTRAL_PROFESSIONAL[agent_id]
            voice_id = config.get('voice_id', 'UNKNOWN')
            logger.info(f"‚úÖ MAPPING TROUV√â: {agent_id} ‚Üí {voice_id}")
            return config
        else:
            logger.error(f"‚ùå AGENT INCONNU: {agent_id}")
            logger.info("üîß Fallback vers Michel")
            # Fallback vers Michel si agent non trouv√©
            fallback = VOICE_MAPPING_FRENCH_NEUTRAL_PROFESSIONAL["michel_dubois_animateur"]
            logger.info(f"üîß Fallback voix: {fallback.get('voice_id', 'UNKNOWN')}")
            return fallback'''
    
    if old_method in content:
        content = content.replace(old_method, new_method)
        print("‚úÖ Correction 1: Logs d√©taill√©s mapping voix ajout√©s")
    else:
        print("‚ö†Ô∏è M√©thode get_voice_config_for_agent non trouv√©e")
    
    # CORRECTION 2 : V√©rifier que synthesize_with_emotion utilise bien le mapping
    # Chercher l'appel √† get_voice_config_for_agent
    if 'get_voice_config_for_agent(agent_id)' not in content:
        print("‚ö†Ô∏è Appel get_voice_config_for_agent manquant dans synthesize_with_emotion")
        
        # Ajouter l'appel dans synthesize_with_emotion
        old_synthesize = '''# R√©cup√©ration configuration vocale
        voice_config = VOICE_MAPPING_FRENCH_NEUTRAL_PROFESSIONAL.get(
            agent_id, 
            VOICE_MAPPING_FRENCH_NEUTRAL_PROFESSIONAL["michel_dubois_animateur"]
        )'''
        
        new_synthesize = '''# R√©cup√©ration configuration vocale avec logs
        voice_config = self.get_voice_config_for_agent(agent_id)'''
        
        if old_synthesize in content:
            content = content.replace(old_synthesize, new_synthesize)
            print("‚úÖ Correction 2: Appel mapping voix corrig√©")
    else:
        print("‚úÖ Appel get_voice_config_for_agent d√©j√† pr√©sent")
    
    # Sauvegarder
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ Corrections mapping voix appliqu√©es")
    return True

def fix_audio_buffer():
    """Corrige le probl√®me de buffer audio dans multi_agent_main.py"""
    
    file_path = "/home/ubuntu/Eloquence/services/livekit-agent/multi_agent_main.py"
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # CORRECTION : Buffer audio avec gestion d'erreur
    old_buffer = '''                    # Convertir bytes en array numpy (supposant PCM 16-bit)
                    audio_array = np.frombuffer(intro_audio, dtype=np.int16)
                    
                    # Cr√©er frame audio
                    frame = rtc.AudioFrame(
                        data=audio_array,
                        sample_rate=24000,
                        num_channels=1,
                        samples_per_channel=len(audio_array)
                    )'''
    
    new_buffer = '''                    # Convertir bytes en array numpy avec gestion d'erreur
                    try:
                        # V√©rifier que la taille est paire (16-bit = 2 bytes par sample)
                        if len(intro_audio) % 2 != 0:
                            logging.getLogger(__name__).warning("‚ö†Ô∏è Padding audio n√©cessaire")
                            intro_audio = intro_audio + b'\\x00'
                        
                        # Conversion PCM 16-bit
                        audio_array = np.frombuffer(intro_audio, dtype=np.int16)
                        logging.getLogger(__name__).info(f"‚úÖ Audio converti: {len(audio_array)} samples")
                        
                    except ValueError as e:
                        logging.getLogger(__name__).error(f"‚ùå Erreur conversion: {e}")
                        # Essayer format float32 puis convertir
                        try:
                            audio_float = np.frombuffer(intro_audio, dtype=np.float32)
                            audio_array = (audio_float * 32767).astype(np.int16)
                            logging.getLogger(__name__).info("üîß Conversion float32‚Üíint16 r√©ussie")
                        except:
                            logging.getLogger(__name__).error("‚ùå Impossible de convertir l'audio")
                            return
                    
                    # Cr√©er frame audio
                    frame = rtc.AudioFrame(
                        data=audio_array,
                        sample_rate=24000,
                        num_channels=1,
                        samples_per_channel=len(audio_array)
                    )'''
    
    if old_buffer in content:
        content = content.replace(old_buffer, new_buffer)
        print("‚úÖ Correction buffer audio appliqu√©e")
    else:
        print("‚ö†Ô∏è Code buffer audio non trouv√©")
    
    # Sauvegarder
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ Corrections buffer audio appliqu√©es")
    return True

def fix_agent_names():
    """Corrige les noms d'agents audibles dans enhanced_multi_agent_manager.py"""
    
    file_path = "/home/ubuntu/Eloquence/services/livekit-agent/enhanced_multi_agent_manager.py"
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # CORRECTION 1 : Ajouter fonction de nettoyage
    clean_function = '''
    def clean_agent_text(self, text: str, agent_id: str) -> str:
        """Nettoie le texte en retirant le nom de l'agent"""
        
        # Patterns √† retirer (noms d'agents au d√©but)
        patterns = [
            r'^Michel Dubois:\\s*',
            r'^Sarah Johnson:\\s*', 
            r'^Marcus Thompson:\\s*',
            r'^[A-Za-z\\s]+:\\s*'  # Pattern g√©n√©rique
        ]
        
        cleaned_text = text
        for pattern in patterns:
            cleaned_text = re.sub(pattern, '', cleaned_text, flags=re.IGNORECASE)
        
        # Log du nettoyage
        if cleaned_text != text:
            logger.info(f"üßπ Texte nettoy√© pour {agent_id}: '{text[:30]}...' ‚Üí '{cleaned_text[:30]}...'")
        
        return cleaned_text.strip()
'''
    
    # Ajouter la fonction avant la derni√®re m√©thode de la classe
    if 'def clean_agent_text' not in content:
        # Trouver un bon endroit pour ins√©rer
        insertion_point = "def get_enhanced_manager("
        if insertion_point in content:
            content = content.replace(insertion_point, clean_function + "\n" + insertion_point)
            print("‚úÖ Fonction clean_agent_text ajout√©e")
        else:
            print("‚ö†Ô∏è Point d'insertion non trouv√© pour clean_agent_text")
    else:
        print("‚úÖ Fonction clean_agent_text d√©j√† pr√©sente")
    
    # CORRECTION 2 : Utiliser la fonction dans synthesize_with_emotion
    # Chercher l'appel TTS et ajouter le nettoyage
    old_tts_call = '''        # CORRECTION CRITIQUE : Pr√©processing √©motionnel SILENCIEUX
        processed_text = clean_text_for_tts(text)'''
    
    new_tts_call = '''        # CORRECTION CRITIQUE : Pr√©processing √©motionnel SILENCIEUX
        processed_text = clean_text_for_tts(text)
        
        # NOUVEAU : Nettoyer les noms d'agents
        processed_text = self.clean_agent_text(processed_text, agent_id)'''
    
    if old_tts_call in content:
        content = content.replace(old_tts_call, new_tts_call)
        print("‚úÖ Nettoyage noms agents ajout√© dans TTS")
    else:
        print("‚ö†Ô∏è Point d'insertion TTS non trouv√©")
    
    # Ajouter import re si n√©cessaire
    if "import re" not in content:
        content = "import re\n" + content
        print("‚úÖ Import re ajout√©")
    
    # Sauvegarder
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ Corrections noms agents appliqu√©es")
    return True

def create_voice_test():
    """Cr√©e un script de test pour valider les corrections"""
    
    test_script = '''#!/usr/bin/env python3
"""
Test des corrections voix Eloquence
"""

import sys
import os
import re

def test_voice_mapping():
    """Teste le mapping des voix"""
    
    file_path = "/home/ubuntu/Eloquence/services/livekit-agent/elevenlabs_flash_tts_service.py"
    
    with open(file_path, 'r') as f:
        content = f.read()
    
    print("üß™ TEST MAPPING VOIX")
    print("=" * 40)
    
    # V√©rifier pr√©sence des logs
    if "MAPPING TROUV√â" in content:
        print("‚úÖ Logs d√©taill√©s pr√©sents")
    else:
        print("‚ùå Logs d√©taill√©s manquants")
    
    # V√©rifier appel get_voice_config_for_agent
    if "get_voice_config_for_agent(agent_id)" in content:
        print("‚úÖ Appel mapping correct")
    else:
        print("‚ùå Appel mapping manquant")
    
    return True

def test_clean_names():
    """Teste le nettoyage des noms"""
    
    file_path = "/home/ubuntu/Eloquence/services/livekit-agent/enhanced_multi_agent_manager.py"
    
    with open(file_path, 'r') as f:
        content = f.read()
    
    print("\\nüß™ TEST NETTOYAGE NOMS")
    print("=" * 40)
    
    if "def clean_agent_text" in content:
        print("‚úÖ Fonction nettoyage pr√©sente")
    else:
        print("‚ùå Fonction nettoyage manquante")
    
    if "clean_agent_text(processed_text, agent_id)" in content:
        print("‚úÖ Appel nettoyage pr√©sent")
    else:
        print("‚ùå Appel nettoyage manquant")
    
    return True

if __name__ == "__main__":
    print("üöÄ TEST CORRECTIONS VOIX")
    print("=" * 50)
    
    test_voice_mapping()
    test_clean_names()
    
    print("\\n‚úÖ TESTS TERMIN√âS")
'''
    
    with open("/home/ubuntu/Eloquence/test_voice_fixes.py", 'w', encoding='utf-8') as f:
        f.write(test_script)
    
    os.chmod("/home/ubuntu/Eloquence/test_voice_fixes.py", 0o755)
    print("‚úÖ Script de test cr√©√©: test_voice_fixes.py")

def main():
    """Fonction principale de correction"""
    print("üöÄ CORRECTION COMPL√àTE PROBL√àMES VOIX ELOQUENCE")
    
    try:
        # 1. Corriger mapping voix
        print("\n1Ô∏è‚É£ Correction mapping voix...")
        fix_voice_mapping()
        
        # 2. Corriger buffer audio
        print("\n2Ô∏è‚É£ Correction buffer audio...")
        fix_audio_buffer()
        
        # 3. Corriger noms agents
        print("\n3Ô∏è‚É£ Correction noms agents...")
        fix_agent_names()
        
        # 4. Cr√©er script de test
        print("\n4Ô∏è‚É£ Cr√©ation script de test...")
        create_voice_test()
        
        print("\n‚úÖ TOUTES LES CORRECTIONS VOIX APPLIQU√âES !")
        print("\nüéØ R√âSULTAT ATTENDU :")
        print("- Sarah utilise voix Bella (f√©minine)")
        print("- Marcus utilise voix Arnold (masculine diff√©rente)")
        print("- Introduction audio fonctionne")
        print("- Noms agents non audibles")
        print("\nüîÑ RED√âMARRER : docker-compose restart")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR LORS DE LA CORRECTION: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

