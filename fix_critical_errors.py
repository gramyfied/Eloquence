#!/usr/bin/env python3
"""
Script pour corriger les erreurs critiques identifi√©es dans les logs
"""

import os
import re

def fix_import_re_error():
    """Corrige l'erreur 'name re is not defined' dans enhanced_multi_agent_manager.py"""
    
    file_path = "/home/ubuntu/Eloquence/services/livekit-agent/enhanced_multi_agent_manager.py"
    
    print("üîß CORRECTION 1: Import 're' manquant")
    
    try:
        # Lire le fichier
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier si import re est d√©j√† pr√©sent
        if 'import re' in content:
            print("‚úÖ Import 're' d√©j√† pr√©sent")
            return True
        
        # Ajouter import re apr√®s les autres imports
        lines = content.split('\n')
        
        # Trouver la ligne o√π ajouter l'import
        import_line_index = -1
        for i, line in enumerate(lines):
            if line.startswith('import ') or line.startswith('from '):
                import_line_index = i
        
        if import_line_index == -1:
            # Ajouter au d√©but du fichier
            lines.insert(0, 'import re')
        else:
            # Ajouter apr√®s le dernier import
            lines.insert(import_line_index + 1, 'import re')
        
        # R√©√©crire le fichier
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write('\n'.join(lines))
        
        print("‚úÖ Import 're' ajout√© avec succ√®s")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur correction import 're': {e}")
        return False

def fix_manager_scope_error():
    """Corrige l'erreur de scope de la variable manager dans multi_agent_main.py"""
    
    file_path = "/home/ubuntu/Eloquence/services/livekit-agent/multi_agent_main.py"
    
    print("üîß CORRECTION 2: Scope variable manager")
    
    try:
        # Lire le fichier
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Chercher la fonction probl√©matique
        pattern = r'(.*?)intro_text, intro_audio = await manager\.generate_introduction\(exercise_type, user_data\)'
        
        if re.search(pattern, content, re.DOTALL):
            # Remplacer par une version s√©curis√©e
            replacement = '''try:
        if 'manager' in locals() and manager:
            intro_text, intro_audio = await manager.generate_introduction(exercise_type, user_data)
        else:
            logger.error("‚ùå Manager non initialis√© pour introduction")
            return
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration introduction: {e}")
        return'''
            
            content = re.sub(
                r'intro_text, intro_audio = await manager\.generate_introduction\(exercise_type, user_data\)',
                replacement,
                content
            )
            
            # R√©√©crire le fichier
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print("‚úÖ Scope variable manager corrig√©")
            return True
        else:
            print("‚ö†Ô∏è Pattern manager.generate_introduction non trouv√©")
            return False
        
    except Exception as e:
        print(f"‚ùå Erreur correction scope manager: {e}")
        return False

def verify_corrections():
    """V√©rifie que les corrections ont √©t√© appliqu√©es"""
    
    print("\nüß™ V√âRIFICATION DES CORRECTIONS")
    print("=" * 50)
    
    # V√©rification 1: Import re
    file1 = "/home/ubuntu/Eloquence/services/livekit-agent/enhanced_multi_agent_manager.py"
    try:
        with open(file1, 'r') as f:
            content1 = f.read()
        
        if 'import re' in content1:
            print("‚úÖ Import 're' pr√©sent dans enhanced_multi_agent_manager.py")
        else:
            print("‚ùå Import 're' manquant dans enhanced_multi_agent_manager.py")
            return False
    except Exception as e:
        print(f"‚ùå Erreur v√©rification import re: {e}")
        return False
    
    # V√©rification 2: Fonction clean_agent_names
    if 'def clean_agent_names' in content1:
        print("‚úÖ Fonction clean_agent_names pr√©sente")
    else:
        print("‚ùå Fonction clean_agent_names manquante")
        return False
    
    # V√©rification 3: Scope manager
    file2 = "/home/ubuntu/Eloquence/services/livekit-agent/multi_agent_main.py"
    try:
        with open(file2, 'r') as f:
            content2 = f.read()
        
        if 'if \'manager\' in locals()' in content2:
            print("‚úÖ Scope manager corrig√© dans multi_agent_main.py")
        else:
            print("‚ö†Ô∏è Scope manager non modifi√© (peut-√™tre d√©j√† correct)")
    except Exception as e:
        print(f"‚ùå Erreur v√©rification scope manager: {e}")
        return False
    
    return True

def main():
    """Fonction principale"""
    
    print("üöÄ CORRECTION ERREURS CRITIQUES ELOQUENCE")
    print("=" * 60)
    
    success = True
    
    # Correction 1: Import re
    if not fix_import_re_error():
        success = False
    
    # Correction 2: Scope manager
    if not fix_manager_scope_error():
        success = False
    
    # V√©rification
    if not verify_corrections():
        success = False
    
    if success:
        print("\n‚úÖ TOUTES LES CORRECTIONS APPLIQU√âES AVEC SUCC√àS !")
        print("\nüéØ PROCHAINES √âTAPES :")
        print("1. Committer et pousser les corrections")
        print("2. Red√©marrer les services Docker")
        print("3. Tester avec une nouvelle room")
        print("4. V√©rifier les logs pour :")
        print("   - ‚úÖ Introduction g√©n√©r√©e")
        print("   - üîç RECHERCHE VOIX")
        print("   - ‚úÖ MAPPING TROUV√â")
        print("   - üßπ Nom agent retir√©")
    else:
        print("\n‚ùå CERTAINES CORRECTIONS ONT √âCHOU√â")
        print("V√©rifiez les erreurs ci-dessus")
    
    return success

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)

