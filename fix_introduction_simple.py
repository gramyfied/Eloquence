#!/usr/bin/env python3
"""
Correction SIMPLE et CIBL√âE pour l'introduction d'Eloquence
Ajoute seulement l'appel √† generate_introduction sans casser le flux existant
"""

import os
import sys

def fix_introduction_call():
    """Ajoute l'appel √† generate_introduction dans multi_agent_main.py de fa√ßon minimale"""
    
    file_path = "/home/ubuntu/Eloquence/services/livekit-agent/multi_agent_main.py"
    
    # Lire le fichier actuel
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Chercher le point d'insertion apr√®s la connexion LiveKit
    insertion_point = "logging.getLogger(__name__).info(\"‚úÖ Connexion LiveKit multi-agents √©tablie avec succ√®s\")"
    
    if insertion_point in content:
        # Code minimal pour ajouter l'introduction
        introduction_code = '''
        
        # üé¨ G√âN√âRATION INTRODUCTION SIMPLE
        try:
            logging.getLogger(__name__).info("üé¨ G√©n√©ration introduction...")
            
            # R√©cup√©ration user_data depuis le contexte
            user_data = {
                'user_name': getattr(ctx, 'user_name', 'notre invit√©'),
                'user_subject': getattr(ctx, 'user_subject', 'un sujet passionnant')
            }
            
            # G√©n√©ration introduction avec manager
            intro_text, intro_audio = await manager.generate_introduction(exercise_type, user_data)
            logging.getLogger(__name__).info(f"‚úÖ Introduction g√©n√©r√©e: {len(intro_text)} caract√®res")
            
            # Note: L'audio sera g√©r√© par le syst√®me TTS existant
            
        except Exception as e:
            logging.getLogger(__name__).error(f"‚ùå Erreur g√©n√©ration introduction: {e}")
            # Continuer sans introduction
            pass'''
        
        # Ins√©rer le code apr√®s la connexion
        content = content.replace(insertion_point, insertion_point + introduction_code)
        print("‚úÖ Code introduction ajout√© apr√®s connexion LiveKit")
    else:
        print("‚ö†Ô∏è Point d'insertion non trouv√©")
        return False
    
    # Sauvegarder le fichier modifi√©
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ Correction introduction simple appliqu√©e")
    return True

def add_tts_logs_minimal():
    """Ajoute des logs TTS minimaux sans casser la logique existante"""
    
    file_path = "/home/ubuntu/Eloquence/services/livekit-agent/enhanced_multi_agent_manager.py"
    
    # Lire le fichier actuel
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Chercher la m√©thode synthesize_with_emotion et ajouter un log simple
    old_synthesize = 'async def synthesize_with_emotion(self, text: str, agent_id: str,'
    
    if old_synthesize in content:
        # Ajouter juste un log au d√©but de la m√©thode
        log_addition = '''async def synthesize_with_emotion(self, text: str, agent_id: str,
                                     emotion: str = "neutre", intensity: float = 0.5) -> bytes:
        """Synth√®se vocale avec √©motion ElevenLabs v2.5 - √âMOTIONS SILENCIEUSES"""
        
        # LOG AJOUT√â POUR DIAGNOSTIC
        logger.info(f"üéµ TTS D√âBUT: {agent_id} - {text[:30]}...")
        
        try:'''
        
        # Remplacer seulement le d√©but de la m√©thode
        content = content.replace(
            old_synthesize + '\n                                     emotion: str = "neutre", intensity: float = 0.5) -> bytes:\n        """Synth√®se vocale avec √©motion ElevenLabs v2.5 - √âMOTIONS SILENCIEUSES"""\n        \n        try:',
            log_addition
        )
        print("‚úÖ Log TTS minimal ajout√©")
    else:
        print("‚ö†Ô∏è M√©thode synthesize_with_emotion non trouv√©e")
    
    # Sauvegarder le fichier modifi√©
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ Logs TTS minimaux appliqu√©s")
    return True

def main():
    """Fonction principale de correction minimale"""
    print("üöÄ CORRECTION MINIMALE ELOQUENCE - SANS CASSER L'EXISTANT")
    
    try:
        # 1. Corriger l'introduction de fa√ßon minimale
        print("\n1Ô∏è‚É£ Ajout appel introduction minimal...")
        fix_introduction_call()
        
        # 2. Ajouter logs TTS minimaux
        print("\n2Ô∏è‚É£ Ajout logs TTS minimaux...")
        add_tts_logs_minimal()
        
        print("\n‚úÖ CORRECTIONS MINIMALES APPLIQU√âES !")
        print("\nüéØ R√âSULTAT ATTENDU :")
        print("- Marcus et Sarah parlent toujours (pas de r√©gression)")
        print("- Introduction de Michel ajout√©e")
        print("- Logs TTS pour diagnostic")
        print("\nüîÑ RED√âMARRER : docker-compose restart")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR LORS DE LA CORRECTION: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

