#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üåå DIAGNOSTIC AUTOMATIQUE - EXERCICE COSMIC VOICE
Gestionnaire R√©seau Intelligent Eloquence

V√©rifie la sant√© compl√®te de l'exercice Cosmic Voice et fournit
des recommandations de correction automatique.
"""

import asyncio
import aiohttp
import os
import sys
import json
from datetime import datetime
from pathlib import Path

# Configuration des couleurs pour sortie console
class Colors:
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

class CosmicVoiceHealthChecker:
    def __init__(self):
        self.health_score = 0
        self.max_score = 100
        self.issues = []
        self.recommendations = []
        
    def print_header(self):
        """Affiche l'en-t√™te du diagnostic"""
        print(f"{Colors.CYAN}{Colors.BOLD}")
        print("üåå" * 25)
        print("     DIAGNOSTIC COSMIC VOICE")
        print("   Gestionnaire R√©seau Eloquence")
        print("üåå" * 25)
        print(f"{Colors.END}")
        print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)
        
    async def check_environment_variables(self):
        """V√©rifie les variables d'environnement requises (30 points)"""
        print(f"\n{Colors.BLUE}üîß VARIABLES D'ENVIRONNEMENT{Colors.END}")
        print("-" * 40)
        
        required_vars = {
            'LIVEKIT_API_KEY': 'Cl√© API LiveKit pour streaming audio',
            'LIVEKIT_API_SECRET': 'Secret API LiveKit',
            'LIVEKIT_URL': 'URL du serveur LiveKit',
            'MISTRAL_API_KEY': 'Cl√© API Mistral pour feedbacks IA',
            'SCALEWAY_MISTRAL_URL': 'URL de l\'API Mistral Scaleway'
        }
        
        missing_vars = []
        present_vars = []
        
        for var, description in required_vars.items():
            value = os.getenv(var)
            if value:
                present_vars.append(var)
                # Masquer les valeurs sensibles
                masked_value = value[:8] + "..." if len(value) > 8 else "***"
                print(f"  ‚úÖ {var}: {masked_value}")
            else:
                missing_vars.append(var)
                print(f"  ‚ùå {var}: MANQUANTE")
                self.issues.append(f"Variable d'environnement manquante: {var}")
                
        if not missing_vars:
            self.health_score += 30
            print(f"\n{Colors.GREEN}‚úÖ Variables d'environnement: PARFAIT (30/30){Colors.END}")
        else:
            partial_score = int(30 * len(present_vars) / len(required_vars))
            self.health_score += partial_score
            print(f"\n{Colors.YELLOW}‚ö†Ô∏è  Variables d'environnement: PARTIEL ({partial_score}/30){Colors.END}")
            
            self.recommendations.append({
                'priority': 'CRITIQUE',
                'action': 'Configurer les variables d\'environnement manquantes',
                'details': f"Ajouter au fichier .env:\n" + 
                          "\n".join([f"{var}=your_{var.lower()}_value" for var in missing_vars])
            })
            
    async def check_backend_services(self):
        """V√©rifie les services backend requis (40 points)"""
        print(f"\n{Colors.BLUE}üöÄ SERVICES BACKEND{Colors.END}")
        print("-" * 40)
        
        services = [
            {
                'name': 'eloquence-streaming-api',
                'url': 'http://localhost:8002/health',
                'description': 'Service principal WebSocket audio',
                'points': 15
            },
            {
                'name': 'vosk-stt',
                'url': 'http://localhost:2700/health',
                'description': 'Reconnaissance vocale et pitch',
                'points': 10
            },
            {
                'name': 'mistral-conversation',
                'url': 'http://localhost:8004/health',
                'description': 'Feedbacks conversationnels IA',
                'points': 10
            },
            {
                'name': 'redis',
                'url': 'redis://localhost:6379',
                'description': 'Gestion des sessions',
                'points': 5
            }
        ]
        
        for service in services:
            try:
                if service['url'].startswith('redis://'):
                    # Test Redis sp√©cial
                    try:
                        import redis
                        r = redis.Redis.from_url(service['url'])
                        await asyncio.get_event_loop().run_in_executor(None, r.ping)
                        self.health_score += service['points']
                        print(f"  ‚úÖ {service['name']}: DISPONIBLE")
                    except ImportError:
                        print(f"  ‚ö†Ô∏è  {service['name']}: Module redis non install√©")
                        self.issues.append(f"Module Python 'redis' manquant")
                    except Exception as e:
                        print(f"  ‚ùå {service['name']}: INDISPONIBLE - {str(e)[:50]}")
                        self.issues.append(f"Service {service['name']} indisponible")
                else:
                    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=5)) as session:
                        async with session.get(service['url']) as response:
                            if response.status == 200:
                                self.health_score += service['points']
                                print(f"  ‚úÖ {service['name']}: DISPONIBLE (HTTP {response.status})")
                            else:
                                print(f"  ‚ùå {service['name']}: ERREUR HTTP {response.status}")
                                self.issues.append(f"Service {service['name']} erreur HTTP {response.status}")
                                
            except asyncio.TimeoutError:
                print(f"  ‚è±Ô∏è  {service['name']}: TIMEOUT (>5s)")
                self.issues.append(f"Service {service['name']} timeout")
            except Exception as e:
                print(f"  ‚ùå {service['name']}: √âCHEC - {str(e)[:50]}")
                self.issues.append(f"Service {service['name']} inaccessible: {str(e)[:50]}")
                
        print(f"\n{Colors.GREEN if self.health_score >= 70 else Colors.YELLOW if self.health_score >= 40 else Colors.RED}"
              f"Services backend: {min(40, max(0, self.health_score - 30))}/40{Colors.END}")
              
        if self.health_score < 70:
            self.recommendations.append({
                'priority': 'CRITIQUE',
                'action': 'D√©marrer les services Docker manquants',
                'details': 'Ex√©cuter: docker-compose up -d dans le r√©pertoire du projet'
            })
            
    async def check_network_connectivity(self):
        """V√©rifie la connectivit√© r√©seau (15 points)"""
        print(f"\n{Colors.BLUE}üåê CONNECTIVIT√â R√âSEAU{Colors.END}")
        print("-" * 40)
        
        test_urls = [
            ('Google DNS', 'https://dns.google/resolve?name=google.com&type=A'),
            ('Internet g√©n√©ral', 'https://httpbin.org/status/200'),
        ]
        
        connectivity_score = 0
        max_connectivity = 15
        
        for name, url in test_urls:
            try:
                async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=5)) as session:
                    async with session.get(url) as response:
                        if response.status == 200:
                            connectivity_score += max_connectivity // len(test_urls)
                            print(f"  ‚úÖ {name}: OK")
                        else:
                            print(f"  ‚ö†Ô∏è  {name}: HTTP {response.status}")
            except Exception as e:
                print(f"  ‚ùå {name}: √âCHEC - {str(e)[:30]}")
                
        self.health_score += connectivity_score
        
        if connectivity_score == max_connectivity:
            print(f"\n{Colors.GREEN}‚úÖ Connectivit√© r√©seau: EXCELLENTE ({connectivity_score}/{max_connectivity}){Colors.END}")
        elif connectivity_score > 0:
            print(f"\n{Colors.YELLOW}‚ö†Ô∏è  Connectivit√© r√©seau: LIMIT√âE ({connectivity_score}/{max_connectivity}){Colors.END}")
        else:
            print(f"\n{Colors.RED}‚ùå Connectivit√© r√©seau: √âCHEC ({connectivity_score}/{max_connectivity}){Colors.END}")
            self.issues.append("Pas de connectivit√© internet")
            self.recommendations.append({
                'priority': 'MAJEUR',
                'action': 'V√©rifier la connexion internet',
                'details': 'V√©rifier les param√®tres r√©seau et les pare-feu'
            })
            
    async def check_flutter_configuration(self):
        """V√©rifie la configuration Flutter (10 points)"""
        print(f"\n{Colors.BLUE}üì± CONFIGURATION FLUTTER{Colors.END}")
        print("-" * 40)
        
        flutter_files = [
            'frontend/flutter_app/lib/features/confidence_boost/presentation/screens/cosmic_voice_screen.dart',
            'frontend/flutter_app/lib/features/confidence_boost/data/services/universal_audio_exercise_service.dart',
        ]
        
        config_score = 0
        max_config = 10
        
        for file_path in flutter_files:
            if os.path.exists(file_path):
                config_score += max_config // len(flutter_files)
                print(f"  ‚úÖ {os.path.basename(file_path)}: PR√âSENT")
                
                # V√©rifier le contenu critique
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if 'CosmicVoiceConnectionManager' in content:
                        print(f"    ‚úÖ Gestionnaire de connexion: D√âTECT√â")
                    if 'cosmic_voice_control' in content:
                        print(f"    ‚úÖ Configuration exercice: D√âTECT√âE")
            else:
                print(f"  ‚ùå {os.path.basename(file_path)}: MANQUANT")
                self.issues.append(f"Fichier Flutter manquant: {file_path}")
                
        self.health_score += config_score
        print(f"\n{Colors.GREEN if config_score == max_config else Colors.YELLOW}"
              f"Configuration Flutter: {config_score}/{max_config}{Colors.END}")
              
    async def check_docker_environment(self):
        """V√©rifie l'environnement Docker (5 points)"""
        print(f"\n{Colors.BLUE}üê≥ ENVIRONNEMENT DOCKER{Colors.END}")
        print("-" * 40)
        
        docker_score = 0
        max_docker = 5
        
        # V√©rifier si Docker est install√©
        try:
            process = await asyncio.create_subprocess_exec(
                'docker', '--version',
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                docker_version = stdout.decode().strip()
                print(f"  ‚úÖ Docker: {docker_version}")
                docker_score += 3
            else:
                print(f"  ‚ùå Docker: NON INSTALL√â")
                self.issues.append("Docker non install√©")
        except Exception as e:
            print(f"  ‚ùå Docker: INACCESSIBLE - {str(e)[:30]}")
            
        # V√©rifier docker-compose
        try:
            process = await asyncio.create_subprocess_exec(
                'docker-compose', '--version',
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                compose_version = stdout.decode().strip()
                print(f"  ‚úÖ Docker Compose: {compose_version}")
                docker_score += 2
            else:
                print(f"  ‚ùå Docker Compose: NON INSTALL√â")
                self.issues.append("Docker Compose non install√©")
        except Exception as e:
            print(f"  ‚ùå Docker Compose: INACCESSIBLE")
            
        self.health_score += docker_score
        
        if docker_score < max_docker:
            self.recommendations.append({
                'priority': 'MAJEUR',
                'action': 'Installer Docker et Docker Compose',
                'details': 'T√©l√©charger depuis https://docker.com et suivre les instructions d\'installation'
            })
            
    def generate_health_report(self):
        """G√©n√®re le rapport final de sant√©"""
        print(f"\n{Colors.BOLD}=" * 60)
        print("üìä RAPPORT DE SANT√â FINAL")
        print("=" * 60 + f"{Colors.END}")
        
        # Score global
        percentage = int((self.health_score / self.max_score) * 100)
        
        if percentage >= 80:
            status_color = Colors.GREEN
            status_icon = "üü¢"
            status_text = "EXCELLENT"
            status_desc = "Exercice pr√™t pour production"
        elif percentage >= 60:
            status_color = Colors.YELLOW
            status_icon = "üü°"
            status_text = "BON"
            status_desc = "Quelques am√©liorations n√©cessaires"
        elif percentage >= 40:
            status_color = Colors.YELLOW
            status_icon = "üü†"
            status_text = "MOYEN"
            status_desc = "Probl√®mes √† corriger"
        else:
            status_color = Colors.RED
            status_icon = "üî¥"
            status_text = "CRITIQUE"
            status_desc = "Intervention urgente requise"
            
        print(f"\n{status_color}{Colors.BOLD}")
        print(f"üèÜ SCORE GLOBAL: {self.health_score}/{self.max_score} ({percentage}%)")
        print(f"{status_icon} STATUT: {status_text}")
        print(f"üìù {status_desc}")
        print(f"{Colors.END}")
        
        # Probl√®mes identifi√©s
        if self.issues:
            print(f"\n{Colors.RED}üö® PROBL√àMES IDENTIFI√âS ({len(self.issues)}){Colors.END}")
            for i, issue in enumerate(self.issues, 1):
                print(f"  {i}. {issue}")
                
        # Recommandations
        if self.recommendations:
            print(f"\n{Colors.CYAN}üí° RECOMMANDATIONS ({len(self.recommendations)}){Colors.END}")
            for i, rec in enumerate(self.recommendations, 1):
                priority_color = Colors.RED if rec['priority'] == 'CRITIQUE' else Colors.YELLOW
                print(f"  {i}. {priority_color}[{rec['priority']}]{Colors.END} {rec['action']}")
                if rec.get('details'):
                    print(f"     üí¨ {rec['details']}")
                    
        return {
            'timestamp': datetime.now().isoformat(),
            'health_score': self.health_score,
            'max_score': self.max_score,
            'percentage': percentage,
            'status': status_text,
            'issues': self.issues,
            'recommendations': self.recommendations
        }
        
    async def run_complete_diagnosis(self):
        """Lance le diagnostic complet"""
        self.print_header()
        
        # Ex√©cuter tous les checks
        await self.check_environment_variables()
        await self.check_backend_services()
        await self.check_network_connectivity()
        await self.check_flutter_configuration()
        await self.check_docker_environment()
        
        # G√©n√©rer le rapport final
        report = self.generate_health_report()
        
        # Sauvegarder le rapport
        report_file = f"cosmic_voice_health_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
            
        print(f"\n{Colors.CYAN}üìÅ Rapport sauvegard√©: {report_file}{Colors.END}")
        
        return report

async def main():
    """Point d'entr√©e principal"""
    try:
        checker = CosmicVoiceHealthChecker()
        report = await checker.run_complete_diagnosis()
        
        # Code de sortie bas√© sur la sant√©
        if report['percentage'] >= 80:
            return 0  # Succ√®s
        elif report['percentage'] >= 40:
            return 1  # Avertissement
        else:
            return 2  # Erreur critique
            
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}‚ö†Ô∏è  Diagnostic interrompu par l'utilisateur{Colors.END}")
        return 130
    except Exception as e:
        print(f"\n{Colors.RED}‚ùå Erreur inattendue: {str(e)}{Colors.END}")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)